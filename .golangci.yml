---
run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags:
    - integration

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-dirs:

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|vendor|mod

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  # default is "colored-line-number"
  format: github-actions

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: true


# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    # check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    # check-blank: false

    # list of functions to exclude from checking, where each entry is a single function to exclude.
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude-functions:
    #   - io/ioutil.ReadFile
    #   - io.Copy(*bytes.Buffer)
    #   - io.Copy(os.Stdout)

  errchkjson:
    # with check-error-free-encoding set to true, errchkjson does warn about errors
    # from json encoding functions that are safe to be ignored,
    # because they are not possible to happen (default false)
    #
    # if check-error-free-encoding is set to true and errcheck linter is enabled,
    # it is recommended to add the following exceptions to prevent from false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #           - (*encoding/json.Encoder).Encode
    # check-error-free-encoding: false
    # if report-no-exported is true, encoding a struct without exported fields is reported as issue (default false)
    # report-no-exported: false

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    # errorf: true
    # Check for plain type assertions and type switches
    # asserts: true
    # Check for plain error comparisons
    # comparison: true

  exhaustive:
    # check switch statements in generated files also
    # check-generated: false
    # presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed
    # default-signifies-exhaustive: false
    # enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness
    # ignore-enum-members: ""
    # consider enums only in package scopes, not in inner scopes
    # package-scope-only: false

  exhaustivestruct:
    # Struct Patterns is list of expressions to match struct packages and names
    # The struct packages have the form example.com/package.ExampleStruct
    # The matching patterns can use matching syntax from https://pkg.go.dev/path#Match
    # If this list is empty, all structs are tested.
    # struct-patterns:
    #   - '*.Test'
    #   - 'example.com/package.ExampleStruct'

  gosimple:
    # Select the Go version to target. The default is '1.13'.
    go: "1.13"
    # https://staticcheck.io/docs/options#checks
    checks:
      - "all"

  govet:
    # report about shadowed variables
    # check-shadowing: true

    # settings per analyzer
    # settings:
    #   printf: # analyzer name, run `go tool vet help` to see all analyzers
    #     funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    # run `go tool vet help` to see all analyzers
    # enable:
    #   - atomicalign
    # enable-all: false
    # disable:
    #   - shadow
    # disable-all: false

  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect. Default is false.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true

  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    # go: "1.15"
    # https://staticcheck.io/docs/options#checks
    checks:
      - "all"

  stylecheck:
    # Select the Go version to target. The default is '1.13'.
    # go: "1.15"
    # https://staticcheck.io/docs/options#checks
    checks:
      - "all"
      - "-ST1000"
      - "-ST1003"
      - "-ST1016"
      - "-ST1020"
      - "-ST1021"
      - "-ST1022"
      - "-ST1023"
    # https://staticcheck.io/docs/options#dot_import_whitelist
    # dot-import-whitelist:
    #   - fmt
    # https://staticcheck.io/docs/options#initialisms
    # initialisms: [ "ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS" ]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    # http-status-code-whitelist: [ "200", "400", "404", "500" ]

  unused:
    # Select the Go version to target. The default is '1.13'.
    # go: "1.15"

linters:
  disable-all: true
  enable:
    - staticcheck
    - stylecheck
    - megacheck
    - govet
    - unused
  fast: false


issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
  #  - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    # - path: _test\.go
    #   linters:
    #     - gocyclo
    #     - errcheck
    #     - dupl
    #     - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    # - path: internal/hmac/
    #   text: "weak cryptographic primitive"
    #   linters:
    #     - gosec

    # Exclude some staticcheck messages
    # - linters:
    #     - staticcheck
    #   text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    # - linters:
    #     - lll
    #   source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable. By default it's empty.
  include:
    # - EXC0002 # disable excluding of issues about comments from golint

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: 387c20615518f1325528705e0ef09e4d30d80378

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file

  # Fix found issues (if it's supported by the linter)
  fix: false

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # default-severity: error

  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  # case-sensitive: false

  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  # rules:
  #   - linters:
  #     - dupl
  #     severity: info
