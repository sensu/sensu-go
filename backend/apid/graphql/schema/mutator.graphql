"""
A Mutator is a mutator specification.
"""
type Mutator implements Node & Namespaced & Resource {
  "The globally unique identifier of the record"
  id: ID!

  "Namespace in which this record resides"
  namespace: String! @deprecated(reason: "use metadata")

  "Name is the unique identifier for a mutator."
  name: String! @deprecated(reason: "use metadata")

  "metadata contains name, namespace, labels and annotations of the record"
  metadata: ObjectMeta

  "Command is the command to be executed."
  command: String!

  "Timeout is the command execution timeout in seconds."
  timeout: Int

  "Env is a list of environment variables to use with command execution"
  envVars: [String!]

  """
  Type specifies the type of the mutator. If blank or set to "pipe", the
  mutator will execute a command with the default shell of the sensu user.
  If set to "javascript", the eval field will be used, interpreted as ECMAScript 5
  and run on the Otto VM. The runtime assets will be assumed to be javascript
  assets, and the environment variables will be made available to the global
  environment of the mutator.
  """
  type: String!

  """
  When the type of the mutator is "javascript", the eval field will be expected
  to hold a valid ECMAScript 5 expression.
  """
  eval: String!

  """
  toJSON returns a REST API compatible representation of the resource. Handy for
  sharing snippets that can then be imported with `sensuctl create`.
  """
  toJSON: JSON!
}

"""
A connection to a sequence of records.
"""
type MutatorConnection {
  nodes: [Mutator!]!
  pageInfo: OffsetPageInfo!
}

"""
Describes ways in which a list of mutators can be ordered.
"""
enum MutatorListOrder {
  NAME
  NAME_DESC
}
