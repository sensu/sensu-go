// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

/*
ErrorType Error describes a failed pre-condition or unexpected problem that occurred while
processing the operation.
*/
var ErrorType = graphql.NewType("Error", graphql.InterfaceKind)

// RegisterError registers Error object type with given service.
func RegisterError(svc *graphql.Service, impl graphql.InterfaceTypeResolver) {
	svc.RegisterInterface(_InterfaceTypeErrorDesc, impl)
}
func _InterfaceTypeErrorConfigFn() graphql1.InterfaceConfig {
	return graphql1.InterfaceConfig{
		Description: "Error describes a failed pre-condition or unexpected problem that occurred while\nprocessing the operation.",
		Fields: graphql1.Fields{
			"code": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A code concisely describing the error.",
				Name:              "code",
				Type:              graphql1.NewNonNull(graphql.OutputType("ErrCode")),
			},
			"input": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The field associated with the error.",
				Name:              "input",
				Type:              graphql1.String,
			},
		},
		Name: "Error",
		ResolveType: func(_ graphql1.ResolveTypeParams) *graphql1.Object {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see InterfaceTypeResolver.")
		},
	}
}

// describe Error's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InterfaceTypeErrorDesc = graphql.InterfaceDesc{Config: _InterfaceTypeErrorConfigFn}

// StandardErrorFieldResolvers represents a collection of methods whose products represent the
// response values of the 'StandardError' type.
type StandardErrorFieldResolvers interface {
	// Input implements response to request for 'input' field.
	Input(p graphql.ResolveParams) (string, error)

	// Code implements response to request for 'code' field.
	Code(p graphql.ResolveParams) (ErrCode, error)

	// Message implements response to request for 'message' field.
	Message(p graphql.ResolveParams) (string, error)
}

// StandardErrorAliases implements all methods on StandardErrorFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type StandardErrorAliases struct{}

// Input implements response to request for 'input' field.
func (_ StandardErrorAliases) Input(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'input'")
	}
	return ret, err
}

// Code implements response to request for 'code' field.
func (_ StandardErrorAliases) Code(p graphql.ResolveParams) (ErrCode, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := ErrCode(val.(string)), true
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'code'")
	}
	return ret, err
}

// Message implements response to request for 'message' field.
func (_ StandardErrorAliases) Message(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'message'")
	}
	return ret, err
}

/*
StandardErrorType StandardError is the standard implementation of an error that includes a
message.
*/
var StandardErrorType = graphql.NewType("StandardError", graphql.ObjectKind)

// RegisterStandardError registers StandardError object type with given service.
func RegisterStandardError(svc *graphql.Service, impl StandardErrorFieldResolvers) {
	svc.RegisterObject(_ObjectTypeStandardErrorDesc, impl)
}
func _ObjTypeStandardErrorInputHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Input(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Input(frp)
	}
}

func _ObjTypeStandardErrorCodeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Code(p graphql.ResolveParams) (ErrCode, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {

		val, err := resolver.Code(frp)
		return string(val), err
	}
}

func _ObjTypeStandardErrorMessageHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Message(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Message(frp)
	}
}

func _ObjectTypeStandardErrorConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "StandardError is the standard implementation of an error that includes a\nmessage.",
		Fields: graphql1.Fields{
			"code": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A code concisely describing the error.",
				Name:              "code",
				Type:              graphql1.NewNonNull(graphql.OutputType("ErrCode")),
			},
			"input": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The field associated with the error.",
				Name:              "input",
				Type:              graphql1.String,
			},
			"message": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Message describing the error.",
				Name:              "message",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Error")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see StandardErrorFieldResolvers.")
		},
		Name: "StandardError",
	}
}

// describe StandardError's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeStandardErrorDesc = graphql.ObjectDesc{
	Config: _ObjectTypeStandardErrorConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"code":    _ObjTypeStandardErrorCodeHandler,
		"input":   _ObjTypeStandardErrorInputHandler,
		"message": _ObjTypeStandardErrorMessageHandler,
	},
}

// ErrCode A terse description of an error.
type ErrCode string

// ErrCodes holds enum values
var ErrCodes = _EnumTypeErrCodeValues{
	ERR_ALREADY_EXISTS:    "ERR_ALREADY_EXISTS",
	ERR_INTERNAL:          "ERR_INTERNAL",
	ERR_NOT_FOUND:         "ERR_NOT_FOUND",
	ERR_PERMISSION_DENIED: "ERR_PERMISSION_DENIED",
	ERR_THRESHOLD_REACHED: "ERR_THRESHOLD_REACHED",
}

// ErrCodeType A terse description of an error.
var ErrCodeType = graphql.NewType("ErrCode", graphql.EnumKind)

// RegisterErrCode registers ErrCode object type with given service.
func RegisterErrCode(svc *graphql.Service) {
	svc.RegisterEnum(_EnumTypeErrCodeDesc)
}
func _EnumTypeErrCodeConfigFn() graphql1.EnumConfig {
	return graphql1.EnumConfig{
		Description: "A terse description of an error.",
		Name:        "ErrCode",
		Values: graphql1.EnumValueConfigMap{
			"ERR_ALREADY_EXISTS": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "Indicates that a record already exists and the operation could not be\ncompleted.",
				Value:             "ERR_ALREADY_EXISTS",
			},
			"ERR_INTERNAL": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "Indicates that some unrecoverable error occurred during execution of the\noperation.",
				Value:             "ERR_INTERNAL",
			},
			"ERR_NOT_FOUND": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "Indicates that the record associated with the given field could not be found.",
				Value:             "ERR_NOT_FOUND",
			},
			"ERR_PERMISSION_DENIED": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "Operation was canceled because the authorization token did not have sufficient\npermissions.",
				Value:             "ERR_PERMISSION_DENIED",
			},
			"ERR_THRESHOLD_REACHED": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "Indicates that set thresholds in configured have reached",
				Value:             "ERR_THRESHOLD_REACHED",
			},
		},
	}
}

// describe ErrCode's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _EnumTypeErrCodeDesc = graphql.EnumDesc{Config: _EnumTypeErrCodeConfigFn}

type _EnumTypeErrCodeValues struct {
	/*
	   ERR_INTERNAL - Indicates that some unrecoverable error occurred during execution of the
	   operation.
	*/
	ERR_INTERNAL ErrCode
	// ERR_NOT_FOUND - Indicates that the record associated with the given field could not be found.
	ERR_NOT_FOUND ErrCode
	/*
	   ERR_ALREADY_EXISTS - Indicates that a record already exists and the operation could not be
	   completed.
	*/
	ERR_ALREADY_EXISTS ErrCode
	/*
	   ERR_PERMISSION_DENIED - Operation was canceled because the authorization token did not have sufficient
	   permissions.
	*/
	ERR_PERMISSION_DENIED ErrCode
	// ERR_THRESHOLD_REACHED - Indicates that set thresholds in configured have reached
	ERR_THRESHOLD_REACHED ErrCode
}
