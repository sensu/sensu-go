// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	fmt "fmt"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// EnvironmentIDFieldResolver implement to resolve requests for the Environment's id field.
type EnvironmentIDFieldResolver interface {
	// ID implements response to request for id field.
	ID(p graphql.ResolveParams) (interface{}, error)
}

// EnvironmentDescriptionFieldResolver implement to resolve requests for the Environment's description field.
type EnvironmentDescriptionFieldResolver interface {
	// Description implements response to request for description field.
	Description(p graphql.ResolveParams) (string, error)
}

// EnvironmentNameFieldResolver implement to resolve requests for the Environment's name field.
type EnvironmentNameFieldResolver interface {
	// Name implements response to request for name field.
	Name(p graphql.ResolveParams) (string, error)
}

// EnvironmentOrganizationFieldResolver implement to resolve requests for the Environment's organization field.
type EnvironmentOrganizationFieldResolver interface {
	// Organization implements response to request for organization field.
	Organization(p graphql.ResolveParams) (interface{}, error)
}

//
// EnvironmentFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Environment' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type EnvironmentFieldResolvers interface {
	EnvironmentIDFieldResolver
	EnvironmentDescriptionFieldResolver
	EnvironmentNameFieldResolver
	EnvironmentOrganizationFieldResolver
}

// EnvironmentAliases implements all methods on EnvironmentFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type EnvironmentAliases struct{}

// ID implements response to request for 'id' field.
func (_ EnvironmentAliases) ID(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Description implements response to request for 'description' field.
func (_ EnvironmentAliases) Description(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Name implements response to request for 'name' field.
func (_ EnvironmentAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Organization implements response to request for 'organization' field.
func (_ EnvironmentAliases) Organization(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// EnvironmentType Environment represents a Sensu environment in RBAC
var EnvironmentType = graphql.NewType("Environment", graphql.ObjectKind)

// RegisterEnvironment registers Environment object type with given service.
func RegisterEnvironment(svc *graphql.Service, impl EnvironmentFieldResolvers) {
	svc.RegisterObject(_ObjectTypeEnvironmentDesc, impl)
}
func _ObjTypeEnvironmentIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EnvironmentIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(p)
	}
}

func _ObjTypeEnvironmentDescriptionHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EnvironmentDescriptionFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Description(p)
	}
}

func _ObjTypeEnvironmentNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EnvironmentNameFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(p)
	}
}

func _ObjTypeEnvironmentOrganizationHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EnvironmentOrganizationFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Organization(p)
	}
}

func _ObjectTypeEnvironmentConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Environment represents a Sensu environment in RBAC",
		Fields: graphql1.Fields{
			"description": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "description",
				Type:              graphql1.String,
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"organization": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "organization",
				Type:              graphql1.NewNonNull(graphql.OutputType("Organization")),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see EnvironmentFieldResolvers.")
		},
		Name: "Environment",
	}
}

// describe Environment's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeEnvironmentDesc = graphql.ObjectDesc{
	Config: _ObjectTypeEnvironmentConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"description":  _ObjTypeEnvironmentDescriptionHandler,
		"id":           _ObjTypeEnvironmentIDHandler,
		"name":         _ObjTypeEnvironmentNameHandler,
		"organization": _ObjTypeEnvironmentOrganizationHandler,
	},
}
