// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// SuggestionResultSetValuesFieldResolver implement to resolve requests for the SuggestionResultSet's values field.
type SuggestionResultSetValuesFieldResolver interface {
	// Values implements response to request for values field.
	Values(p graphql.ResolveParams) (interface{}, error)
}

//
// SuggestionResultSetFieldResolvers represents a collection of methods whose products represent the
// response values of the 'SuggestionResultSet' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type SuggestionResultSetFieldResolvers interface {
	SuggestionResultSetValuesFieldResolver
}

// SuggestionResultSetAliases implements all methods on SuggestionResultSetFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type SuggestionResultSetAliases struct{}

// Values implements response to request for 'values' field.
func (_ SuggestionResultSetAliases) Values(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// SuggestionResultSetType SuggestionResultSet contains a collection of results for the given query.
var SuggestionResultSetType = graphql.NewType("SuggestionResultSet", graphql.ObjectKind)

// RegisterSuggestionResultSet registers SuggestionResultSet object type with given service.
func RegisterSuggestionResultSet(svc *graphql.Service, impl SuggestionResultSetFieldResolvers) {
	svc.RegisterObject(_ObjectTypeSuggestionResultSetDesc, impl)
}
func _ObjTypeSuggestionResultSetValuesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SuggestionResultSetValuesFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Values(frp)
	}
}

func _ObjectTypeSuggestionResultSetConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "SuggestionResultSet contains a collection of results for the given query.",
		Fields: graphql1.Fields{"values": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "self descriptive",
			Name:              "values",
			Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("SuggestionResult")))),
		}},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see SuggestionResultSetFieldResolvers.")
		},
		Name: "SuggestionResultSet",
	}
}

// describe SuggestionResultSet's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeSuggestionResultSetDesc = graphql.ObjectDesc{
	Config:        _ObjectTypeSuggestionResultSetConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"values": _ObjTypeSuggestionResultSetValuesHandler},
}

/*
SuggestionResultType SuggestionResult represents either a string or integer value in a set of
suggestsions.
*/
var SuggestionResultType = graphql.NewType("SuggestionResult", graphql.UnionKind)

// RegisterSuggestionResult registers SuggestionResult object type with given service.
func RegisterSuggestionResult(svc *graphql.Service, impl graphql.UnionTypeResolver) {
	svc.RegisterUnion(_UnionTypeSuggestionResultDesc, impl)
}
func _UnionTypeSuggestionResultConfigFn() graphql1.UnionConfig {
	return graphql1.UnionConfig{
		Description: "SuggestionResult represents either a string or integer value in a set of\nsuggestsions.",
		Name:        "SuggestionResult",
		ResolveType: func(_ graphql1.ResolveTypeParams) *graphql1.Object {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see UnionTypeResolver.")
		},
		Types: []*graphql1.Object{
			graphql.Object("StringResult"),
			graphql.Object("IntResult")},
	}
}

// describe SuggestionResult's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _UnionTypeSuggestionResultDesc = graphql.UnionDesc{Config: _UnionTypeSuggestionResultConfigFn}

// StringResultValueFieldResolver implement to resolve requests for the StringResult's value field.
type StringResultValueFieldResolver interface {
	// Value implements response to request for value field.
	Value(p graphql.ResolveParams) (string, error)
}

//
// StringResultFieldResolvers represents a collection of methods whose products represent the
// response values of the 'StringResult' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type StringResultFieldResolvers interface {
	StringResultValueFieldResolver
}

// StringResultAliases implements all methods on StringResultFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type StringResultAliases struct{}

// Value implements response to request for 'value' field.
func (_ StringResultAliases) Value(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'value'")
	}
	return ret, err
}

// StringResultType self descriptive
var StringResultType = graphql.NewType("StringResult", graphql.ObjectKind)

// RegisterStringResult registers StringResult object type with given service.
func RegisterStringResult(svc *graphql.Service, impl StringResultFieldResolvers) {
	svc.RegisterObject(_ObjectTypeStringResultDesc, impl)
}
func _ObjTypeStringResultValueHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(StringResultValueFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Value(frp)
	}
}

func _ObjectTypeStringResultConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{"value": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "self descriptive",
			Name:              "value",
			Type:              graphql1.NewNonNull(graphql1.String),
		}},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see StringResultFieldResolvers.")
		},
		Name: "StringResult",
	}
}

// describe StringResult's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeStringResultDesc = graphql.ObjectDesc{
	Config:        _ObjectTypeStringResultConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"value": _ObjTypeStringResultValueHandler},
}

// IntResultValueFieldResolver implement to resolve requests for the IntResult's value field.
type IntResultValueFieldResolver interface {
	// Value implements response to request for value field.
	Value(p graphql.ResolveParams) (int, error)
}

//
// IntResultFieldResolvers represents a collection of methods whose products represent the
// response values of the 'IntResult' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type IntResultFieldResolvers interface {
	IntResultValueFieldResolver
}

// IntResultAliases implements all methods on IntResultFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type IntResultAliases struct{}

// Value implements response to request for 'value' field.
func (_ IntResultAliases) Value(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'value'")
	}
	return ret, err
}

// IntResultType self descriptive
var IntResultType = graphql.NewType("IntResult", graphql.ObjectKind)

// RegisterIntResult registers IntResult object type with given service.
func RegisterIntResult(svc *graphql.Service, impl IntResultFieldResolvers) {
	svc.RegisterObject(_ObjectTypeIntResultDesc, impl)
}
func _ObjTypeIntResultValueHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(IntResultValueFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Value(frp)
	}
}

func _ObjectTypeIntResultConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{"value": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "self descriptive",
			Name:              "value",
			Type:              graphql1.NewNonNull(graphql1.Int),
		}},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see IntResultFieldResolvers.")
		},
		Name: "IntResult",
	}
}

// describe IntResult's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeIntResultDesc = graphql.ObjectDesc{
	Config:        _ObjectTypeIntResultConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"value": _ObjTypeIntResultValueHandler},
}

// SuggestionOrder self descriptive
type SuggestionOrder string

// SuggestionOrders holds enum values
var SuggestionOrders = _EnumTypeSuggestionOrderValues{
	ALPHA_ASC:  "ALPHA_ASC",
	ALPHA_DESC: "ALPHA_DESC",
	FREQUENCY:  "FREQUENCY",
}

// SuggestionOrderType self descriptive
var SuggestionOrderType = graphql.NewType("SuggestionOrder", graphql.EnumKind)

// RegisterSuggestionOrder registers SuggestionOrder object type with given service.
func RegisterSuggestionOrder(svc *graphql.Service) {
	svc.RegisterEnum(_EnumTypeSuggestionOrderDesc)
}
func _EnumTypeSuggestionOrderConfigFn() graphql1.EnumConfig {
	return graphql1.EnumConfig{
		Description: "self descriptive",
		Name:        "SuggestionOrder",
		Values: graphql1.EnumValueConfigMap{
			"ALPHA_ASC": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "ALPHA_ASC",
			},
			"ALPHA_DESC": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "ALPHA_DESC",
			},
			"FREQUENCY": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "FREQUENCY",
			},
		},
	}
}

// describe SuggestionOrder's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _EnumTypeSuggestionOrderDesc = graphql.EnumDesc{Config: _EnumTypeSuggestionOrderConfigFn}

type _EnumTypeSuggestionOrderValues struct {
	// ALPHA_ASC - self descriptive
	ALPHA_ASC SuggestionOrder
	// ALPHA_DESC - self descriptive
	ALPHA_DESC SuggestionOrder
	// FREQUENCY - self descriptive
	FREQUENCY SuggestionOrder
}
