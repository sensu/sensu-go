"""
Entity is the Entity supplying the event. The default Entity for any
Event is the running Agent process--if the Event is sent by an Agent.
"""
type Entity implements Node & Namespaced & Silenceable & Resource {
  "The globally unique identifier of the record"
  id: ID!

  "Namespace in which this record resides"
  namespace: String! @deprecated(reason: "use metadata")

  "metadata contains name, namespace, labels and annotations of the record"
  metadata: ObjectMeta

  "unique identifier for the entity"
  name: String! @deprecated(reason: "use metadata")
  entityClass: String!
  system: System!
  subscriptions: [String!]
  lastSeen: DateTime
  deregister: Boolean!
  deregistration: Deregistration!
  user: String!

  "If agent; reflects the version reported by the sensu-agent client."
  sensuAgentVersion: String!

  "Redact contains the fields to redact on the agent."
  redact: [String!]!

  """
  Status represents the MAX status of all events associated with the entity. If
  no events are present value is 0.
  """
  status: Uint!

  "Related returns a sorted list of like entities from the same environment."
  related(limit: Int = 10): [Entity]!

  "All events associated with the entity."
  events(
    "OrderBy adds optional order to the records retrieved."
    orderBy: EventsListOrder = SEVERITY
    """
    Filters reduces the set using given arbitrary expression[s]; expressions
    take on the form KEY: VALUE. The accepted key(s) are: status, check, entity,
    & silenced.

    Eg.

    status:passing
    status:warning
    status:incident
    check:check-disk
    entity:venice
    silenced:true
    """
    filters: [String!] = []
  ): [Event!]!

  "isSilenced return true if the entity has any silences associated with it."
  isSilenced: Boolean!

  """
  All silences matching the entity's subscriptions and where the silence
  matches all checks.
  """
  silences: [Silenced!]!

  """
  toJSON returns a REST API compatible representation of the resource. Handy for
  sharing snippets that can then be imported with `sensuctl create`.
  """
  toJSON: JSON!
}

"""
System contains information about the system that the Agent process
is running on, used for additional Entity context.
"""
type System {
  hostname: String!
  network: Network!

  "Operating system; eg. freebsd, linux, ..."
  os: String!

  "Operating system platform; eg. ubuntu, linuxmint, ..."
  platform: String!

  "Operating system family; eg. debian, rhel, ..."
  platformFamily: String!

  "Version of complete operating system; eg. 10.12.2, ..."
  platformVersion: String!

  "Architecture; eg. 386, amd64, arm, ..."
  arch: String!

  "Version of ARM architecture in play"
  ARMVersion: Int!

  "LibCType indicates the type of libc the agent has access to (glibc, musl, etc)"
  libCType: String!

  "VMSystem indicates the VM system of the agent (kvm, vbox, etc)"
  VMSystem: String!

  "VMRole indicates the VM role of the agent (host/guest)"
  VMRole: String!

  "CloudProvider indicates the public cloud the agent is running on."
  cloudProvider: String!

  "Float type"
  floatType: String!

  "Processes contains information about the local processes on the agent."
  processes: [Process!]!
}

"""
Process contains information about a local process.
"""
type Process {
  name: String!
  pid: Int!
  ppid: Int!
  status: String!
  created: DateTime!
  running: Boolean!
  background: Boolean!
  cpuPercent: Float!
  memoryPercent: Float!
}

"""
Network contains information about the system network interfaces
that the Agent process is running on, used for additional Entity
context.
"""
type Network {
  interfaces: [NetworkInterface!]!
}

"""
NetworkInterface contains information about a system network
interface.
"""
type NetworkInterface {
  "Name given to the network interface; en0, wi0, tunnel0, etc."
  name: String!

  "MAC address associated with the network interface"
  mac: String!

  "IP address(es) associated with the network interface"
  addresses: [String!]!
}

"""
Deregistration contains configuration for Sensu entity de-registration.
"""
type Deregistration {
  handler: String!
}

"A connection to a sequence of records."
type EntityConnection {
  nodes: [Entity!]!
  pageInfo: OffsetPageInfo!
}

"Describes ways in which a list of entities can be ordered."
enum EntityListOrder {
  ID
  ID_DESC
  LASTSEEN
}
