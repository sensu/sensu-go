// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	fmt "fmt"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// EntityIDFieldResolver implement to resolve requests for the Entity's id field.
type EntityIDFieldResolver interface {
	// ID implements response to request for id field.
	ID(p graphql.ResolveParams) (interface{}, error)
}

// EntityNamespaceFieldResolver implement to resolve requests for the Entity's namespace field.
type EntityNamespaceFieldResolver interface {
	// Namespace implements response to request for namespace field.
	Namespace(p graphql.ResolveParams) (interface{}, error)
}

// EntityNameFieldResolver implement to resolve requests for the Entity's name field.
type EntityNameFieldResolver interface {
	// Name implements response to request for name field.
	Name(p graphql.ResolveParams) (string, error)
}

// EntityClassFieldResolver implement to resolve requests for the Entity's class field.
type EntityClassFieldResolver interface {
	// Class implements response to request for class field.
	Class(p graphql.ResolveParams) (string, error)
}

// EntitySystemFieldResolver implement to resolve requests for the Entity's system field.
type EntitySystemFieldResolver interface {
	// System implements response to request for system field.
	System(p graphql.ResolveParams) (interface{}, error)
}

// EntitySubscriptionsFieldResolver implement to resolve requests for the Entity's subscriptions field.
type EntitySubscriptionsFieldResolver interface {
	// Subscriptions implements response to request for subscriptions field.
	Subscriptions(p graphql.ResolveParams) ([]string, error)
}

// EntityLastSeenFieldResolver implement to resolve requests for the Entity's lastSeen field.
type EntityLastSeenFieldResolver interface {
	// LastSeen implements response to request for lastSeen field.
	LastSeen(p graphql.ResolveParams) (int, error)
}

// EntityDeregisterFieldResolver implement to resolve requests for the Entity's deregister field.
type EntityDeregisterFieldResolver interface {
	// Deregister implements response to request for deregister field.
	Deregister(p graphql.ResolveParams) (bool, error)
}

// EntityDeregistrationFieldResolver implement to resolve requests for the Entity's deregistration field.
type EntityDeregistrationFieldResolver interface {
	// Deregistration implements response to request for deregistration field.
	Deregistration(p graphql.ResolveParams) (interface{}, error)
}

// EntityKeepaliveTimeoutFieldResolver implement to resolve requests for the Entity's keepaliveTimeout field.
type EntityKeepaliveTimeoutFieldResolver interface {
	// KeepaliveTimeout implements response to request for keepaliveTimeout field.
	KeepaliveTimeout(p graphql.ResolveParams) (int, error)
}

// EntityAuthorIDFieldResolver implement to resolve requests for the Entity's authorId field.
type EntityAuthorIDFieldResolver interface {
	// AuthorID implements response to request for authorId field.
	AuthorID(p graphql.ResolveParams) (string, error)
}

// EntityAuthorFieldResolver implement to resolve requests for the Entity's author field.
type EntityAuthorFieldResolver interface {
	// Author implements response to request for author field.
	Author(p graphql.ResolveParams) (interface{}, error)
}

//
// EntityFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Entity' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type EntityFieldResolvers interface {
	EntityIDFieldResolver
	EntityNamespaceFieldResolver
	EntityNameFieldResolver
	EntityClassFieldResolver
	EntitySystemFieldResolver
	EntitySubscriptionsFieldResolver
	EntityLastSeenFieldResolver
	EntityDeregisterFieldResolver
	EntityDeregistrationFieldResolver
	EntityKeepaliveTimeoutFieldResolver
	EntityAuthorIDFieldResolver
	EntityAuthorFieldResolver
}

// EntityAliases implements all methods on EntityFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type EntityAliases struct{}

// ID implements response to request for 'id' field.
func (_ EntityAliases) ID(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Namespace implements response to request for 'namespace' field.
func (_ EntityAliases) Namespace(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Name implements response to request for 'name' field.
func (_ EntityAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Class implements response to request for 'class' field.
func (_ EntityAliases) Class(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// System implements response to request for 'system' field.
func (_ EntityAliases) System(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Subscriptions implements response to request for 'subscriptions' field.
func (_ EntityAliases) Subscriptions(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.([]string)
	return ret, err
}

// LastSeen implements response to request for 'lastSeen' field.
func (_ EntityAliases) LastSeen(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := graphql1.Int.ParseValue(val).(int)
	return ret, err
}

// Deregister implements response to request for 'deregister' field.
func (_ EntityAliases) Deregister(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.(bool)
	return ret, err
}

// Deregistration implements response to request for 'deregistration' field.
func (_ EntityAliases) Deregistration(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// KeepaliveTimeout implements response to request for 'keepaliveTimeout' field.
func (_ EntityAliases) KeepaliveTimeout(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := graphql1.Int.ParseValue(val).(int)
	return ret, err
}

// AuthorID implements response to request for 'authorId' field.
func (_ EntityAliases) AuthorID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Author implements response to request for 'author' field.
func (_ EntityAliases) Author(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

/*
EntityType Entity is the Entity supplying the event. The default Entity for any
Event is the running Agent process--if the Event is sent by an Agent.
*/
var EntityType = graphql.NewType("Entity", graphql.ObjectKind)

// RegisterEntity registers Entity object type with given service.
func RegisterEntity(svc *graphql.Service, impl EntityFieldResolvers) {
	svc.RegisterObject(_ObjectTypeEntityDesc, impl)
}
func _ObjTypeEntityIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(p)
	}
}

func _ObjTypeEntityNamespaceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityNamespaceFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Namespace(p)
	}
}

func _ObjTypeEntityNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityNameFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(p)
	}
}

func _ObjTypeEntityClassHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityClassFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Class(p)
	}
}

func _ObjTypeEntitySystemHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntitySystemFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.System(p)
	}
}

func _ObjTypeEntitySubscriptionsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntitySubscriptionsFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Subscriptions(p)
	}
}

func _ObjTypeEntityLastSeenHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityLastSeenFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.LastSeen(p)
	}
}

func _ObjTypeEntityDeregisterHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityDeregisterFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Deregister(p)
	}
}

func _ObjTypeEntityDeregistrationHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityDeregistrationFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Deregistration(p)
	}
}

func _ObjTypeEntityKeepaliveTimeoutHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityKeepaliveTimeoutFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.KeepaliveTimeout(p)
	}
}

func _ObjTypeEntityAuthorIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityAuthorIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.AuthorID(p)
	}
}

func _ObjTypeEntityAuthorHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityAuthorFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Author(p)
	}
}

func _ObjectTypeEntityConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Entity is the Entity supplying the event. The default Entity for any\nEvent is the running Agent process--if the Event is sent by an Agent.",
		Fields: graphql1.Fields{
			"author": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "author",
				Type:              graphql1.NewNonNull(graphql.OutputType("User")),
			},
			"authorId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "authorId",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"class": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "class",
				Type:              graphql1.String,
			},
			"deregister": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "deregister",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"deregistration": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "deregistration",
				Type:              graphql.OutputType("Deregistration"),
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The globally unique identifier of the record",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"keepaliveTimeout": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "keepaliveTimeout",
				Type:              graphql1.Int,
			},
			"lastSeen": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "lastSeen",
				Type:              graphql1.Int,
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "unique identifier for the entity",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"namespace": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Namespace in which this record resides",
				Name:              "namespace",
				Type:              graphql1.NewNonNull(graphql.OutputType("Namespace")),
			},
			"subscriptions": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "subscriptions",
				Type:              graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
			"system": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "system",
				Type:              graphql.OutputType("System"),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see EntityFieldResolvers.")
		},
		Name: "Entity",
	}
}

// describe Entity's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeEntityDesc = graphql.ObjectDesc{
	Config: _ObjectTypeEntityConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"author":           _ObjTypeEntityAuthorHandler,
		"authorId":         _ObjTypeEntityAuthorIDHandler,
		"class":            _ObjTypeEntityClassHandler,
		"deregister":       _ObjTypeEntityDeregisterHandler,
		"deregistration":   _ObjTypeEntityDeregistrationHandler,
		"id":               _ObjTypeEntityIDHandler,
		"keepaliveTimeout": _ObjTypeEntityKeepaliveTimeoutHandler,
		"lastSeen":         _ObjTypeEntityLastSeenHandler,
		"name":             _ObjTypeEntityNameHandler,
		"namespace":        _ObjTypeEntityNamespaceHandler,
		"subscriptions":    _ObjTypeEntitySubscriptionsHandler,
		"system":           _ObjTypeEntitySystemHandler,
	},
}

// EntityConnectionEdgesFieldResolver implement to resolve requests for the EntityConnection's edges field.
type EntityConnectionEdgesFieldResolver interface {
	// Edges implements response to request for edges field.
	Edges(p graphql.ResolveParams) (interface{}, error)
}

// EntityConnectionPageInfoFieldResolver implement to resolve requests for the EntityConnection's pageInfo field.
type EntityConnectionPageInfoFieldResolver interface {
	// PageInfo implements response to request for pageInfo field.
	PageInfo(p graphql.ResolveParams) (interface{}, error)
}

// EntityConnectionTotalCountFieldResolver implement to resolve requests for the EntityConnection's totalCount field.
type EntityConnectionTotalCountFieldResolver interface {
	// TotalCount implements response to request for totalCount field.
	TotalCount(p graphql.ResolveParams) (int, error)
}

//
// EntityConnectionFieldResolvers represents a collection of methods whose products represent the
// response values of the 'EntityConnection' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type EntityConnectionFieldResolvers interface {
	EntityConnectionEdgesFieldResolver
	EntityConnectionPageInfoFieldResolver
	EntityConnectionTotalCountFieldResolver
}

// EntityConnectionAliases implements all methods on EntityConnectionFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type EntityConnectionAliases struct{}

// Edges implements response to request for 'edges' field.
func (_ EntityConnectionAliases) Edges(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// PageInfo implements response to request for 'pageInfo' field.
func (_ EntityConnectionAliases) PageInfo(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// TotalCount implements response to request for 'totalCount' field.
func (_ EntityConnectionAliases) TotalCount(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := graphql1.Int.ParseValue(val).(int)
	return ret, err
}

// EntityConnectionType A connection to a sequence of records.
var EntityConnectionType = graphql.NewType("EntityConnection", graphql.ObjectKind)

// RegisterEntityConnection registers EntityConnection object type with given service.
func RegisterEntityConnection(svc *graphql.Service, impl EntityConnectionFieldResolvers) {
	svc.RegisterObject(_ObjectTypeEntityConnectionDesc, impl)
}
func _ObjTypeEntityConnectionEdgesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityConnectionEdgesFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Edges(p)
	}
}

func _ObjTypeEntityConnectionPageInfoHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityConnectionPageInfoFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.PageInfo(p)
	}
}

func _ObjTypeEntityConnectionTotalCountHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityConnectionTotalCountFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.TotalCount(p)
	}
}

func _ObjectTypeEntityConnectionConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A connection to a sequence of records.",
		Fields: graphql1.Fields{
			"edges": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "edges",
				Type:              graphql1.NewList(graphql.OutputType("EntityEdge")),
			},
			"pageInfo": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "pageInfo",
				Type:              graphql1.NewNonNull(graphql.OutputType("PageInfo")),
			},
			"totalCount": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "totalCount",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see EntityConnectionFieldResolvers.")
		},
		Name: "EntityConnection",
	}
}

// describe EntityConnection's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeEntityConnectionDesc = graphql.ObjectDesc{
	Config: _ObjectTypeEntityConnectionConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"edges":      _ObjTypeEntityConnectionEdgesHandler,
		"pageInfo":   _ObjTypeEntityConnectionPageInfoHandler,
		"totalCount": _ObjTypeEntityConnectionTotalCountHandler,
	},
}

// EntityEdgeNodeFieldResolver implement to resolve requests for the EntityEdge's node field.
type EntityEdgeNodeFieldResolver interface {
	// Node implements response to request for node field.
	Node(p graphql.ResolveParams) (interface{}, error)
}

// EntityEdgeCursorFieldResolver implement to resolve requests for the EntityEdge's cursor field.
type EntityEdgeCursorFieldResolver interface {
	// Cursor implements response to request for cursor field.
	Cursor(p graphql.ResolveParams) (string, error)
}

//
// EntityEdgeFieldResolvers represents a collection of methods whose products represent the
// response values of the 'EntityEdge' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type EntityEdgeFieldResolvers interface {
	EntityEdgeNodeFieldResolver
	EntityEdgeCursorFieldResolver
}

// EntityEdgeAliases implements all methods on EntityEdgeFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type EntityEdgeAliases struct{}

// Node implements response to request for 'node' field.
func (_ EntityEdgeAliases) Node(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Cursor implements response to request for 'cursor' field.
func (_ EntityEdgeAliases) Cursor(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// EntityEdgeType An edge in a connection.
var EntityEdgeType = graphql.NewType("EntityEdge", graphql.ObjectKind)

// RegisterEntityEdge registers EntityEdge object type with given service.
func RegisterEntityEdge(svc *graphql.Service, impl EntityEdgeFieldResolvers) {
	svc.RegisterObject(_ObjectTypeEntityEdgeDesc, impl)
}
func _ObjTypeEntityEdgeNodeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityEdgeNodeFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Node(p)
	}
}

func _ObjTypeEntityEdgeCursorHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(EntityEdgeCursorFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Cursor(p)
	}
}

func _ObjectTypeEntityEdgeConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "An edge in a connection.",
		Fields: graphql1.Fields{
			"cursor": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "cursor",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"node": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "node",
				Type:              graphql.OutputType("Entity"),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see EntityEdgeFieldResolvers.")
		},
		Name: "EntityEdge",
	}
}

// describe EntityEdge's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeEntityEdgeDesc = graphql.ObjectDesc{
	Config: _ObjectTypeEntityEdgeConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"cursor": _ObjTypeEntityEdgeCursorHandler,
		"node":   _ObjTypeEntityEdgeNodeHandler,
	},
}

// SystemHostnameFieldResolver implement to resolve requests for the System's hostname field.
type SystemHostnameFieldResolver interface {
	// Hostname implements response to request for hostname field.
	Hostname(p graphql.ResolveParams) (string, error)
}

// SystemOsFieldResolver implement to resolve requests for the System's os field.
type SystemOsFieldResolver interface {
	// Os implements response to request for os field.
	Os(p graphql.ResolveParams) (string, error)
}

// SystemPlatformFieldResolver implement to resolve requests for the System's platform field.
type SystemPlatformFieldResolver interface {
	// Platform implements response to request for platform field.
	Platform(p graphql.ResolveParams) (string, error)
}

// SystemPlatformFamilyFieldResolver implement to resolve requests for the System's platformFamily field.
type SystemPlatformFamilyFieldResolver interface {
	// PlatformFamily implements response to request for platformFamily field.
	PlatformFamily(p graphql.ResolveParams) (string, error)
}

// SystemPlatformVersionFieldResolver implement to resolve requests for the System's platformVersion field.
type SystemPlatformVersionFieldResolver interface {
	// PlatformVersion implements response to request for platformVersion field.
	PlatformVersion(p graphql.ResolveParams) (string, error)
}

// SystemNetworkFieldResolver implement to resolve requests for the System's network field.
type SystemNetworkFieldResolver interface {
	// Network implements response to request for network field.
	Network(p graphql.ResolveParams) (interface{}, error)
}

//
// SystemFieldResolvers represents a collection of methods whose products represent the
// response values of the 'System' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type SystemFieldResolvers interface {
	SystemHostnameFieldResolver
	SystemOsFieldResolver
	SystemPlatformFieldResolver
	SystemPlatformFamilyFieldResolver
	SystemPlatformVersionFieldResolver
	SystemNetworkFieldResolver
}

// SystemAliases implements all methods on SystemFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type SystemAliases struct{}

// Hostname implements response to request for 'hostname' field.
func (_ SystemAliases) Hostname(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Os implements response to request for 'os' field.
func (_ SystemAliases) Os(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Platform implements response to request for 'platform' field.
func (_ SystemAliases) Platform(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// PlatformFamily implements response to request for 'platformFamily' field.
func (_ SystemAliases) PlatformFamily(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// PlatformVersion implements response to request for 'platformVersion' field.
func (_ SystemAliases) PlatformVersion(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Network implements response to request for 'network' field.
func (_ SystemAliases) Network(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

/*
SystemType System contains information about the system that the Agent process
is running on, used for additional Entity context.
*/
var SystemType = graphql.NewType("System", graphql.ObjectKind)

// RegisterSystem registers System object type with given service.
func RegisterSystem(svc *graphql.Service, impl SystemFieldResolvers) {
	svc.RegisterObject(_ObjectTypeSystemDesc, impl)
}
func _ObjTypeSystemHostnameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SystemHostnameFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Hostname(p)
	}
}

func _ObjTypeSystemOsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SystemOsFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Os(p)
	}
}

func _ObjTypeSystemPlatformHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SystemPlatformFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Platform(p)
	}
}

func _ObjTypeSystemPlatformFamilyHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SystemPlatformFamilyFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.PlatformFamily(p)
	}
}

func _ObjTypeSystemPlatformVersionHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SystemPlatformVersionFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.PlatformVersion(p)
	}
}

func _ObjTypeSystemNetworkHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SystemNetworkFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Network(p)
	}
}

func _ObjectTypeSystemConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "System contains information about the system that the Agent process\nis running on, used for additional Entity context.",
		Fields: graphql1.Fields{
			"hostname": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "hostname",
				Type:              graphql1.String,
			},
			"network": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "network",
				Type:              graphql.OutputType("Network"),
			},
			"os": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "os",
				Type:              graphql1.String,
			},
			"platform": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "platform",
				Type:              graphql1.String,
			},
			"platformFamily": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "platformFamily",
				Type:              graphql1.String,
			},
			"platformVersion": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "platformVersion",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see SystemFieldResolvers.")
		},
		Name: "System",
	}
}

// describe System's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeSystemDesc = graphql.ObjectDesc{
	Config: _ObjectTypeSystemConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"hostname":        _ObjTypeSystemHostnameHandler,
		"network":         _ObjTypeSystemNetworkHandler,
		"os":              _ObjTypeSystemOsHandler,
		"platform":        _ObjTypeSystemPlatformHandler,
		"platformFamily":  _ObjTypeSystemPlatformFamilyHandler,
		"platformVersion": _ObjTypeSystemPlatformVersionHandler,
	},
}

// NetworkInterfacesFieldResolver implement to resolve requests for the Network's interfaces field.
type NetworkInterfacesFieldResolver interface {
	// Interfaces implements response to request for interfaces field.
	Interfaces(p graphql.ResolveParams) (interface{}, error)
}

//
// NetworkFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Network' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type NetworkFieldResolvers interface {
	NetworkInterfacesFieldResolver
}

// NetworkAliases implements all methods on NetworkFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type NetworkAliases struct{}

// Interfaces implements response to request for 'interfaces' field.
func (_ NetworkAliases) Interfaces(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

/*
NetworkType Network contains information about the system network interfaces
that the Agent process is running on, used for additional Entity
context.
*/
var NetworkType = graphql.NewType("Network", graphql.ObjectKind)

// RegisterNetwork registers Network object type with given service.
func RegisterNetwork(svc *graphql.Service, impl NetworkFieldResolvers) {
	svc.RegisterObject(_ObjectTypeNetworkDesc, impl)
}
func _ObjTypeNetworkInterfacesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(NetworkInterfacesFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Interfaces(p)
	}
}

func _ObjectTypeNetworkConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Network contains information about the system network interfaces\nthat the Agent process is running on, used for additional Entity\ncontext.",
		Fields: graphql1.Fields{"interfaces": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "self descriptive",
			Name:              "interfaces",
			Type:              graphql1.NewList(graphql.OutputType("NetworkInterface")),
		}},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see NetworkFieldResolvers.")
		},
		Name: "Network",
	}
}

// describe Network's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeNetworkDesc = graphql.ObjectDesc{
	Config:        _ObjectTypeNetworkConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"interfaces": _ObjTypeNetworkInterfacesHandler},
}

// NetworkInterfaceNameFieldResolver implement to resolve requests for the NetworkInterface's name field.
type NetworkInterfaceNameFieldResolver interface {
	// Name implements response to request for name field.
	Name(p graphql.ResolveParams) (string, error)
}

// NetworkInterfaceMacFieldResolver implement to resolve requests for the NetworkInterface's mac field.
type NetworkInterfaceMacFieldResolver interface {
	// Mac implements response to request for mac field.
	Mac(p graphql.ResolveParams) (string, error)
}

// NetworkInterfaceAddressesFieldResolver implement to resolve requests for the NetworkInterface's addresses field.
type NetworkInterfaceAddressesFieldResolver interface {
	// Addresses implements response to request for addresses field.
	Addresses(p graphql.ResolveParams) (string, error)
}

//
// NetworkInterfaceFieldResolvers represents a collection of methods whose products represent the
// response values of the 'NetworkInterface' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type NetworkInterfaceFieldResolvers interface {
	NetworkInterfaceNameFieldResolver
	NetworkInterfaceMacFieldResolver
	NetworkInterfaceAddressesFieldResolver
}

// NetworkInterfaceAliases implements all methods on NetworkInterfaceFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type NetworkInterfaceAliases struct{}

// Name implements response to request for 'name' field.
func (_ NetworkInterfaceAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Mac implements response to request for 'mac' field.
func (_ NetworkInterfaceAliases) Mac(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Addresses implements response to request for 'addresses' field.
func (_ NetworkInterfaceAliases) Addresses(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

/*
NetworkInterfaceType NetworkInterface contains information about a system network
interface.
*/
var NetworkInterfaceType = graphql.NewType("NetworkInterface", graphql.ObjectKind)

// RegisterNetworkInterface registers NetworkInterface object type with given service.
func RegisterNetworkInterface(svc *graphql.Service, impl NetworkInterfaceFieldResolvers) {
	svc.RegisterObject(_ObjectTypeNetworkInterfaceDesc, impl)
}
func _ObjTypeNetworkInterfaceNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(NetworkInterfaceNameFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(p)
	}
}

func _ObjTypeNetworkInterfaceMacHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(NetworkInterfaceMacFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Mac(p)
	}
}

func _ObjTypeNetworkInterfaceAddressesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(NetworkInterfaceAddressesFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Addresses(p)
	}
}

func _ObjectTypeNetworkInterfaceConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "NetworkInterface contains information about a system network\ninterface.",
		Fields: graphql1.Fields{
			"addresses": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "addresses",
				Type:              graphql1.String,
			},
			"mac": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "mac",
				Type:              graphql1.String,
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "name",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see NetworkInterfaceFieldResolvers.")
		},
		Name: "NetworkInterface",
	}
}

// describe NetworkInterface's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeNetworkInterfaceDesc = graphql.ObjectDesc{
	Config: _ObjectTypeNetworkInterfaceConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"addresses": _ObjTypeNetworkInterfaceAddressesHandler,
		"mac":       _ObjTypeNetworkInterfaceMacHandler,
		"name":      _ObjTypeNetworkInterfaceNameHandler,
	},
}

// DeregistrationHandlerFieldResolver implement to resolve requests for the Deregistration's handler field.
type DeregistrationHandlerFieldResolver interface {
	// Handler implements response to request for handler field.
	Handler(p graphql.ResolveParams) (string, error)
}

//
// DeregistrationFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Deregistration' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type DeregistrationFieldResolvers interface {
	DeregistrationHandlerFieldResolver
}

// DeregistrationAliases implements all methods on DeregistrationFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type DeregistrationAliases struct{}

// Handler implements response to request for 'handler' field.
func (_ DeregistrationAliases) Handler(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// DeregistrationType Deregistration contains configuration for Sensu entity de-registration.
var DeregistrationType = graphql.NewType("Deregistration", graphql.ObjectKind)

// RegisterDeregistration registers Deregistration object type with given service.
func RegisterDeregistration(svc *graphql.Service, impl DeregistrationFieldResolvers) {
	svc.RegisterObject(_ObjectTypeDeregistrationDesc, impl)
}
func _ObjTypeDeregistrationHandlerHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(DeregistrationHandlerFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Handler(p)
	}
}

func _ObjectTypeDeregistrationConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Deregistration contains configuration for Sensu entity de-registration.",
		Fields: graphql1.Fields{"handler": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "self descriptive",
			Name:              "handler",
			Type:              graphql1.String,
		}},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see DeregistrationFieldResolvers.")
		},
		Name: "Deregistration",
	}
}

// describe Deregistration's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeDeregistrationDesc = graphql.ObjectDesc{
	Config:        _ObjectTypeDeregistrationConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"handler": _ObjTypeDeregistrationHandlerHandler},
}
