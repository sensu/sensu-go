// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

//
// MutatorFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Mutator' type.
type MutatorFieldResolvers interface {
	// ID implements response to request for 'id' field.
	ID(p graphql.ResolveParams) (string, error)

	// Namespace implements response to request for 'namespace' field.
	Namespace(p graphql.ResolveParams) (string, error)

	// Name implements response to request for 'name' field.
	Name(p graphql.ResolveParams) (string, error)

	// Metadata implements response to request for 'metadata' field.
	Metadata(p graphql.ResolveParams) (interface{}, error)

	// Command implements response to request for 'command' field.
	Command(p graphql.ResolveParams) (string, error)

	// Timeout implements response to request for 'timeout' field.
	Timeout(p graphql.ResolveParams) (int, error)

	// EnvVars implements response to request for 'envVars' field.
	EnvVars(p graphql.ResolveParams) ([]string, error)

	// Type implements response to request for 'type' field.
	Type(p graphql.ResolveParams) (string, error)

	// Eval implements response to request for 'eval' field.
	Eval(p graphql.ResolveParams) (string, error)

	// ToJSON implements response to request for 'toJSON' field.
	ToJSON(p graphql.ResolveParams) (interface{}, error)
}

// MutatorAliases implements all methods on MutatorFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type MutatorAliases struct{}

// ID implements response to request for 'id' field.
func (_ MutatorAliases) ID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'id'")
	}
	return ret, err
}

// Namespace implements response to request for 'namespace' field.
func (_ MutatorAliases) Namespace(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'namespace'")
	}
	return ret, err
}

// Name implements response to request for 'name' field.
func (_ MutatorAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'name'")
	}
	return ret, err
}

// Metadata implements response to request for 'metadata' field.
func (_ MutatorAliases) Metadata(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Command implements response to request for 'command' field.
func (_ MutatorAliases) Command(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'command'")
	}
	return ret, err
}

// Timeout implements response to request for 'timeout' field.
func (_ MutatorAliases) Timeout(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'timeout'")
	}
	return ret, err
}

// EnvVars implements response to request for 'envVars' field.
func (_ MutatorAliases) EnvVars(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'envVars'")
	}
	return ret, err
}

// Type implements response to request for 'type' field.
func (_ MutatorAliases) Type(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'type'")
	}
	return ret, err
}

// Eval implements response to request for 'eval' field.
func (_ MutatorAliases) Eval(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'eval'")
	}
	return ret, err
}

// ToJSON implements response to request for 'toJSON' field.
func (_ MutatorAliases) ToJSON(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// MutatorType A Mutator is a mutator specification.
var MutatorType = graphql.NewType("Mutator", graphql.ObjectKind)

// RegisterMutator registers Mutator object type with given service.
func RegisterMutator(svc *graphql.Service, impl MutatorFieldResolvers) {
	svc.RegisterObject(_ObjectTypeMutatorDesc, impl)
}
func _ObjTypeMutatorIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ID(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(frp)
	}
}

func _ObjTypeMutatorNamespaceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Namespace(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Namespace(frp)
	}
}

func _ObjTypeMutatorNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Name(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(frp)
	}
}

func _ObjTypeMutatorMetadataHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Metadata(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Metadata(frp)
	}
}

func _ObjTypeMutatorCommandHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Command(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Command(frp)
	}
}

func _ObjTypeMutatorTimeoutHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Timeout(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Timeout(frp)
	}
}

func _ObjTypeMutatorEnvVarsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		EnvVars(p graphql.ResolveParams) ([]string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.EnvVars(frp)
	}
}

func _ObjTypeMutatorTypeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Type(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Type(frp)
	}
}

func _ObjTypeMutatorEvalHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Eval(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Eval(frp)
	}
}

func _ObjTypeMutatorToJSONHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToJSON(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToJSON(frp)
	}
}

func _ObjectTypeMutatorConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A Mutator is a mutator specification.",
		Fields: graphql1.Fields{
			"command": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Command is the command to be executed.",
				Name:              "command",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"envVars": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Env is a list of environment variables to use with command execution",
				Name:              "envVars",
				Type:              graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
			"eval": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "When the type of the mutator is \"javascript\", the eval field will be expected\nto hold a valid ECMAScript 5 expression.",
				Name:              "eval",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The globally unique identifier of the record",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"metadata": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "metadata contains name, namespace, labels and annotations of the record",
				Name:              "metadata",
				Type:              graphql.OutputType("ObjectMeta"),
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "use metadata",
				Description:       "Name is the unique identifier for a mutator.",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"namespace": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "use metadata",
				Description:       "Namespace in which this record resides",
				Name:              "namespace",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"timeout": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Timeout is the command execution timeout in seconds.",
				Name:              "timeout",
				Type:              graphql1.Int,
			},
			"toJSON": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "toJSON returns a REST API compatible representation of the resource. Handy for\nsharing snippets that can then be imported with `sensuctl create`.",
				Name:              "toJSON",
				Type:              graphql1.NewNonNull(graphql.OutputType("JSON")),
			},
			"type": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Type specifies the type of the mutator. If blank or set to \"pipe\", the\nmutator will execute a command with the default shell of the sensu user.\nIf set to \"javascript\", the eval field will be used, interpreted as ECMAScript 5\nand run on the Otto VM. The runtime assets will be assumed to be javascript\nassets, and the environment variables will be made available to the global\nenvironment of the mutator.",
				Name:              "type",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node"),
			graphql.Interface("Namespaced"),
			graphql.Interface("Resource")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see MutatorFieldResolvers.")
		},
		Name: "Mutator",
	}
}

// describe Mutator's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeMutatorDesc = graphql.ObjectDesc{
	Config: _ObjectTypeMutatorConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"command":   _ObjTypeMutatorCommandHandler,
		"envVars":   _ObjTypeMutatorEnvVarsHandler,
		"eval":      _ObjTypeMutatorEvalHandler,
		"id":        _ObjTypeMutatorIDHandler,
		"metadata":  _ObjTypeMutatorMetadataHandler,
		"name":      _ObjTypeMutatorNameHandler,
		"namespace": _ObjTypeMutatorNamespaceHandler,
		"timeout":   _ObjTypeMutatorTimeoutHandler,
		"toJSON":    _ObjTypeMutatorToJSONHandler,
		"type":      _ObjTypeMutatorTypeHandler,
	},
}

//
// MutatorConnectionFieldResolvers represents a collection of methods whose products represent the
// response values of the 'MutatorConnection' type.
type MutatorConnectionFieldResolvers interface {
	// Nodes implements response to request for 'nodes' field.
	Nodes(p graphql.ResolveParams) (interface{}, error)

	// PageInfo implements response to request for 'pageInfo' field.
	PageInfo(p graphql.ResolveParams) (interface{}, error)
}

// MutatorConnectionAliases implements all methods on MutatorConnectionFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type MutatorConnectionAliases struct{}

// Nodes implements response to request for 'nodes' field.
func (_ MutatorConnectionAliases) Nodes(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// PageInfo implements response to request for 'pageInfo' field.
func (_ MutatorConnectionAliases) PageInfo(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// MutatorConnectionType A connection to a sequence of records.
var MutatorConnectionType = graphql.NewType("MutatorConnection", graphql.ObjectKind)

// RegisterMutatorConnection registers MutatorConnection object type with given service.
func RegisterMutatorConnection(svc *graphql.Service, impl MutatorConnectionFieldResolvers) {
	svc.RegisterObject(_ObjectTypeMutatorConnectionDesc, impl)
}
func _ObjTypeMutatorConnectionNodesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Nodes(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Nodes(frp)
	}
}

func _ObjTypeMutatorConnectionPageInfoHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		PageInfo(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.PageInfo(frp)
	}
}

func _ObjectTypeMutatorConnectionConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A connection to a sequence of records.",
		Fields: graphql1.Fields{
			"nodes": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "nodes",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("Mutator")))),
			},
			"pageInfo": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "pageInfo",
				Type:              graphql1.NewNonNull(graphql.OutputType("OffsetPageInfo")),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see MutatorConnectionFieldResolvers.")
		},
		Name: "MutatorConnection",
	}
}

// describe MutatorConnection's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeMutatorConnectionDesc = graphql.ObjectDesc{
	Config: _ObjectTypeMutatorConnectionConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"nodes":    _ObjTypeMutatorConnectionNodesHandler,
		"pageInfo": _ObjTypeMutatorConnectionPageInfoHandler,
	},
}

// MutatorListOrder Describes ways in which a list of mutators can be ordered.
type MutatorListOrder string

// MutatorListOrders holds enum values
var MutatorListOrders = _EnumTypeMutatorListOrderValues{
	NAME:      "NAME",
	NAME_DESC: "NAME_DESC",
}

// MutatorListOrderType Describes ways in which a list of mutators can be ordered.
var MutatorListOrderType = graphql.NewType("MutatorListOrder", graphql.EnumKind)

// RegisterMutatorListOrder registers MutatorListOrder object type with given service.
func RegisterMutatorListOrder(svc *graphql.Service) {
	svc.RegisterEnum(_EnumTypeMutatorListOrderDesc)
}
func _EnumTypeMutatorListOrderConfigFn() graphql1.EnumConfig {
	return graphql1.EnumConfig{
		Description: "Describes ways in which a list of mutators can be ordered.",
		Name:        "MutatorListOrder",
		Values: graphql1.EnumValueConfigMap{
			"NAME": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "NAME",
			},
			"NAME_DESC": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "NAME_DESC",
			},
		},
	}
}

// describe MutatorListOrder's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _EnumTypeMutatorListOrderDesc = graphql.EnumDesc{Config: _EnumTypeMutatorListOrderConfigFn}

type _EnumTypeMutatorListOrderValues struct {
	// NAME - self descriptive
	NAME MutatorListOrder
	// NAME_DESC - self descriptive
	NAME_DESC MutatorListOrder
}
