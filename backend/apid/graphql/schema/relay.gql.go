// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	fmt "fmt"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// NodeType Node describes an object with an ID.
var NodeType = graphql.NewType("Node", graphql.InterfaceKind)

// RegisterNode registers Node object type with given service.
func RegisterNode(svc *graphql.Service, impl graphql.InterfaceTypeResolver) {
	svc.RegisterInterface(_InterfaceTypeNodeDesc, impl)
}
func _InterfaceTypeNodeConfigFn() graphql1.InterfaceConfig {
	return graphql1.InterfaceConfig{
		Description: "Node describes an object with an ID.",
		Fields: graphql1.Fields{"id": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "The ID of an object",
			Name:              "id",
			Type:              graphql1.NewNonNull(graphql1.ID),
		}},
		Name: "Node",
		ResolveType: func(_ graphql1.ResolveTypeParams) *graphql1.Object {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see InterfaceTypeResolver.")
		},
	}
}

// describe Node's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InterfaceTypeNodeDesc = graphql.InterfaceDesc{Config: _InterfaceTypeNodeConfigFn}

// PageInfoHasNextPageFieldResolver implement to resolve requests for the PageInfo's hasNextPage field.
type PageInfoHasNextPageFieldResolver interface {
	// HasNextPage implements response to request for hasNextPage field.
	HasNextPage(p graphql.ResolveParams) (bool, error)
}

// PageInfoHasPreviousPageFieldResolver implement to resolve requests for the PageInfo's hasPreviousPage field.
type PageInfoHasPreviousPageFieldResolver interface {
	// HasPreviousPage implements response to request for hasPreviousPage field.
	HasPreviousPage(p graphql.ResolveParams) (bool, error)
}

// PageInfoStartCursorFieldResolver implement to resolve requests for the PageInfo's startCursor field.
type PageInfoStartCursorFieldResolver interface {
	// StartCursor implements response to request for startCursor field.
	StartCursor(p graphql.ResolveParams) (string, error)
}

// PageInfoEndCursorFieldResolver implement to resolve requests for the PageInfo's endCursor field.
type PageInfoEndCursorFieldResolver interface {
	// EndCursor implements response to request for endCursor field.
	EndCursor(p graphql.ResolveParams) (string, error)
}

//
// PageInfoFieldResolvers represents a collection of methods whose products represent the
// response values of the 'PageInfo' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type PageInfoFieldResolvers interface {
	PageInfoHasNextPageFieldResolver
	PageInfoHasPreviousPageFieldResolver
	PageInfoStartCursorFieldResolver
	PageInfoEndCursorFieldResolver
}

// PageInfoAliases implements all methods on PageInfoFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type PageInfoAliases struct{}

// HasNextPage implements response to request for 'hasNextPage' field.
func (_ PageInfoAliases) HasNextPage(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.(bool)
	return ret, err
}

// HasPreviousPage implements response to request for 'hasPreviousPage' field.
func (_ PageInfoAliases) HasPreviousPage(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.(bool)
	return ret, err
}

// StartCursor implements response to request for 'startCursor' field.
func (_ PageInfoAliases) StartCursor(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// EndCursor implements response to request for 'endCursor' field.
func (_ PageInfoAliases) EndCursor(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// PageInfoType Information about pagination in a connection.
var PageInfoType = graphql.NewType("PageInfo", graphql.ObjectKind)

// RegisterPageInfo registers PageInfo object type with given service.
func RegisterPageInfo(svc *graphql.Service, impl PageInfoFieldResolvers) {
	svc.RegisterObject(_ObjectTypePageInfoDesc, impl)
}
func _ObjTypePageInfoHasNextPageHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(PageInfoHasNextPageFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.HasNextPage(frp)
	}
}

func _ObjTypePageInfoHasPreviousPageHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(PageInfoHasPreviousPageFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.HasPreviousPage(frp)
	}
}

func _ObjTypePageInfoStartCursorHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(PageInfoStartCursorFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.StartCursor(frp)
	}
}

func _ObjTypePageInfoEndCursorHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(PageInfoEndCursorFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.EndCursor(frp)
	}
}

func _ObjectTypePageInfoConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Information about pagination in a connection.",
		Fields: graphql1.Fields{
			"endCursor": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "When paginating forwards, the cursor to continue.",
				Name:              "endCursor",
				Type:              graphql1.String,
			},
			"hasNextPage": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "When paginating forwards, are there more items?",
				Name:              "hasNextPage",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"hasPreviousPage": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "When paginating backwards, are there more items?",
				Name:              "hasPreviousPage",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"startCursor": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "When paginating backwards, the cursor to continue.",
				Name:              "startCursor",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see PageInfoFieldResolvers.")
		},
		Name: "PageInfo",
	}
}

// describe PageInfo's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypePageInfoDesc = graphql.ObjectDesc{
	Config: _ObjectTypePageInfoConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"endCursor":       _ObjTypePageInfoEndCursorHandler,
		"hasNextPage":     _ObjTypePageInfoHasNextPageHandler,
		"hasPreviousPage": _ObjTypePageInfoHasPreviousPageHandler,
		"startCursor":     _ObjTypePageInfoStartCursorHandler,
	},
}
