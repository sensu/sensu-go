// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// CoreV3EntityConfigExtensionOverridesFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CoreV3EntityConfigExtensionOverrides' type.
type CoreV3EntityConfigExtensionOverridesFieldResolvers interface {
	// ID implements response to request for 'id' field.
	ID(p graphql.ResolveParams) (string, error)

	// ToJSON implements response to request for 'toJSON' field.
	ToJSON(p graphql.ResolveParams) (interface{}, error)

	// State implements response to request for 'state' field.
	State(p graphql.ResolveParams) (interface{}, error)

	// ToCoreV2Entity implements response to request for 'toCoreV2Entity' field.
	ToCoreV2Entity(p graphql.ResolveParams) (interface{}, error)
}

// RegisterCoreV3EntityConfigExtensionOverrides registers CoreV3EntityConfigExtensionOverrides object type with given service.
func RegisterCoreV3EntityConfigExtensionOverrides(svc *graphql.Service, impl CoreV3EntityConfigExtensionOverridesFieldResolvers) {
	svc.RegisterObjectExtension(_ObjectExtensionTypeCoreV3EntityConfigExtensionOverridesDesc, impl)
}

func _ObjTypeCoreV3EntityConfigExtensionOverridesIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ID(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(frp)
	}
}

func _ObjTypeCoreV3EntityConfigExtensionOverridesToJSONHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToJSON(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToJSON(frp)
	}
}

func _ObjTypeCoreV3EntityConfigExtensionOverridesStateHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		State(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.State(frp)
	}
}

func _ObjTypeCoreV3EntityConfigExtensionOverridesToCoreV2EntityHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToCoreV2Entity(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToCoreV2Entity(frp)
	}
}

func _ObjectExtensionTypeCoreV3EntityConfigExtensionOverridesConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "",
		Fields: graphql1.Fields{
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Unique global identifier used to reference resource.",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"state": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Corresponding entity state, if applicable.",
				Name:              "state",
				Type:              graphql.OutputType("CoreV3EntityState"),
			},
			"toCoreV2Entity": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Represented as core/v2 Entity.",
				Name:              "toCoreV2Entity",
				Type:              graphql.OutputType("Entity"),
			},
			"toJSON": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "toJSON returns a REST API compatible representation of the resource. Handy for\nsharing snippets that can then be imported with `sensuctl create`.",
				Name:              "toJSON",
				Type:              graphql1.NewNonNull(graphql.OutputType("JSON")),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node"),
			graphql.Interface("Resource")},
		Name: "CoreV3EntityConfig",
	}
}

// describe CoreV3EntityConfigExtensionOverrides's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectExtensionTypeCoreV3EntityConfigExtensionOverridesDesc = graphql.ObjectDesc{
	Config: _ObjectExtensionTypeCoreV3EntityConfigExtensionOverridesConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"id":             _ObjTypeCoreV3EntityConfigExtensionOverridesIDHandler,
		"state":          _ObjTypeCoreV3EntityConfigExtensionOverridesStateHandler,
		"toCoreV2Entity": _ObjTypeCoreV3EntityConfigExtensionOverridesToCoreV2EntityHandler,
		"toJSON":         _ObjTypeCoreV3EntityConfigExtensionOverridesToJSONHandler,
	},
}

// CoreV3EntityStateExtensionOverridesFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CoreV3EntityStateExtensionOverrides' type.
type CoreV3EntityStateExtensionOverridesFieldResolvers interface {
	// ID implements response to request for 'id' field.
	ID(p graphql.ResolveParams) (string, error)

	// ToJSON implements response to request for 'toJSON' field.
	ToJSON(p graphql.ResolveParams) (interface{}, error)

	// Config implements response to request for 'config' field.
	Config(p graphql.ResolveParams) (interface{}, error)

	// ToCoreV2Entity implements response to request for 'toCoreV2Entity' field.
	ToCoreV2Entity(p graphql.ResolveParams) (interface{}, error)
}

// RegisterCoreV3EntityStateExtensionOverrides registers CoreV3EntityStateExtensionOverrides object type with given service.
func RegisterCoreV3EntityStateExtensionOverrides(svc *graphql.Service, impl CoreV3EntityStateExtensionOverridesFieldResolvers) {
	svc.RegisterObjectExtension(_ObjectExtensionTypeCoreV3EntityStateExtensionOverridesDesc, impl)
}

func _ObjTypeCoreV3EntityStateExtensionOverridesIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ID(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(frp)
	}
}

func _ObjTypeCoreV3EntityStateExtensionOverridesToJSONHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToJSON(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToJSON(frp)
	}
}

func _ObjTypeCoreV3EntityStateExtensionOverridesConfigHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Config(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Config(frp)
	}
}

func _ObjTypeCoreV3EntityStateExtensionOverridesToCoreV2EntityHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToCoreV2Entity(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToCoreV2Entity(frp)
	}
}

func _ObjectExtensionTypeCoreV3EntityStateExtensionOverridesConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "",
		Fields: graphql1.Fields{
			"config": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Corresponding entity config, if applicable.",
				Name:              "config",
				Type:              graphql.OutputType("CoreV3EntityConfig"),
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Unique global identifier used to reference resource.",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"toCoreV2Entity": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Represented as core/v2 Entity.",
				Name:              "toCoreV2Entity",
				Type:              graphql.OutputType("Entity"),
			},
			"toJSON": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "toJSON returns a REST API compatible representation of the resource. Handy for\nsharing snippets that can then be imported with `sensuctl create`.",
				Name:              "toJSON",
				Type:              graphql1.NewNonNull(graphql.OutputType("JSON")),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node"),
			graphql.Interface("Resource")},
		Name: "CoreV3EntityState",
	}
}

// describe CoreV3EntityStateExtensionOverrides's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectExtensionTypeCoreV3EntityStateExtensionOverridesDesc = graphql.ObjectDesc{
	Config: _ObjectExtensionTypeCoreV3EntityStateExtensionOverridesConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"config":         _ObjTypeCoreV3EntityStateExtensionOverridesConfigHandler,
		"id":             _ObjTypeCoreV3EntityStateExtensionOverridesIDHandler,
		"toCoreV2Entity": _ObjTypeCoreV3EntityStateExtensionOverridesToCoreV2EntityHandler,
		"toJSON":         _ObjTypeCoreV3EntityStateExtensionOverridesToJSONHandler,
	},
}
