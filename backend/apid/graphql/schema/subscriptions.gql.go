// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
)

// SubscriptionSetEntriesFieldResolverArgs contains arguments provided to entries when selected
type SubscriptionSetEntriesFieldResolverArgs struct {
	Limit  int // Limit - self descriptive
	Offset int // Offset - self descriptive
}

// SubscriptionSetEntriesFieldResolverParams contains contextual info to resolve entries field
type SubscriptionSetEntriesFieldResolverParams struct {
	graphql.ResolveParams
	Args SubscriptionSetEntriesFieldResolverArgs
}

// SubscriptionSetEntriesFieldResolver implement to resolve requests for the SubscriptionSet's entries field.
type SubscriptionSetEntriesFieldResolver interface {
	// Entries implements response to request for entries field.
	Entries(p SubscriptionSetEntriesFieldResolverParams) (interface{}, error)
}

// SubscriptionSetValuesFieldResolverArgs contains arguments provided to values when selected
type SubscriptionSetValuesFieldResolverArgs struct {
	Limit  int // Limit - self descriptive
	Offset int // Offset - self descriptive
}

// SubscriptionSetValuesFieldResolverParams contains contextual info to resolve values field
type SubscriptionSetValuesFieldResolverParams struct {
	graphql.ResolveParams
	Args SubscriptionSetValuesFieldResolverArgs
}

// SubscriptionSetValuesFieldResolver implement to resolve requests for the SubscriptionSet's values field.
type SubscriptionSetValuesFieldResolver interface {
	// Values implements response to request for values field.
	Values(p SubscriptionSetValuesFieldResolverParams) ([]string, error)
}

// SubscriptionSetSizeFieldResolver implement to resolve requests for the SubscriptionSet's size field.
type SubscriptionSetSizeFieldResolver interface {
	// Size implements response to request for size field.
	Size(p graphql.ResolveParams) (int, error)
}

//
// SubscriptionSetFieldResolvers represents a collection of methods whose products represent the
// response values of the 'SubscriptionSet' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type SubscriptionSetFieldResolvers interface {
	SubscriptionSetEntriesFieldResolver
	SubscriptionSetValuesFieldResolver
	SubscriptionSetSizeFieldResolver
}

// SubscriptionSetAliases implements all methods on SubscriptionSetFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type SubscriptionSetAliases struct{}

// Entries implements response to request for 'entries' field.
func (_ SubscriptionSetAliases) Entries(p SubscriptionSetEntriesFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Values implements response to request for 'values' field.
func (_ SubscriptionSetAliases) Values(p SubscriptionSetValuesFieldResolverParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'values'")
	}
	return ret, err
}

// Size implements response to request for 'size' field.
func (_ SubscriptionSetAliases) Size(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'size'")
	}
	return ret, err
}

// SubscriptionSetType SubscriptionSet describes a set of subscriptions.
var SubscriptionSetType = graphql.NewType("SubscriptionSet", graphql.ObjectKind)

// RegisterSubscriptionSet registers SubscriptionSet object type with given service.
func RegisterSubscriptionSet(svc *graphql.Service, impl SubscriptionSetFieldResolvers) {
	svc.RegisterObject(_ObjectTypeSubscriptionSetDesc, impl)
}
func _ObjTypeSubscriptionSetEntriesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SubscriptionSetEntriesFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := SubscriptionSetEntriesFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Entries(frp)
	}
}

func _ObjTypeSubscriptionSetValuesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SubscriptionSetValuesFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := SubscriptionSetValuesFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Values(frp)
	}
}

func _ObjTypeSubscriptionSetSizeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SubscriptionSetSizeFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Size(frp)
	}
}

func _ObjectTypeSubscriptionSetConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "SubscriptionSet describes a set of subscriptions.",
		Fields: graphql1.Fields{
			"entries": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 50,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
				},
				DeprecationReason: "",
				Description:       "Returns all subscriptions in the set. Optionally constrained",
				Name:              "entries",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("SubscriptionOccurences")))),
			},
			"size": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Returns the number of values in the set.",
				Name:              "size",
				Type:              graphql1.Int,
			},
			"values": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 50,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
				},
				DeprecationReason: "",
				Description:       "Returns all subscriptions in the set. Optinally constrained.",
				Name:              "values",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql1.String))),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see SubscriptionSetFieldResolvers.")
		},
		Name: "SubscriptionSet",
	}
}

// describe SubscriptionSet's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeSubscriptionSetDesc = graphql.ObjectDesc{
	Config: _ObjectTypeSubscriptionSetConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"entries": _ObjTypeSubscriptionSetEntriesHandler,
		"size":    _ObjTypeSubscriptionSetSizeHandler,
		"values":  _ObjTypeSubscriptionSetValuesHandler,
	},
}

// SubscriptionOccurencesSubscriptionFieldResolver implement to resolve requests for the SubscriptionOccurences's subscription field.
type SubscriptionOccurencesSubscriptionFieldResolver interface {
	// Subscription implements response to request for subscription field.
	Subscription(p graphql.ResolveParams) (string, error)
}

// SubscriptionOccurencesOccurrencesFieldResolver implement to resolve requests for the SubscriptionOccurences's occurrences field.
type SubscriptionOccurencesOccurrencesFieldResolver interface {
	// Occurrences implements response to request for occurrences field.
	Occurrences(p graphql.ResolveParams) (int, error)
}

//
// SubscriptionOccurencesFieldResolvers represents a collection of methods whose products represent the
// response values of the 'SubscriptionOccurences' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type SubscriptionOccurencesFieldResolvers interface {
	SubscriptionOccurencesSubscriptionFieldResolver
	SubscriptionOccurencesOccurrencesFieldResolver
}

// SubscriptionOccurencesAliases implements all methods on SubscriptionOccurencesFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type SubscriptionOccurencesAliases struct{}

// Subscription implements response to request for 'subscription' field.
func (_ SubscriptionOccurencesAliases) Subscription(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'subscription'")
	}
	return ret, err
}

// Occurrences implements response to request for 'occurrences' field.
func (_ SubscriptionOccurencesAliases) Occurrences(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'occurrences'")
	}
	return ret, err
}

// SubscriptionOccurencesType SubscriptionOccurences describes the number of occurrences of a subscription.
var SubscriptionOccurencesType = graphql.NewType("SubscriptionOccurences", graphql.ObjectKind)

// RegisterSubscriptionOccurences registers SubscriptionOccurences object type with given service.
func RegisterSubscriptionOccurences(svc *graphql.Service, impl SubscriptionOccurencesFieldResolvers) {
	svc.RegisterObject(_ObjectTypeSubscriptionOccurencesDesc, impl)
}
func _ObjTypeSubscriptionOccurencesSubscriptionHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SubscriptionOccurencesSubscriptionFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Subscription(frp)
	}
}

func _ObjTypeSubscriptionOccurencesOccurrencesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(SubscriptionOccurencesOccurrencesFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Occurrences(frp)
	}
}

func _ObjectTypeSubscriptionOccurencesConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "SubscriptionOccurences describes the number of occurrences of a subscription.",
		Fields: graphql1.Fields{
			"occurrences": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "occurrences",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"subscription": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "subscription",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see SubscriptionOccurencesFieldResolvers.")
		},
		Name: "SubscriptionOccurences",
	}
}

// describe SubscriptionOccurences's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeSubscriptionOccurencesDesc = graphql.ObjectDesc{
	Config: _ObjectTypeSubscriptionOccurencesConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"occurrences":  _ObjTypeSubscriptionOccurencesOccurrencesHandler,
		"subscription": _ObjTypeSubscriptionOccurencesSubscriptionHandler,
	},
}
