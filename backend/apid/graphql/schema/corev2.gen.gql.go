// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

//
// CoreV2SecretFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CoreV2Secret' type.
type CoreV2SecretFieldResolvers interface {
	// Name implements response to request for 'name' field.
	Name(p graphql.ResolveParams) (string, error)

	// Secret implements response to request for 'secret' field.
	Secret(p graphql.ResolveParams) (string, error)
}

// CoreV2SecretAliases implements all methods on CoreV2SecretFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type CoreV2SecretAliases struct{}

// Name implements response to request for 'name' field.
func (_ CoreV2SecretAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'name'")
	}
	return ret, err
}

// Secret implements response to request for 'secret' field.
func (_ CoreV2SecretAliases) Secret(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'secret'")
	}
	return ret, err
}

// CoreV2SecretType A Secret is a secret specification.
var CoreV2SecretType = graphql.NewType("CoreV2Secret", graphql.ObjectKind)

// RegisterCoreV2Secret registers CoreV2Secret object type with given service.
func RegisterCoreV2Secret(svc *graphql.Service, impl CoreV2SecretFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCoreV2SecretDesc, impl)
}
func _ObjTypeCoreV2SecretNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Name(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(frp)
	}
}

func _ObjTypeCoreV2SecretSecretHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Secret(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Secret(frp)
	}
}

func _ObjectTypeCoreV2SecretConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A Secret is a secret specification.",
		Fields: graphql1.Fields{
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Name is the name of the secret referenced in an executable command.",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"secret": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Secret is the name of the Sensu secret resource.",
				Name:              "secret",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CoreV2SecretFieldResolvers.")
		},
		Name: "CoreV2Secret",
	}
}

// describe CoreV2Secret's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCoreV2SecretDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCoreV2SecretConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"name":   _ObjTypeCoreV2SecretNameHandler,
		"secret": _ObjTypeCoreV2SecretSecretHandler,
	},
}
