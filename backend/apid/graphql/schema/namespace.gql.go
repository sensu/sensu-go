// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
)

// NamespacedType Namespaced represents an object that belongs to a unique namespace.
var NamespacedType = graphql.NewType("Namespaced", graphql.InterfaceKind)

// RegisterNamespaced registers Namespaced object type with given service.
func RegisterNamespaced(svc *graphql.Service, impl graphql.InterfaceTypeResolver) {
	svc.RegisterInterface(_InterfaceTypeNamespacedDesc, impl)
}
func _InterfaceTypeNamespacedConfigFn() graphql1.InterfaceConfig {
	return graphql1.InterfaceConfig{
		Description: "Namespaced represents an object that belongs to a unique namespace.",
		Fields: graphql1.Fields{"namespace": &graphql1.Field{
			Args:              graphql1.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "The namespace the object belongs to.",
			Name:              "namespace",
			Type:              graphql1.NewNonNull(graphql1.String),
		}},
		Name: "Namespaced",
		ResolveType: func(_ graphql1.ResolveTypeParams) *graphql1.Object {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see InterfaceTypeResolver.")
		},
	}
}

// describe Namespaced's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InterfaceTypeNamespacedDesc = graphql.InterfaceDesc{Config: _InterfaceTypeNamespacedConfigFn}

// NamespaceChecksFieldResolverArgs contains arguments provided to checks when selected
type NamespaceChecksFieldResolverArgs struct {
	Offset  int            // Offset - self descriptive
	Limit   int            // Limit adds optional limit to the number of entries returned.
	OrderBy CheckListOrder // OrderBy adds optional order to the records retrieved.
	Filter  string         // Filter - DEPRECATED: Please use the filters argument instead.
	Filters []string       /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE. The accepted key(s) are: subscription &
	published.

	Eg.

	subscription:unix
	published:true
	*/
}

// NamespaceChecksFieldResolverParams contains contextual info to resolve checks field
type NamespaceChecksFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceChecksFieldResolverArgs
}

// NamespaceEntitiesFieldResolverArgs contains arguments provided to entities when selected
type NamespaceEntitiesFieldResolverArgs struct {
	Offset  int             // Offset - self descriptive
	Limit   int             // Limit adds optional limit to the number of entries returned.
	OrderBy EntityListOrder // OrderBy adds optional order to the records retrieved.
	Filter  string          // Filter - DEPRECATED: Please use the filters argument instead.
	Filters []string        /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE. The accepted key(s) are: subscription &
	class.

	Eg.

	subscription:unix
	class:proxy
	*/
}

// NamespaceEntitiesFieldResolverParams contains contextual info to resolve entities field
type NamespaceEntitiesFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceEntitiesFieldResolverArgs
}

// NamespaceEventsFieldResolverArgs contains arguments provided to events when selected
type NamespaceEventsFieldResolverArgs struct {
	Offset  int             // Offset - self descriptive
	Limit   int             // Limit adds optional limit to the number of entries returned.
	OrderBy EventsListOrder // OrderBy adds optional order to the records retrieved.
	Filter  string          // Filter - DEPRECATED: Please use the filters argument instead.
	Filters []string        /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE. The accepted key(s) are: status, check, entity,
	& silenced.

	Eg.

	status:passing
	status:warning
	status:incident
	check:check-disk
	entity:venice
	silenced:true
	*/
}

// NamespaceEventsFieldResolverParams contains contextual info to resolve events field
type NamespaceEventsFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceEventsFieldResolverArgs
}

// NamespaceEventFiltersFieldResolverArgs contains arguments provided to eventFilters when selected
type NamespaceEventFiltersFieldResolverArgs struct {
	Offset  int                  // Offset - self descriptive
	Limit   int                  // Limit adds optional limit to the number of entries returned.
	OrderBy EventFilterListOrder // OrderBy adds optional order to the records retrieved.
	Filters []string             /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE. The accepted key(s) are: action

	Eg.

	action:allow
	action:deny
	*/
}

// NamespaceEventFiltersFieldResolverParams contains contextual info to resolve eventFilters field
type NamespaceEventFiltersFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceEventFiltersFieldResolverArgs
}

// NamespaceHandlersFieldResolverArgs contains arguments provided to handlers when selected
type NamespaceHandlersFieldResolverArgs struct {
	Offset  int              // Offset - self descriptive
	Limit   int              // Limit adds an optional limit to the number of handlers returned.
	OrderBy HandlerListOrder // OrderBy - Orderby adds an optional order to the records retrieved.
	Filter  string           // Filter - DEPRECATED: Please use the filters argument instead.
	Filters []string         /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE. The accepted key(s) are: type.

	Eg.

	type:pipe
	type:tcp
	type:udp
	type:set
	*/
}

// NamespaceHandlersFieldResolverParams contains contextual info to resolve handlers field
type NamespaceHandlersFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceHandlersFieldResolverArgs
}

// NamespaceMutatorsFieldResolverArgs contains arguments provided to mutators when selected
type NamespaceMutatorsFieldResolverArgs struct {
	Offset  int              // Offset - self descriptive
	Limit   int              // Limit adds an optional limit to the number of records returned.
	OrderBy MutatorListOrder // OrderBy - Orderby adds an optional order to the records retrieved.
	Filters []string         /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE.
	*/
}

// NamespaceMutatorsFieldResolverParams contains contextual info to resolve mutators field
type NamespaceMutatorsFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceMutatorsFieldResolverArgs
}

// NamespaceSilencesFieldResolverArgs contains arguments provided to silences when selected
type NamespaceSilencesFieldResolverArgs struct {
	Offset  int               // Offset - self descriptive
	Limit   int               // Limit adds optional limit to the number of entries returned.
	OrderBy SilencesListOrder // OrderBy adds optional order to the records retrieved.
	Filter  string            // Filter - DEPRECATED: Please use the filters argument instead.
	Filters []string          /*
	Filters reduces the set using given arbitrary expression[s]; expressions
	take on the form KEY: VALUE. The accepted key(s) are: check & subscription.

	Eg.

	check:check-disk
	subscription:unix
	*/
}

// NamespaceSilencesFieldResolverParams contains contextual info to resolve silences field
type NamespaceSilencesFieldResolverParams struct {
	graphql.ResolveParams
	Args NamespaceSilencesFieldResolverArgs
}

// NamespaceFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Namespace' type.
type NamespaceFieldResolvers interface {
	// ID implements response to request for 'id' field.
	ID(p graphql.ResolveParams) (string, error)

	// Name implements response to request for 'name' field.
	Name(p graphql.ResolveParams) (string, error)

	// Checks implements response to request for 'checks' field.
	Checks(p NamespaceChecksFieldResolverParams) (interface{}, error)

	// Entities implements response to request for 'entities' field.
	Entities(p NamespaceEntitiesFieldResolverParams) (interface{}, error)

	// Events implements response to request for 'events' field.
	Events(p NamespaceEventsFieldResolverParams) (interface{}, error)

	// EventFilters implements response to request for 'eventFilters' field.
	EventFilters(p NamespaceEventFiltersFieldResolverParams) (interface{}, error)

	// Handlers implements response to request for 'handlers' field.
	Handlers(p NamespaceHandlersFieldResolverParams) (interface{}, error)

	// Mutators implements response to request for 'mutators' field.
	Mutators(p NamespaceMutatorsFieldResolverParams) (interface{}, error)

	// Silences implements response to request for 'silences' field.
	Silences(p NamespaceSilencesFieldResolverParams) (interface{}, error)
}

// NamespaceAliases implements all methods on NamespaceFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type NamespaceAliases struct{}

// ID implements response to request for 'id' field.
func (_ NamespaceAliases) ID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'id'")
	}
	return ret, err
}

// Name implements response to request for 'name' field.
func (_ NamespaceAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'name'")
	}
	return ret, err
}

// Checks implements response to request for 'checks' field.
func (_ NamespaceAliases) Checks(p NamespaceChecksFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Entities implements response to request for 'entities' field.
func (_ NamespaceAliases) Entities(p NamespaceEntitiesFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Events implements response to request for 'events' field.
func (_ NamespaceAliases) Events(p NamespaceEventsFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// EventFilters implements response to request for 'eventFilters' field.
func (_ NamespaceAliases) EventFilters(p NamespaceEventFiltersFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Handlers implements response to request for 'handlers' field.
func (_ NamespaceAliases) Handlers(p NamespaceHandlersFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Mutators implements response to request for 'mutators' field.
func (_ NamespaceAliases) Mutators(p NamespaceMutatorsFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Silences implements response to request for 'silences' field.
func (_ NamespaceAliases) Silences(p NamespaceSilencesFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// NamespaceType Represents a virtual cluster
var NamespaceType = graphql.NewType("Namespace", graphql.ObjectKind)

// RegisterNamespace registers Namespace object type with given service.
func RegisterNamespace(svc *graphql.Service, impl NamespaceFieldResolvers) {
	svc.RegisterObject(_ObjectTypeNamespaceDesc, impl)
}
func _ObjTypeNamespaceIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ID(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(frp)
	}
}

func _ObjTypeNamespaceNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Name(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(frp)
	}
}

func _ObjTypeNamespaceChecksHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Checks(p NamespaceChecksFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceChecksFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Checks(frp)
	}
}

func _ObjTypeNamespaceEntitiesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Entities(p NamespaceEntitiesFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceEntitiesFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Entities(frp)
	}
}

func _ObjTypeNamespaceEventsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Events(p NamespaceEventsFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceEventsFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Events(frp)
	}
}

func _ObjTypeNamespaceEventFiltersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		EventFilters(p NamespaceEventFiltersFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceEventFiltersFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.EventFilters(frp)
	}
}

func _ObjTypeNamespaceHandlersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Handlers(p NamespaceHandlersFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceHandlersFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Handlers(frp)
	}
}

func _ObjTypeNamespaceMutatorsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Mutators(p NamespaceMutatorsFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceMutatorsFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Mutators(frp)
	}
}

func _ObjTypeNamespaceSilencesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Silences(p NamespaceSilencesFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := NamespaceSilencesFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Silences(frp)
	}
}

func _ObjectTypeNamespaceConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Represents a virtual cluster",
		Fields: graphql1.Fields{
			"checks": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filter": &graphql1.ArgumentConfig{
						DefaultValue: "",
						Description:  "DEPRECATED: Please use the filters argument instead.",
						Type:         graphql1.String,
					},
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE. The accepted key(s) are: subscription &\npublished.\n\nEg.\n\nsubscription:unix\npublished:true",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds optional limit to the number of entries returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "NAME_DESC",
						Description:  "OrderBy adds optional order to the records retrieved.",
						Type:         graphql.InputType("CheckListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All check configurations associated with the namespace.",
				Name:              "checks",
				Type:              graphql1.NewNonNull(graphql.OutputType("CheckConfigConnection")),
			},
			"entities": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filter": &graphql1.ArgumentConfig{
						DefaultValue: "",
						Description:  "DEPRECATED: Please use the filters argument instead.",
						Type:         graphql1.String,
					},
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE. The accepted key(s) are: subscription &\nclass.\n\nEg.\n\nsubscription:unix\nclass:proxy",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds optional limit to the number of entries returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "ID",
						Description:  "OrderBy adds optional order to the records retrieved.",
						Type:         graphql.InputType("EntityListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All entities associated with the namespace.",
				Name:              "entities",
				Type:              graphql1.NewNonNull(graphql.OutputType("EntityConnection")),
			},
			"eventFilters": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE. The accepted key(s) are: action\n\nEg.\n\naction:allow\naction:deny",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds optional limit to the number of entries returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "NAME_DESC",
						Description:  "OrderBy adds optional order to the records retrieved.",
						Type:         graphql.InputType("EventFilterListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All filters associated with the namespace.",
				Name:              "eventFilters",
				Type:              graphql1.NewNonNull(graphql.OutputType("EventFilterConnection")),
			},
			"events": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filter": &graphql1.ArgumentConfig{
						DefaultValue: "",
						Description:  "DEPRECATED: Please use the filters argument instead.",
						Type:         graphql1.String,
					},
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE. The accepted key(s) are: status, check, entity,\n& silenced.\n\nEg.\n\nstatus:passing\nstatus:warning\nstatus:incident\ncheck:check-disk\nentity:venice\nsilenced:true",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds optional limit to the number of entries returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "SEVERITY",
						Description:  "OrderBy adds optional order to the records retrieved.",
						Type:         graphql.InputType("EventsListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All events associated with the namespace.",
				Name:              "events",
				Type:              graphql1.NewNonNull(graphql.OutputType("EventConnection")),
			},
			"handlers": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filter": &graphql1.ArgumentConfig{
						DefaultValue: "",
						Description:  "DEPRECATED: Please use the filters argument instead.",
						Type:         graphql1.String,
					},
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE. The accepted key(s) are: type.\n\nEg.\n\ntype:pipe\ntype:tcp\ntype:udp\ntype:set",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds an optional limit to the number of handlers returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "NAME_DESC",
						Description:  "Orderby adds an optional order to the records retrieved.",
						Type:         graphql.InputType("HandlerListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All handlers associated with the namespace.",
				Name:              "handlers",
				Type:              graphql1.NewNonNull(graphql.OutputType("HandlerConnection")),
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The globally unique identifier of the check.",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"mutators": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE.",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds an optional limit to the number of records returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "NAME_DESC",
						Description:  "Orderby adds an optional order to the records retrieved.",
						Type:         graphql.InputType("MutatorListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All mutators associated with the namespace.",
				Name:              "mutators",
				Type:              graphql1.NewNonNull(graphql.OutputType("MutatorConnection")),
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Name is the unique identifier for a namespace.",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"silences": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"filter": &graphql1.ArgumentConfig{
						DefaultValue: "",
						Description:  "DEPRECATED: Please use the filters argument instead.",
						Type:         graphql1.String,
					},
					"filters": &graphql1.ArgumentConfig{
						DefaultValue: []interface{}{},
						Description:  "Filters reduces the set using given arbitrary expression[s]; expressions\ntake on the form KEY: VALUE. The accepted key(s) are: check & subscription.\n\nEg.\n\ncheck:check-disk\nsubscription:unix",
						Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
					},
					"limit": &graphql1.ArgumentConfig{
						DefaultValue: 10,
						Description:  "Limit adds optional limit to the number of entries returned.",
						Type:         graphql1.Int,
					},
					"offset": &graphql1.ArgumentConfig{
						DefaultValue: 0,
						Description:  "self descriptive",
						Type:         graphql1.Int,
					},
					"orderBy": &graphql1.ArgumentConfig{
						DefaultValue: "ID_DESC",
						Description:  "OrderBy adds optional order to the records retrieved.",
						Type:         graphql.InputType("SilencesListOrder"),
					},
				},
				DeprecationReason: "",
				Description:       "All silences associated with the namespace.",
				Name:              "silences",
				Type:              graphql1.NewNonNull(graphql.OutputType("SilencedConnection")),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see NamespaceFieldResolvers.")
		},
		Name: "Namespace",
	}
}

// describe Namespace's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeNamespaceDesc = graphql.ObjectDesc{
	Config: _ObjectTypeNamespaceConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"checks":       _ObjTypeNamespaceChecksHandler,
		"entities":     _ObjTypeNamespaceEntitiesHandler,
		"eventFilters": _ObjTypeNamespaceEventFiltersHandler,
		"events":       _ObjTypeNamespaceEventsHandler,
		"handlers":     _ObjTypeNamespaceHandlersHandler,
		"id":           _ObjTypeNamespaceIDHandler,
		"mutators":     _ObjTypeNamespaceMutatorsHandler,
		"name":         _ObjTypeNamespaceNameHandler,
		"silences":     _ObjTypeNamespaceSilencesHandler,
	},
}
