// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	graphql1 "github.com/graphql-go/graphql"
	ast "github.com/graphql-go/graphql/language/ast"
	graphql "github.com/sensu/sensu-go/graphql"
)

/*
JSONType ... JSON The JSON type describes any arbitrary JSON compatible data.

- Roughly equilevant to `union JSON = Int | Float | String | Boolean` however
  can also be a map or list of arbitrary length.
- Despite looking like an an object it's fields **cannot** be selected.
*/
var JSONType = graphql.NewType("JSON", graphql.ScalarKind)

// RegisterJSON registers JSON object type with given service.
func RegisterJSON(svc *graphql.Service, impl graphql.ScalarResolver) {
	svc.RegisterScalar(_ScalarTypeJSONDesc, impl)
}

// describe JSON's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ScalarTypeJSONDesc = graphql.ScalarDesc{Config: func() graphql1.ScalarConfig {
	return graphql1.ScalarConfig{
		Description: "The JSON type describes any arbitrary JSON compatible data.\n\n- Roughly equilevant to `union JSON = Int | Float | String | Boolean` however\n  can also be a map or list of arbitrary length.\n- Despite looking like an an object it's fields **cannot** be selected.",
		Name:        "JSON",
		ParseLiteral: func(_ ast.Value) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
		ParseValue: func(_ interface{}) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
		Serialize: func(_ interface{}) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
	}
}}

/*
UintType ... Uint The Uint scalar type represents a unsigned 32 bit integer. Response formats that
support an unsigned 32‐bit integer or a number type should use that type to
represent this scalar.

**NOTE:** As numbers are represented as double-precision floating point numbers
in Javascript the largest possible value is 2^53. As such 32 bit is used as the
lowest common denominator.
*/
var UintType = graphql.NewType("Uint", graphql.ScalarKind)

// RegisterUint registers Uint object type with given service.
func RegisterUint(svc *graphql.Service, impl graphql.ScalarResolver) {
	svc.RegisterScalar(_ScalarTypeUintDesc, impl)
}

// describe Uint's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ScalarTypeUintDesc = graphql.ScalarDesc{Config: func() graphql1.ScalarConfig {
	return graphql1.ScalarConfig{
		Description: "The Uint scalar type represents a unsigned 32 bit integer. Response formats that\nsupport an unsigned 32‐bit integer or a number type should use that type to\nrepresent this scalar.\n\n**NOTE:** As numbers are represented as double-precision floating point numbers\nin Javascript the largest possible value is 2^53. As such 32 bit is used as the\nlowest common denominator.",
		Name:        "Uint",
		ParseLiteral: func(_ ast.Value) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
		ParseValue: func(_ interface{}) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
		Serialize: func(_ interface{}) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
	}
}}

/*
BigNumType ... BigNum A big number represents a number that is too large to be coerced by one of the
existing numeric types. Response formats that support 64 bit [signed/unsigned]
integers, floats and complex types should use the most approriate to represent
this scalar.

To support the most languages possible, numbers are always coerced into a
string.
*/
var BigNumType = graphql.NewType("BigNum", graphql.ScalarKind)

// RegisterBigNum registers BigNum object type with given service.
func RegisterBigNum(svc *graphql.Service, impl graphql.ScalarResolver) {
	svc.RegisterScalar(_ScalarTypeBigNumDesc, impl)
}

// describe BigNum's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ScalarTypeBigNumDesc = graphql.ScalarDesc{Config: func() graphql1.ScalarConfig {
	return graphql1.ScalarConfig{
		Description: "A big number represents a number that is too large to be coerced by one of the\nexisting numeric types. Response formats that support 64 bit [signed/unsigned]\nintegers, floats and complex types should use the most approriate to represent\nthis scalar.\n\nTo support the most languages possible, numbers are always coerced into a\nstring.",
		Name:        "BigNum",
		ParseLiteral: func(_ ast.Value) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
		ParseValue: func(_ interface{}) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
		Serialize: func(_ interface{}) interface{} {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ScalarResolver.")
		},
	}
}}
