// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
)

// QueryExtensionSelfSubjectAccessReviewCaniFieldResolverArgs contains arguments provided to cani when selected
type QueryExtensionSelfSubjectAccessReviewCaniFieldResolverArgs struct {
	Type *TypeMetaInput   // Type - self descriptive
	Meta *ObjectMetaInput // Meta - self descriptive
	Verb string           // Verb - self descriptive
}

// QueryExtensionSelfSubjectAccessReviewCaniFieldResolverParams contains contextual info to resolve cani field
type QueryExtensionSelfSubjectAccessReviewCaniFieldResolverParams struct {
	graphql.ResolveParams
	Args QueryExtensionSelfSubjectAccessReviewCaniFieldResolverArgs
}

//
// QueryExtensionSelfSubjectAccessReviewFieldResolvers represents a collection of methods whose products represent the
// response values of the 'QueryExtensionSelfSubjectAccessReview' type.
type QueryExtensionSelfSubjectAccessReviewFieldResolvers interface {
	// Cani implements response to request for 'cani' field.
	Cani(p QueryExtensionSelfSubjectAccessReviewCaniFieldResolverParams) (interface{}, error)
}

// RegisterQueryExtensionSelfSubjectAccessReview registers QueryExtensionSelfSubjectAccessReview object type with given service.
func RegisterQueryExtensionSelfSubjectAccessReview(svc *graphql.Service, impl QueryExtensionSelfSubjectAccessReviewFieldResolvers) {
	svc.RegisterObjectExtension(_ObjectExtensionTypeQueryExtensionSelfSubjectAccessReviewDesc, impl)
}

func _ObjTypeQueryExtensionSelfSubjectAccessReviewCaniHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Cani(p QueryExtensionSelfSubjectAccessReviewCaniFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := QueryExtensionSelfSubjectAccessReviewCaniFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Cani(frp)
	}
}

func _ObjectExtensionTypeQueryExtensionSelfSubjectAccessReviewConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "",
		Fields: graphql1.Fields{"cani": &graphql1.Field{
			Args: graphql1.FieldConfigArgument{
				"meta": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("ObjectMetaInput")),
				},
				"type": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("TypeMetaInput")),
				},
				"verb": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql1.String),
				},
			},
			DeprecationReason: "",
			Description:       "Checks whether or not the current user can perform an action; provides handy\ninterface to preemptively test if an action will succeed. Returns null if the\naction is allowed and otherwise a FetchErr.",
			Name:              "cani",
			Type:              graphql.OutputType("FetchErr"),
		}},
		Interfaces: []*graphql1.Interface{},
		Name:       "Query",
	}
}

// describe QueryExtensionSelfSubjectAccessReview's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectExtensionTypeQueryExtensionSelfSubjectAccessReviewDesc = graphql.ObjectDesc{
	Config:        _ObjectExtensionTypeQueryExtensionSelfSubjectAccessReviewConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"cani": _ObjTypeQueryExtensionSelfSubjectAccessReviewCaniHandler},
}
