// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	fmt "fmt"
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
)

// MutationCreateCheckFieldResolverArgs contains arguments provided to createCheck when selected
type MutationCreateCheckFieldResolverArgs struct {
	Input *CreateCheckInput // Input - self descriptive
}

// MutationCreateCheckFieldResolverParams contains contextual info to resolve createCheck field
type MutationCreateCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationCreateCheckFieldResolverArgs
}

// MutationCreateCheckFieldResolver implement to resolve requests for the Mutation's createCheck field.
type MutationCreateCheckFieldResolver interface {
	// CreateCheck implements response to request for createCheck field.
	CreateCheck(p MutationCreateCheckFieldResolverParams) (interface{}, error)
}

// MutationUpdateCheckFieldResolverArgs contains arguments provided to updateCheck when selected
type MutationUpdateCheckFieldResolverArgs struct {
	Input *UpdateCheckInput // Input - self descriptive
}

// MutationUpdateCheckFieldResolverParams contains contextual info to resolve updateCheck field
type MutationUpdateCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationUpdateCheckFieldResolverArgs
}

// MutationUpdateCheckFieldResolver implement to resolve requests for the Mutation's updateCheck field.
type MutationUpdateCheckFieldResolver interface {
	// UpdateCheck implements response to request for updateCheck field.
	UpdateCheck(p MutationUpdateCheckFieldResolverParams) (interface{}, error)
}

// MutationDeleteCheckFieldResolverArgs contains arguments provided to deleteCheck when selected
type MutationDeleteCheckFieldResolverArgs struct {
	Input *DeleteRecordInput // Input - self descriptive
}

// MutationDeleteCheckFieldResolverParams contains contextual info to resolve deleteCheck field
type MutationDeleteCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationDeleteCheckFieldResolverArgs
}

// MutationDeleteCheckFieldResolver implement to resolve requests for the Mutation's deleteCheck field.
type MutationDeleteCheckFieldResolver interface {
	// DeleteCheck implements response to request for deleteCheck field.
	DeleteCheck(p MutationDeleteCheckFieldResolverParams) (interface{}, error)
}

// MutationResolveEventFieldResolverArgs contains arguments provided to resolveEvent when selected
type MutationResolveEventFieldResolverArgs struct {
	Input *ResolveEventInput // Input - self descriptive
}

// MutationResolveEventFieldResolverParams contains contextual info to resolve resolveEvent field
type MutationResolveEventFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationResolveEventFieldResolverArgs
}

// MutationResolveEventFieldResolver implement to resolve requests for the Mutation's resolveEvent field.
type MutationResolveEventFieldResolver interface {
	// ResolveEvent implements response to request for resolveEvent field.
	ResolveEvent(p MutationResolveEventFieldResolverParams) (interface{}, error)
}

//
// MutationFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Mutation' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type MutationFieldResolvers interface {
	MutationCreateCheckFieldResolver
	MutationUpdateCheckFieldResolver
	MutationDeleteCheckFieldResolver
	MutationResolveEventFieldResolver
}

// MutationAliases implements all methods on MutationFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type MutationAliases struct{}

// CreateCheck implements response to request for 'createCheck' field.
func (_ MutationAliases) CreateCheck(p MutationCreateCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// UpdateCheck implements response to request for 'updateCheck' field.
func (_ MutationAliases) UpdateCheck(p MutationUpdateCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// DeleteCheck implements response to request for 'deleteCheck' field.
func (_ MutationAliases) DeleteCheck(p MutationDeleteCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ResolveEvent implements response to request for 'resolveEvent' field.
func (_ MutationAliases) ResolveEvent(p MutationResolveEventFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// MutationType The root query for implementing GraphQL mutations.
var MutationType = graphql.NewType("Mutation", graphql.ObjectKind)

// RegisterMutation registers Mutation object type with given service.
func RegisterMutation(svc *graphql.Service, impl MutationFieldResolvers) {
	svc.RegisterObject(_ObjectTypeMutationDesc, impl)
}
func _ObjTypeMutationCreateCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationCreateCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationCreateCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.CreateCheck(frp)
	}
}

func _ObjTypeMutationUpdateCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationUpdateCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationUpdateCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.UpdateCheck(frp)
	}
}

func _ObjTypeMutationDeleteCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationDeleteCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationDeleteCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.DeleteCheck(frp)
	}
}

func _ObjTypeMutationResolveEventHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationResolveEventFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationResolveEventFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.ResolveEvent(frp)
	}
}

func _ObjectTypeMutationConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "The root query for implementing GraphQL mutations.",
		Fields: graphql1.Fields{
			"createCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("CreateCheckInput")),
				}},
				DeprecationReason: "",
				Description:       "Creates a new check.",
				Name:              "createCheck",
				Type:              graphql.OutputType("CreateCheckPayload"),
			},
			"deleteCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("DeleteRecordInput")),
				}},
				DeprecationReason: "",
				Description:       "Removes given check.",
				Name:              "deleteCheck",
				Type:              graphql.OutputType("DeleteRecordPayload"),
			},
			"resolveEvent": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("ResolveEventInput")),
				}},
				DeprecationReason: "",
				Description:       "Resolves an event.",
				Name:              "resolveEvent",
				Type:              graphql.OutputType("ResolveEventPayload"),
			},
			"updateCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("UpdateCheckInput")),
				}},
				DeprecationReason: "",
				Description:       "Updates given check.",
				Name:              "updateCheck",
				Type:              graphql.OutputType("UpdateCheckPayload"),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see MutationFieldResolvers.")
		},
		Name: "Mutation",
	}
}

// describe Mutation's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeMutationDesc = graphql.ObjectDesc{
	Config: _ObjectTypeMutationConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"createCheck":  _ObjTypeMutationCreateCheckHandler,
		"deleteCheck":  _ObjTypeMutationDeleteCheckHandler,
		"resolveEvent": _ObjTypeMutationResolveEventHandler,
		"updateCheck":  _ObjTypeMutationUpdateCheckHandler,
	},
}

// NamespaceInput refers to the namespace a resource may belong to.
type NamespaceInput struct {
	// Organization - self descriptive
	Organization string
	// Environment - self descriptive
	Environment string
}

// NamespaceInputType NamespaceInput refers to the namespace a resource may belong to.
var NamespaceInputType = graphql.NewType("NamespaceInput", graphql.InputKind)

// RegisterNamespaceInput registers NamespaceInput object type with given service.
func RegisterNamespaceInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeNamespaceInputDesc)
}
func _InputTypeNamespaceInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "NamespaceInput refers to the namespace a resource may belong to.",
		Fields: graphql1.InputObjectConfigFieldMap{
			"environment": &graphql1.InputObjectFieldConfig{
				Description: "self descriptive",
				Type:        graphql1.String,
			},
			"organization": &graphql1.InputObjectFieldConfig{
				Description: "self descriptive",
				Type:        graphql1.NewNonNull(graphql1.String),
			},
		},
		Name: "NamespaceInput",
	}
}

// describe NamespaceInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeNamespaceInputDesc = graphql.InputDesc{Config: _InputTypeNamespaceInputConfigFn}

// DeleteRecordPayloadClientMutationIDFieldResolver implement to resolve requests for the DeleteRecordPayload's clientMutationId field.
type DeleteRecordPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// DeleteRecordPayloadDeletedIDFieldResolver implement to resolve requests for the DeleteRecordPayload's deletedId field.
type DeleteRecordPayloadDeletedIDFieldResolver interface {
	// DeletedID implements response to request for deletedId field.
	DeletedID(p graphql.ResolveParams) (interface{}, error)
}

//
// DeleteRecordPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'DeleteRecordPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type DeleteRecordPayloadFieldResolvers interface {
	DeleteRecordPayloadClientMutationIDFieldResolver
	DeleteRecordPayloadDeletedIDFieldResolver
}

// DeleteRecordPayloadAliases implements all methods on DeleteRecordPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type DeleteRecordPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ DeleteRecordPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// DeletedID implements response to request for 'deletedId' field.
func (_ DeleteRecordPayloadAliases) DeletedID(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// DeleteRecordPayloadType Generic container for deleted record payload.
var DeleteRecordPayloadType = graphql.NewType("DeleteRecordPayload", graphql.ObjectKind)

// RegisterDeleteRecordPayload registers DeleteRecordPayload object type with given service.
func RegisterDeleteRecordPayload(svc *graphql.Service, impl DeleteRecordPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeDeleteRecordPayloadDesc, impl)
}
func _ObjTypeDeleteRecordPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(DeleteRecordPayloadClientMutationIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(p)
	}
}

func _ObjTypeDeleteRecordPayloadDeletedIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(DeleteRecordPayloadDeletedIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.DeletedID(p)
	}
}

func _ObjectTypeDeleteRecordPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Generic container for deleted record payload.",
		Fields: graphql1.Fields{
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
			"deletedId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "ID of the deleted resource",
				Name:              "deletedId",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see DeleteRecordPayloadFieldResolvers.")
		},
		Name: "DeleteRecordPayload",
	}
}

// describe DeleteRecordPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeDeleteRecordPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeDeleteRecordPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"clientMutationId": _ObjTypeDeleteRecordPayloadClientMutationIDHandler,
		"deletedId":        _ObjTypeDeleteRecordPayloadDeletedIDHandler,
	},
}

// DeleteRecordInput Generic input used when deleting records.
type DeleteRecordInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the check to update.
	ID interface{}
}

// DeleteRecordInputType Generic input used when deleting records.
var DeleteRecordInputType = graphql.NewType("DeleteRecordInput", graphql.InputKind)

// RegisterDeleteRecordInput registers DeleteRecordInput object type with given service.
func RegisterDeleteRecordInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeDeleteRecordInputDesc)
}
func _InputTypeDeleteRecordInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "Generic input used when deleting records.",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the check to update.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
		},
		Name: "DeleteRecordInput",
	}
}

// describe DeleteRecordInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeDeleteRecordInputDesc = graphql.InputDesc{Config: _InputTypeDeleteRecordInputConfigFn}

// CheckConfigInputs self descriptive
type CheckConfigInputs struct {
	// Command - command to run.
	Command string
	// Interval - interval is the time interval, in seconds, in which the check should be run. Defaults to 60.
	Interval int
	/*
	   LowFlapThreshold - lowFlapThreshold is the flap detection low threshold (% state change) for
	   the check. Sensu uses the same flap detection algorithm as Nagios.
	*/
	LowFlapThreshold int
	/*
	   HighFlapThreshold - highFlapThreshold is the flap detection high threshold (% state change) for
	   the check. Sensu uses the same flap detection algorithm as Nagios.
	*/
	HighFlapThreshold int
	// Subscriptions - subscriptions refers to the list of subscribers for the check.
	Subscriptions []string
	// Handlers - handlers are the event handler for the check (incidents and/or metrics).
	Handlers []string
	// Publish - publish indicates if check requests are published for the check
	Publish bool
	// Assets - Provide a list of valid assets that are required to execute the check.
	Assets []string
}

// CheckConfigInputsType self descriptive
var CheckConfigInputsType = graphql.NewType("CheckConfigInputs", graphql.InputKind)

// RegisterCheckConfigInputs registers CheckConfigInputs object type with given service.
func RegisterCheckConfigInputs(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeCheckConfigInputsDesc)
}
func _InputTypeCheckConfigInputsConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"assets": &graphql1.InputObjectFieldConfig{
				Description: "Provide a list of valid assets that are required to execute the check.",
				Type:        graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
			"command": &graphql1.InputObjectFieldConfig{
				Description: "command to run.",
				Type:        graphql1.String,
			},
			"handlers": &graphql1.InputObjectFieldConfig{
				Description: "handlers are the event handler for the check (incidents and/or metrics).",
				Type:        graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
			"highFlapThreshold": &graphql1.InputObjectFieldConfig{
				Description: "highFlapThreshold is the flap detection high threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Type:        graphql1.Int,
			},
			"interval": &graphql1.InputObjectFieldConfig{
				DefaultValue: 60,
				Description:  "interval is the time interval, in seconds, in which the check should be run. Defaults to 60.",
				Type:         graphql1.Int,
			},
			"lowFlapThreshold": &graphql1.InputObjectFieldConfig{
				Description: "lowFlapThreshold is the flap detection low threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Type:        graphql1.Int,
			},
			"publish": &graphql1.InputObjectFieldConfig{
				DefaultValue: true,
				Description:  "publish indicates if check requests are published for the check",
				Type:         graphql1.Boolean,
			},
			"subscriptions": &graphql1.InputObjectFieldConfig{
				Description: "subscriptions refers to the list of subscribers for the check.",
				Type:        graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
		},
		Name: "CheckConfigInputs",
	}
}

// describe CheckConfigInputs's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeCheckConfigInputsDesc = graphql.InputDesc{Config: _InputTypeCheckConfigInputsConfigFn}

// CreateCheckInput self descriptive
type CreateCheckInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// Ns - namespace the resulting resource will belong to.
	Ns *NamespaceInput
	// Name - name of the resulting check.
	Name string
	// Props - properties of the check
	Props *CheckConfigInputs
}

// CreateCheckInputType self descriptive
var CreateCheckInputType = graphql.NewType("CreateCheckInput", graphql.InputKind)

// RegisterCreateCheckInput registers CreateCheckInput object type with given service.
func RegisterCreateCheckInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeCreateCheckInputDesc)
}
func _InputTypeCreateCheckInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"name": &graphql1.InputObjectFieldConfig{
				Description: "name of the resulting check.",
				Type:        graphql1.NewNonNull(graphql1.String),
			},
			"ns": &graphql1.InputObjectFieldConfig{
				DefaultValue: map[string]interface{}{
					"environment":  "default",
					"organization": "default",
				},
				Description: "namespace the resulting resource will belong to.",
				Type:        graphql.InputType("NamespaceInput"),
			},
			"props": &graphql1.InputObjectFieldConfig{
				Description: "properties of the check",
				Type:        graphql1.NewNonNull(graphql.InputType("CheckConfigInputs")),
			},
		},
		Name: "CreateCheckInput",
	}
}

// describe CreateCheckInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeCreateCheckInputDesc = graphql.InputDesc{Config: _InputTypeCreateCheckInputConfigFn}

// CreateCheckPayloadClientMutationIDFieldResolver implement to resolve requests for the CreateCheckPayload's clientMutationId field.
type CreateCheckPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// CreateCheckPayloadCheckFieldResolver implement to resolve requests for the CreateCheckPayload's check field.
type CreateCheckPayloadCheckFieldResolver interface {
	// Check implements response to request for check field.
	Check(p graphql.ResolveParams) (interface{}, error)
}

//
// CreateCheckPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CreateCheckPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CreateCheckPayloadFieldResolvers interface {
	CreateCheckPayloadClientMutationIDFieldResolver
	CreateCheckPayloadCheckFieldResolver
}

// CreateCheckPayloadAliases implements all methods on CreateCheckPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CreateCheckPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ CreateCheckPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Check implements response to request for 'check' field.
func (_ CreateCheckPayloadAliases) Check(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CreateCheckPayloadType self descriptive
var CreateCheckPayloadType = graphql.NewType("CreateCheckPayload", graphql.ObjectKind)

// RegisterCreateCheckPayload registers CreateCheckPayload object type with given service.
func RegisterCreateCheckPayload(svc *graphql.Service, impl CreateCheckPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCreateCheckPayloadDesc, impl)
}
func _ObjTypeCreateCheckPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateCheckPayloadClientMutationIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(p)
	}
}

func _ObjTypeCreateCheckPayloadCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateCheckPayloadCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Check(p)
	}
}

func _ObjectTypeCreateCheckPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"check": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The name of the new check.",
				Name:              "check",
				Type:              graphql1.NewNonNull(graphql.OutputType("CheckConfig")),
			},
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CreateCheckPayloadFieldResolvers.")
		},
		Name: "CreateCheckPayload",
	}
}

// describe CreateCheckPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCreateCheckPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCreateCheckPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"check":            _ObjTypeCreateCheckPayloadCheckHandler,
		"clientMutationId": _ObjTypeCreateCheckPayloadClientMutationIDHandler,
	},
}

// UpdateCheckInput self descriptive
type UpdateCheckInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the check to update.
	ID interface{}
	// Props - properties of the check
	Props *CheckConfigInputs
}

// UpdateCheckInputType self descriptive
var UpdateCheckInputType = graphql.NewType("UpdateCheckInput", graphql.InputKind)

// RegisterUpdateCheckInput registers UpdateCheckInput object type with given service.
func RegisterUpdateCheckInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeUpdateCheckInputDesc)
}
func _InputTypeUpdateCheckInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the check to update.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
			"props": &graphql1.InputObjectFieldConfig{
				Description: "properties of the check",
				Type:        graphql1.NewNonNull(graphql.InputType("CheckConfigInputs")),
			},
		},
		Name: "UpdateCheckInput",
	}
}

// describe UpdateCheckInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeUpdateCheckInputDesc = graphql.InputDesc{Config: _InputTypeUpdateCheckInputConfigFn}

// UpdateCheckPayloadClientMutationIDFieldResolver implement to resolve requests for the UpdateCheckPayload's clientMutationId field.
type UpdateCheckPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// UpdateCheckPayloadCheckFieldResolver implement to resolve requests for the UpdateCheckPayload's check field.
type UpdateCheckPayloadCheckFieldResolver interface {
	// Check implements response to request for check field.
	Check(p graphql.ResolveParams) (interface{}, error)
}

//
// UpdateCheckPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'UpdateCheckPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type UpdateCheckPayloadFieldResolvers interface {
	UpdateCheckPayloadClientMutationIDFieldResolver
	UpdateCheckPayloadCheckFieldResolver
}

// UpdateCheckPayloadAliases implements all methods on UpdateCheckPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type UpdateCheckPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ UpdateCheckPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Check implements response to request for 'check' field.
func (_ UpdateCheckPayloadAliases) Check(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// UpdateCheckPayloadType self descriptive
var UpdateCheckPayloadType = graphql.NewType("UpdateCheckPayload", graphql.ObjectKind)

// RegisterUpdateCheckPayload registers UpdateCheckPayload object type with given service.
func RegisterUpdateCheckPayload(svc *graphql.Service, impl UpdateCheckPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeUpdateCheckPayloadDesc, impl)
}
func _ObjTypeUpdateCheckPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(UpdateCheckPayloadClientMutationIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(p)
	}
}

func _ObjTypeUpdateCheckPayloadCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(UpdateCheckPayloadCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Check(p)
	}
}

func _ObjectTypeUpdateCheckPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"check": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The name of the new check.",
				Name:              "check",
				Type:              graphql1.NewNonNull(graphql.OutputType("CheckConfig")),
			},
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see UpdateCheckPayloadFieldResolvers.")
		},
		Name: "UpdateCheckPayload",
	}
}

// describe UpdateCheckPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeUpdateCheckPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeUpdateCheckPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"check":            _ObjTypeUpdateCheckPayloadCheckHandler,
		"clientMutationId": _ObjTypeUpdateCheckPayloadClientMutationIDHandler,
	},
}

// ResolveEventInput self descriptive
type ResolveEventInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the event to resolve.
	ID interface{}
	// Source - The source of the resolve request
	Source string
}

// ResolveEventInputType self descriptive
var ResolveEventInputType = graphql.NewType("ResolveEventInput", graphql.InputKind)

// RegisterResolveEventInput registers ResolveEventInput object type with given service.
func RegisterResolveEventInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeResolveEventInputDesc)
}
func _InputTypeResolveEventInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the event to resolve.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
			"source": &graphql1.InputObjectFieldConfig{
				DefaultValue: "GraphQL",
				Description:  "The source of the resolve request",
				Type:         graphql1.String,
			},
		},
		Name: "ResolveEventInput",
	}
}

// describe ResolveEventInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeResolveEventInputDesc = graphql.InputDesc{Config: _InputTypeResolveEventInputConfigFn}

// ResolveEventPayloadClientMutationIDFieldResolver implement to resolve requests for the ResolveEventPayload's clientMutationId field.
type ResolveEventPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// ResolveEventPayloadEventFieldResolver implement to resolve requests for the ResolveEventPayload's event field.
type ResolveEventPayloadEventFieldResolver interface {
	// Event implements response to request for event field.
	Event(p graphql.ResolveParams) (interface{}, error)
}

//
// ResolveEventPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'ResolveEventPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type ResolveEventPayloadFieldResolvers interface {
	ResolveEventPayloadClientMutationIDFieldResolver
	ResolveEventPayloadEventFieldResolver
}

// ResolveEventPayloadAliases implements all methods on ResolveEventPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type ResolveEventPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ ResolveEventPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := fmt.Sprint(val)
	return ret, err
}

// Event implements response to request for 'event' field.
func (_ ResolveEventPayloadAliases) Event(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ResolveEventPayloadType self descriptive
var ResolveEventPayloadType = graphql.NewType("ResolveEventPayload", graphql.ObjectKind)

// RegisterResolveEventPayload registers ResolveEventPayload object type with given service.
func RegisterResolveEventPayload(svc *graphql.Service, impl ResolveEventPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeResolveEventPayloadDesc, impl)
}
func _ObjTypeResolveEventPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ResolveEventPayloadClientMutationIDFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(p)
	}
}

func _ObjTypeResolveEventPayloadEventHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ResolveEventPayloadEventFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		return resolver.Event(p)
	}
}

func _ObjectTypeResolveEventPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
			"event": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The event that was resolved.",
				Name:              "event",
				Type:              graphql1.NewNonNull(graphql.OutputType("Event")),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ResolveEventPayloadFieldResolvers.")
		},
		Name: "ResolveEventPayload",
	}
}

// describe ResolveEventPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeResolveEventPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeResolveEventPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"clientMutationId": _ObjTypeResolveEventPayloadClientMutationIDHandler,
		"event":            _ObjTypeResolveEventPayloadEventHandler,
	},
}
