// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
	time "time"
)

// MutationPutWrappedFieldResolverArgs contains arguments provided to putWrapped when selected
type MutationPutWrappedFieldResolverArgs struct {
	Raw string // Raw - self descriptive
}

// MutationPutWrappedFieldResolverParams contains contextual info to resolve putWrapped field
type MutationPutWrappedFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationPutWrappedFieldResolverArgs
}

// MutationPutWrappedFieldResolver implement to resolve requests for the Mutation's putWrapped field.
type MutationPutWrappedFieldResolver interface {
	// PutWrapped implements response to request for putWrapped field.
	PutWrapped(p MutationPutWrappedFieldResolverParams) (interface{}, error)
}

// MutationCreateCheckFieldResolverArgs contains arguments provided to createCheck when selected
type MutationCreateCheckFieldResolverArgs struct {
	Input *CreateCheckInput // Input - self descriptive
}

// MutationCreateCheckFieldResolverParams contains contextual info to resolve createCheck field
type MutationCreateCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationCreateCheckFieldResolverArgs
}

// MutationCreateCheckFieldResolver implement to resolve requests for the Mutation's createCheck field.
type MutationCreateCheckFieldResolver interface {
	// CreateCheck implements response to request for createCheck field.
	CreateCheck(p MutationCreateCheckFieldResolverParams) (interface{}, error)
}

// MutationUpdateCheckFieldResolverArgs contains arguments provided to updateCheck when selected
type MutationUpdateCheckFieldResolverArgs struct {
	Input *UpdateCheckInput // Input - self descriptive
}

// MutationUpdateCheckFieldResolverParams contains contextual info to resolve updateCheck field
type MutationUpdateCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationUpdateCheckFieldResolverArgs
}

// MutationUpdateCheckFieldResolver implement to resolve requests for the Mutation's updateCheck field.
type MutationUpdateCheckFieldResolver interface {
	// UpdateCheck implements response to request for updateCheck field.
	UpdateCheck(p MutationUpdateCheckFieldResolverParams) (interface{}, error)
}

// MutationExecuteCheckFieldResolverArgs contains arguments provided to executeCheck when selected
type MutationExecuteCheckFieldResolverArgs struct {
	Input *ExecuteCheckInput // Input - self descriptive
}

// MutationExecuteCheckFieldResolverParams contains contextual info to resolve executeCheck field
type MutationExecuteCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationExecuteCheckFieldResolverArgs
}

// MutationExecuteCheckFieldResolver implement to resolve requests for the Mutation's executeCheck field.
type MutationExecuteCheckFieldResolver interface {
	// ExecuteCheck implements response to request for executeCheck field.
	ExecuteCheck(p MutationExecuteCheckFieldResolverParams) (interface{}, error)
}

// MutationDeleteCheckFieldResolverArgs contains arguments provided to deleteCheck when selected
type MutationDeleteCheckFieldResolverArgs struct {
	Input *DeleteRecordInput // Input - self descriptive
}

// MutationDeleteCheckFieldResolverParams contains contextual info to resolve deleteCheck field
type MutationDeleteCheckFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationDeleteCheckFieldResolverArgs
}

// MutationDeleteCheckFieldResolver implement to resolve requests for the Mutation's deleteCheck field.
type MutationDeleteCheckFieldResolver interface {
	// DeleteCheck implements response to request for deleteCheck field.
	DeleteCheck(p MutationDeleteCheckFieldResolverParams) (interface{}, error)
}

// MutationDeleteEntityFieldResolverArgs contains arguments provided to deleteEntity when selected
type MutationDeleteEntityFieldResolverArgs struct {
	Input *DeleteRecordInput // Input - self descriptive
}

// MutationDeleteEntityFieldResolverParams contains contextual info to resolve deleteEntity field
type MutationDeleteEntityFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationDeleteEntityFieldResolverArgs
}

// MutationDeleteEntityFieldResolver implement to resolve requests for the Mutation's deleteEntity field.
type MutationDeleteEntityFieldResolver interface {
	// DeleteEntity implements response to request for deleteEntity field.
	DeleteEntity(p MutationDeleteEntityFieldResolverParams) (interface{}, error)
}

// MutationResolveEventFieldResolverArgs contains arguments provided to resolveEvent when selected
type MutationResolveEventFieldResolverArgs struct {
	Input *ResolveEventInput // Input - self descriptive
}

// MutationResolveEventFieldResolverParams contains contextual info to resolve resolveEvent field
type MutationResolveEventFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationResolveEventFieldResolverArgs
}

// MutationResolveEventFieldResolver implement to resolve requests for the Mutation's resolveEvent field.
type MutationResolveEventFieldResolver interface {
	// ResolveEvent implements response to request for resolveEvent field.
	ResolveEvent(p MutationResolveEventFieldResolverParams) (interface{}, error)
}

// MutationDeleteEventFieldResolverArgs contains arguments provided to deleteEvent when selected
type MutationDeleteEventFieldResolverArgs struct {
	Input *DeleteRecordInput // Input - self descriptive
}

// MutationDeleteEventFieldResolverParams contains contextual info to resolve deleteEvent field
type MutationDeleteEventFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationDeleteEventFieldResolverArgs
}

// MutationDeleteEventFieldResolver implement to resolve requests for the Mutation's deleteEvent field.
type MutationDeleteEventFieldResolver interface {
	// DeleteEvent implements response to request for deleteEvent field.
	DeleteEvent(p MutationDeleteEventFieldResolverParams) (interface{}, error)
}

// MutationCreateSilenceFieldResolverArgs contains arguments provided to createSilence when selected
type MutationCreateSilenceFieldResolverArgs struct {
	Input *CreateSilenceInput // Input - self descriptive
}

// MutationCreateSilenceFieldResolverParams contains contextual info to resolve createSilence field
type MutationCreateSilenceFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationCreateSilenceFieldResolverArgs
}

// MutationCreateSilenceFieldResolver implement to resolve requests for the Mutation's createSilence field.
type MutationCreateSilenceFieldResolver interface {
	// CreateSilence implements response to request for createSilence field.
	CreateSilence(p MutationCreateSilenceFieldResolverParams) (interface{}, error)
}

// MutationDeleteSilenceFieldResolverArgs contains arguments provided to deleteSilence when selected
type MutationDeleteSilenceFieldResolverArgs struct {
	Input *DeleteRecordInput // Input - self descriptive
}

// MutationDeleteSilenceFieldResolverParams contains contextual info to resolve deleteSilence field
type MutationDeleteSilenceFieldResolverParams struct {
	graphql.ResolveParams
	Args MutationDeleteSilenceFieldResolverArgs
}

// MutationDeleteSilenceFieldResolver implement to resolve requests for the Mutation's deleteSilence field.
type MutationDeleteSilenceFieldResolver interface {
	// DeleteSilence implements response to request for deleteSilence field.
	DeleteSilence(p MutationDeleteSilenceFieldResolverParams) (interface{}, error)
}

//
// MutationFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Mutation' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type MutationFieldResolvers interface {
	MutationPutWrappedFieldResolver
	MutationCreateCheckFieldResolver
	MutationUpdateCheckFieldResolver
	MutationExecuteCheckFieldResolver
	MutationDeleteCheckFieldResolver
	MutationDeleteEntityFieldResolver
	MutationResolveEventFieldResolver
	MutationDeleteEventFieldResolver
	MutationCreateSilenceFieldResolver
	MutationDeleteSilenceFieldResolver
}

// MutationAliases implements all methods on MutationFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type MutationAliases struct{}

// PutWrapped implements response to request for 'putWrapped' field.
func (_ MutationAliases) PutWrapped(p MutationPutWrappedFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CreateCheck implements response to request for 'createCheck' field.
func (_ MutationAliases) CreateCheck(p MutationCreateCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// UpdateCheck implements response to request for 'updateCheck' field.
func (_ MutationAliases) UpdateCheck(p MutationUpdateCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ExecuteCheck implements response to request for 'executeCheck' field.
func (_ MutationAliases) ExecuteCheck(p MutationExecuteCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// DeleteCheck implements response to request for 'deleteCheck' field.
func (_ MutationAliases) DeleteCheck(p MutationDeleteCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// DeleteEntity implements response to request for 'deleteEntity' field.
func (_ MutationAliases) DeleteEntity(p MutationDeleteEntityFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ResolveEvent implements response to request for 'resolveEvent' field.
func (_ MutationAliases) ResolveEvent(p MutationResolveEventFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// DeleteEvent implements response to request for 'deleteEvent' field.
func (_ MutationAliases) DeleteEvent(p MutationDeleteEventFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CreateSilence implements response to request for 'createSilence' field.
func (_ MutationAliases) CreateSilence(p MutationCreateSilenceFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// DeleteSilence implements response to request for 'deleteSilence' field.
func (_ MutationAliases) DeleteSilence(p MutationDeleteSilenceFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// MutationType The root query for implementing GraphQL mutations.
var MutationType = graphql.NewType("Mutation", graphql.ObjectKind)

// RegisterMutation registers Mutation object type with given service.
func RegisterMutation(svc *graphql.Service, impl MutationFieldResolvers) {
	svc.RegisterObject(_ObjectTypeMutationDesc, impl)
}
func _ObjTypeMutationPutWrappedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationPutWrappedFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationPutWrappedFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.PutWrapped(frp)
	}
}

func _ObjTypeMutationCreateCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationCreateCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationCreateCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.CreateCheck(frp)
	}
}

func _ObjTypeMutationUpdateCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationUpdateCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationUpdateCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.UpdateCheck(frp)
	}
}

func _ObjTypeMutationExecuteCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationExecuteCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationExecuteCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.ExecuteCheck(frp)
	}
}

func _ObjTypeMutationDeleteCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationDeleteCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationDeleteCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.DeleteCheck(frp)
	}
}

func _ObjTypeMutationDeleteEntityHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationDeleteEntityFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationDeleteEntityFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.DeleteEntity(frp)
	}
}

func _ObjTypeMutationResolveEventHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationResolveEventFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationResolveEventFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.ResolveEvent(frp)
	}
}

func _ObjTypeMutationDeleteEventHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationDeleteEventFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationDeleteEventFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.DeleteEvent(frp)
	}
}

func _ObjTypeMutationCreateSilenceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationCreateSilenceFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationCreateSilenceFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.CreateSilence(frp)
	}
}

func _ObjTypeMutationDeleteSilenceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationDeleteSilenceFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationDeleteSilenceFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.DeleteSilence(frp)
	}
}

func _ObjectTypeMutationConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "The root query for implementing GraphQL mutations.",
		Fields: graphql1.Fields{
			"createCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("CreateCheckInput")),
				}},
				DeprecationReason: "",
				Description:       "Creates a new check.",
				Name:              "createCheck",
				Type:              graphql.OutputType("CreateCheckPayload"),
			},
			"createSilence": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("CreateSilenceInput")),
				}},
				DeprecationReason: "",
				Description:       "Creates a silence.",
				Name:              "createSilence",
				Type:              graphql.OutputType("CreateSilencePayload"),
			},
			"deleteCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("DeleteRecordInput")),
				}},
				DeprecationReason: "",
				Description:       "Removes given check.",
				Name:              "deleteCheck",
				Type:              graphql.OutputType("DeleteRecordPayload"),
			},
			"deleteEntity": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("DeleteRecordInput")),
				}},
				DeprecationReason: "",
				Description:       "Removes a given entity.",
				Name:              "deleteEntity",
				Type:              graphql.OutputType("DeleteRecordPayload"),
			},
			"deleteEvent": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("DeleteRecordInput")),
				}},
				DeprecationReason: "",
				Description:       "Deletes an event.",
				Name:              "deleteEvent",
				Type:              graphql.OutputType("DeleteRecordPayload"),
			},
			"deleteSilence": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("DeleteRecordInput")),
				}},
				DeprecationReason: "",
				Description:       "Removes given silence.",
				Name:              "deleteSilence",
				Type:              graphql.OutputType("DeleteRecordPayload"),
			},
			"executeCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("ExecuteCheckInput")),
				}},
				DeprecationReason: "",
				Description:       "Updates given check.",
				Name:              "executeCheck",
				Type:              graphql.OutputType("ExecuteCheckPayload"),
			},
			"putWrapped": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"raw": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql1.String),
				}},
				DeprecationReason: "",
				Description:       "Create or overrwrite resource from given wrapped resource.",
				Name:              "putWrapped",
				Type:              graphql1.NewNonNull(graphql.OutputType("PutWrappedPayload")),
			},
			"resolveEvent": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("ResolveEventInput")),
				}},
				DeprecationReason: "",
				Description:       "Resolves an event.",
				Name:              "resolveEvent",
				Type:              graphql.OutputType("ResolveEventPayload"),
			},
			"updateCheck": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
					Description: "self descriptive",
					Type:        graphql1.NewNonNull(graphql.InputType("UpdateCheckInput")),
				}},
				DeprecationReason: "",
				Description:       "Updates given check.",
				Name:              "updateCheck",
				Type:              graphql.OutputType("UpdateCheckPayload"),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see MutationFieldResolvers.")
		},
		Name: "Mutation",
	}
}

// describe Mutation's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeMutationDesc = graphql.ObjectDesc{
	Config: _ObjectTypeMutationConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"createCheck":   _ObjTypeMutationCreateCheckHandler,
		"createSilence": _ObjTypeMutationCreateSilenceHandler,
		"deleteCheck":   _ObjTypeMutationDeleteCheckHandler,
		"deleteEntity":  _ObjTypeMutationDeleteEntityHandler,
		"deleteEvent":   _ObjTypeMutationDeleteEventHandler,
		"deleteSilence": _ObjTypeMutationDeleteSilenceHandler,
		"executeCheck":  _ObjTypeMutationExecuteCheckHandler,
		"putWrapped":    _ObjTypeMutationPutWrappedHandler,
		"resolveEvent":  _ObjTypeMutationResolveEventHandler,
		"updateCheck":   _ObjTypeMutationUpdateCheckHandler,
	},
}

// PutWrappedPayloadNodeFieldResolver implement to resolve requests for the PutWrappedPayload's node field.
type PutWrappedPayloadNodeFieldResolver interface {
	// Node implements response to request for node field.
	Node(p graphql.ResolveParams) (interface{}, error)
}

// PutWrappedPayloadErrorsFieldResolver implement to resolve requests for the PutWrappedPayload's errors field.
type PutWrappedPayloadErrorsFieldResolver interface {
	// Errors implements response to request for errors field.
	Errors(p graphql.ResolveParams) (interface{}, error)
}

//
// PutWrappedPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'PutWrappedPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type PutWrappedPayloadFieldResolvers interface {
	PutWrappedPayloadNodeFieldResolver
	PutWrappedPayloadErrorsFieldResolver
}

// PutWrappedPayloadAliases implements all methods on PutWrappedPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type PutWrappedPayloadAliases struct{}

// Node implements response to request for 'node' field.
func (_ PutWrappedPayloadAliases) Node(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Errors implements response to request for 'errors' field.
func (_ PutWrappedPayloadAliases) Errors(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// PutWrappedPayloadType self descriptive
var PutWrappedPayloadType = graphql.NewType("PutWrappedPayload", graphql.ObjectKind)

// RegisterPutWrappedPayload registers PutWrappedPayload object type with given service.
func RegisterPutWrappedPayload(svc *graphql.Service, impl PutWrappedPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypePutWrappedPayloadDesc, impl)
}
func _ObjTypePutWrappedPayloadNodeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(PutWrappedPayloadNodeFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Node(frp)
	}
}

func _ObjTypePutWrappedPayloadErrorsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(PutWrappedPayloadErrorsFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Errors(frp)
	}
}

func _ObjectTypePutWrappedPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"errors": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Includes any failed preconditions or unrecoverable errors that occurred while\nexecuting the mutation.",
				Name:              "errors",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("Error")))),
			},
			"node": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The newly created / updated resource",
				Name:              "node",
				Type:              graphql.OutputType("Node"),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see PutWrappedPayloadFieldResolvers.")
		},
		Name: "PutWrappedPayload",
	}
}

// describe PutWrappedPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypePutWrappedPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypePutWrappedPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"errors": _ObjTypePutWrappedPayloadErrorsHandler,
		"node":   _ObjTypePutWrappedPayloadNodeHandler,
	},
}

// DeleteRecordPayloadClientMutationIDFieldResolver implement to resolve requests for the DeleteRecordPayload's clientMutationId field.
type DeleteRecordPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// DeleteRecordPayloadDeletedIDFieldResolver implement to resolve requests for the DeleteRecordPayload's deletedId field.
type DeleteRecordPayloadDeletedIDFieldResolver interface {
	// DeletedID implements response to request for deletedId field.
	DeletedID(p graphql.ResolveParams) (string, error)
}

//
// DeleteRecordPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'DeleteRecordPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type DeleteRecordPayloadFieldResolvers interface {
	DeleteRecordPayloadClientMutationIDFieldResolver
	DeleteRecordPayloadDeletedIDFieldResolver
}

// DeleteRecordPayloadAliases implements all methods on DeleteRecordPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type DeleteRecordPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ DeleteRecordPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'clientMutationId'")
	}
	return ret, err
}

// DeletedID implements response to request for 'deletedId' field.
func (_ DeleteRecordPayloadAliases) DeletedID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'deletedId'")
	}
	return ret, err
}

// DeleteRecordPayloadType Generic container for deleted record payload.
var DeleteRecordPayloadType = graphql.NewType("DeleteRecordPayload", graphql.ObjectKind)

// RegisterDeleteRecordPayload registers DeleteRecordPayload object type with given service.
func RegisterDeleteRecordPayload(svc *graphql.Service, impl DeleteRecordPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeDeleteRecordPayloadDesc, impl)
}
func _ObjTypeDeleteRecordPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(DeleteRecordPayloadClientMutationIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(frp)
	}
}

func _ObjTypeDeleteRecordPayloadDeletedIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(DeleteRecordPayloadDeletedIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.DeletedID(frp)
	}
}

func _ObjectTypeDeleteRecordPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Generic container for deleted record payload.",
		Fields: graphql1.Fields{
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
			"deletedId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "ID of the deleted resource",
				Name:              "deletedId",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see DeleteRecordPayloadFieldResolvers.")
		},
		Name: "DeleteRecordPayload",
	}
}

// describe DeleteRecordPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeDeleteRecordPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeDeleteRecordPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"clientMutationId": _ObjTypeDeleteRecordPayloadClientMutationIDHandler,
		"deletedId":        _ObjTypeDeleteRecordPayloadDeletedIDHandler,
	},
}

// DeleteRecordInput Generic input used when deleting records.
type DeleteRecordInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the check to update.
	ID string
}

// DeleteRecordInputType Generic input used when deleting records.
var DeleteRecordInputType = graphql.NewType("DeleteRecordInput", graphql.InputKind)

// RegisterDeleteRecordInput registers DeleteRecordInput object type with given service.
func RegisterDeleteRecordInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeDeleteRecordInputDesc)
}
func _InputTypeDeleteRecordInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "Generic input used when deleting records.",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the check to update.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
		},
		Name: "DeleteRecordInput",
	}
}

// describe DeleteRecordInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeDeleteRecordInputDesc = graphql.InputDesc{Config: _InputTypeDeleteRecordInputConfigFn}

// CheckConfigInputs self descriptive
type CheckConfigInputs struct {
	// Command - command to run.
	Command string
	// Interval - interval is the time interval, in seconds, in which the check should be run.
	Interval int
	/*
	   LowFlapThreshold - lowFlapThreshold is the flap detection low threshold (% state change) for
	   the check. Sensu uses the same flap detection algorithm as Nagios.
	*/
	LowFlapThreshold int
	/*
	   HighFlapThreshold - highFlapThreshold is the flap detection high threshold (% state change) for
	   the check. Sensu uses the same flap detection algorithm as Nagios.
	*/
	HighFlapThreshold int
	// Subscriptions - subscriptions refers to the list of subscribers for the check.
	Subscriptions []string
	// Handlers - handlers are the event handler for the check (incidents and/or metrics).
	Handlers []string
	// Publish - publish indicates if check requests are published for the check
	Publish bool
	// Assets - Provide a list of valid assets that are required to execute the check.
	Assets []string
}

// CheckConfigInputsType self descriptive
var CheckConfigInputsType = graphql.NewType("CheckConfigInputs", graphql.InputKind)

// RegisterCheckConfigInputs registers CheckConfigInputs object type with given service.
func RegisterCheckConfigInputs(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeCheckConfigInputsDesc)
}
func _InputTypeCheckConfigInputsConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"assets": &graphql1.InputObjectFieldConfig{
				Description: "Provide a list of valid assets that are required to execute the check.",
				Type:        graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
			"command": &graphql1.InputObjectFieldConfig{
				Description: "command to run.",
				Type:        graphql1.String,
			},
			"handlers": &graphql1.InputObjectFieldConfig{
				Description: "handlers are the event handler for the check (incidents and/or metrics).",
				Type:        graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
			"highFlapThreshold": &graphql1.InputObjectFieldConfig{
				Description: "highFlapThreshold is the flap detection high threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Type:        graphql1.Int,
			},
			"interval": &graphql1.InputObjectFieldConfig{
				Description: "interval is the time interval, in seconds, in which the check should be run.",
				Type:        graphql1.Int,
			},
			"lowFlapThreshold": &graphql1.InputObjectFieldConfig{
				Description: "lowFlapThreshold is the flap detection low threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Type:        graphql1.Int,
			},
			"publish": &graphql1.InputObjectFieldConfig{
				Description: "publish indicates if check requests are published for the check",
				Type:        graphql1.Boolean,
			},
			"subscriptions": &graphql1.InputObjectFieldConfig{
				Description: "subscriptions refers to the list of subscribers for the check.",
				Type:        graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
		},
		Name: "CheckConfigInputs",
	}
}

// describe CheckConfigInputs's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeCheckConfigInputsDesc = graphql.InputDesc{Config: _InputTypeCheckConfigInputsConfigFn}

// CreateCheckInput self descriptive
type CreateCheckInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// Namespace - namespace the resulting resource will belong to.
	Namespace string
	// Name - name of the resulting check.
	Name string
	// Props - properties of the check
	Props *CheckConfigInputs
}

// CreateCheckInputType self descriptive
var CreateCheckInputType = graphql.NewType("CreateCheckInput", graphql.InputKind)

// RegisterCreateCheckInput registers CreateCheckInput object type with given service.
func RegisterCreateCheckInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeCreateCheckInputDesc)
}
func _InputTypeCreateCheckInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"name": &graphql1.InputObjectFieldConfig{
				Description: "name of the resulting check.",
				Type:        graphql1.NewNonNull(graphql1.String),
			},
			"namespace": &graphql1.InputObjectFieldConfig{
				DefaultValue: "default",
				Description:  "namespace the resulting resource will belong to.",
				Type:         graphql1.String,
			},
			"props": &graphql1.InputObjectFieldConfig{
				Description: "properties of the check",
				Type:        graphql1.NewNonNull(graphql.InputType("CheckConfigInputs")),
			},
		},
		Name: "CreateCheckInput",
	}
}

// describe CreateCheckInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeCreateCheckInputDesc = graphql.InputDesc{Config: _InputTypeCreateCheckInputConfigFn}

// CreateCheckPayloadClientMutationIDFieldResolver implement to resolve requests for the CreateCheckPayload's clientMutationId field.
type CreateCheckPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// CreateCheckPayloadCheckFieldResolver implement to resolve requests for the CreateCheckPayload's check field.
type CreateCheckPayloadCheckFieldResolver interface {
	// Check implements response to request for check field.
	Check(p graphql.ResolveParams) (interface{}, error)
}

//
// CreateCheckPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CreateCheckPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CreateCheckPayloadFieldResolvers interface {
	CreateCheckPayloadClientMutationIDFieldResolver
	CreateCheckPayloadCheckFieldResolver
}

// CreateCheckPayloadAliases implements all methods on CreateCheckPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CreateCheckPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ CreateCheckPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'clientMutationId'")
	}
	return ret, err
}

// Check implements response to request for 'check' field.
func (_ CreateCheckPayloadAliases) Check(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CreateCheckPayloadType self descriptive
var CreateCheckPayloadType = graphql.NewType("CreateCheckPayload", graphql.ObjectKind)

// RegisterCreateCheckPayload registers CreateCheckPayload object type with given service.
func RegisterCreateCheckPayload(svc *graphql.Service, impl CreateCheckPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCreateCheckPayloadDesc, impl)
}
func _ObjTypeCreateCheckPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateCheckPayloadClientMutationIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(frp)
	}
}

func _ObjTypeCreateCheckPayloadCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateCheckPayloadCheckFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Check(frp)
	}
}

func _ObjectTypeCreateCheckPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"check": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The newly created check.",
				Name:              "check",
				Type:              graphql1.NewNonNull(graphql.OutputType("CheckConfig")),
			},
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CreateCheckPayloadFieldResolvers.")
		},
		Name: "CreateCheckPayload",
	}
}

// describe CreateCheckPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCreateCheckPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCreateCheckPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"check":            _ObjTypeCreateCheckPayloadCheckHandler,
		"clientMutationId": _ObjTypeCreateCheckPayloadClientMutationIDHandler,
	},
}

// UpdateCheckInput self descriptive
type UpdateCheckInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the check to update.
	ID string
	// Props - properties of the check
	Props *CheckConfigInputs
}

// UpdateCheckInputType self descriptive
var UpdateCheckInputType = graphql.NewType("UpdateCheckInput", graphql.InputKind)

// RegisterUpdateCheckInput registers UpdateCheckInput object type with given service.
func RegisterUpdateCheckInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeUpdateCheckInputDesc)
}
func _InputTypeUpdateCheckInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the check to update.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
			"props": &graphql1.InputObjectFieldConfig{
				Description: "properties of the check",
				Type:        graphql1.NewNonNull(graphql.InputType("CheckConfigInputs")),
			},
		},
		Name: "UpdateCheckInput",
	}
}

// describe UpdateCheckInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeUpdateCheckInputDesc = graphql.InputDesc{Config: _InputTypeUpdateCheckInputConfigFn}

// UpdateCheckPayloadClientMutationIDFieldResolver implement to resolve requests for the UpdateCheckPayload's clientMutationId field.
type UpdateCheckPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// UpdateCheckPayloadCheckFieldResolver implement to resolve requests for the UpdateCheckPayload's check field.
type UpdateCheckPayloadCheckFieldResolver interface {
	// Check implements response to request for check field.
	Check(p graphql.ResolveParams) (interface{}, error)
}

//
// UpdateCheckPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'UpdateCheckPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type UpdateCheckPayloadFieldResolvers interface {
	UpdateCheckPayloadClientMutationIDFieldResolver
	UpdateCheckPayloadCheckFieldResolver
}

// UpdateCheckPayloadAliases implements all methods on UpdateCheckPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type UpdateCheckPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ UpdateCheckPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'clientMutationId'")
	}
	return ret, err
}

// Check implements response to request for 'check' field.
func (_ UpdateCheckPayloadAliases) Check(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// UpdateCheckPayloadType self descriptive
var UpdateCheckPayloadType = graphql.NewType("UpdateCheckPayload", graphql.ObjectKind)

// RegisterUpdateCheckPayload registers UpdateCheckPayload object type with given service.
func RegisterUpdateCheckPayload(svc *graphql.Service, impl UpdateCheckPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeUpdateCheckPayloadDesc, impl)
}
func _ObjTypeUpdateCheckPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(UpdateCheckPayloadClientMutationIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(frp)
	}
}

func _ObjTypeUpdateCheckPayloadCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(UpdateCheckPayloadCheckFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Check(frp)
	}
}

func _ObjectTypeUpdateCheckPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"check": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The updated check.",
				Name:              "check",
				Type:              graphql1.NewNonNull(graphql.OutputType("CheckConfig")),
			},
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see UpdateCheckPayloadFieldResolvers.")
		},
		Name: "UpdateCheckPayload",
	}
}

// describe UpdateCheckPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeUpdateCheckPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeUpdateCheckPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"check":            _ObjTypeUpdateCheckPayloadCheckHandler,
		"clientMutationId": _ObjTypeUpdateCheckPayloadClientMutationIDHandler,
	},
}

// ExecuteCheckInput self descriptive
type ExecuteCheckInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the check to update.
	ID string
	// Subscriptions is an optional list of subscriptions to target.
	Subscriptions []string
	// Reason is used to provide context to the adho request.
	Reason string
}

// ExecuteCheckInputType self descriptive
var ExecuteCheckInputType = graphql.NewType("ExecuteCheckInput", graphql.InputKind)

// RegisterExecuteCheckInput registers ExecuteCheckInput object type with given service.
func RegisterExecuteCheckInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeExecuteCheckInputDesc)
}
func _InputTypeExecuteCheckInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the check to update.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
			"reason": &graphql1.InputObjectFieldConfig{
				DefaultValue: "",
				Description:  "Reason is used to provide context to the adho request.",
				Type:         graphql1.String,
			},
			"subscriptions": &graphql1.InputObjectFieldConfig{
				DefaultValue: []interface{}{},
				Description:  "Subscriptions is an optional list of subscriptions to target.",
				Type:         graphql1.NewList(graphql1.NewNonNull(graphql1.String)),
			},
		},
		Name: "ExecuteCheckInput",
	}
}

// describe ExecuteCheckInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeExecuteCheckInputDesc = graphql.InputDesc{Config: _InputTypeExecuteCheckInputConfigFn}

// ExecuteCheckPayloadClientMutationIDFieldResolver implement to resolve requests for the ExecuteCheckPayload's clientMutationId field.
type ExecuteCheckPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// ExecuteCheckPayloadErrorsFieldResolver implement to resolve requests for the ExecuteCheckPayload's errors field.
type ExecuteCheckPayloadErrorsFieldResolver interface {
	// Errors implements response to request for errors field.
	Errors(p graphql.ResolveParams) (interface{}, error)
}

//
// ExecuteCheckPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'ExecuteCheckPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type ExecuteCheckPayloadFieldResolvers interface {
	ExecuteCheckPayloadClientMutationIDFieldResolver
	ExecuteCheckPayloadErrorsFieldResolver
}

// ExecuteCheckPayloadAliases implements all methods on ExecuteCheckPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type ExecuteCheckPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ ExecuteCheckPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'clientMutationId'")
	}
	return ret, err
}

// Errors implements response to request for 'errors' field.
func (_ ExecuteCheckPayloadAliases) Errors(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ExecuteCheckPayloadType self descriptive
var ExecuteCheckPayloadType = graphql.NewType("ExecuteCheckPayload", graphql.ObjectKind)

// RegisterExecuteCheckPayload registers ExecuteCheckPayload object type with given service.
func RegisterExecuteCheckPayload(svc *graphql.Service, impl ExecuteCheckPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeExecuteCheckPayloadDesc, impl)
}
func _ObjTypeExecuteCheckPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ExecuteCheckPayloadClientMutationIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(frp)
	}
}

func _ObjTypeExecuteCheckPayloadErrorsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ExecuteCheckPayloadErrorsFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Errors(frp)
	}
}

func _ObjectTypeExecuteCheckPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
			"errors": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Includes any failed preconditions or unrecoverable errors that occurred while\nexecuting the mutation.",
				Name:              "errors",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("Error")))),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ExecuteCheckPayloadFieldResolvers.")
		},
		Name: "ExecuteCheckPayload",
	}
}

// describe ExecuteCheckPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeExecuteCheckPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeExecuteCheckPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"clientMutationId": _ObjTypeExecuteCheckPayloadClientMutationIDHandler,
		"errors":           _ObjTypeExecuteCheckPayloadErrorsHandler,
	},
}

// ResolveEventInput self descriptive
type ResolveEventInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// ID - Global ID of the event to resolve.
	ID string
	// Source - The source of the resolve request
	Source string
}

// ResolveEventInputType self descriptive
var ResolveEventInputType = graphql.NewType("ResolveEventInput", graphql.InputKind)

// RegisterResolveEventInput registers ResolveEventInput object type with given service.
func RegisterResolveEventInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeResolveEventInputDesc)
}
func _InputTypeResolveEventInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"id": &graphql1.InputObjectFieldConfig{
				Description: "Global ID of the event to resolve.",
				Type:        graphql1.NewNonNull(graphql1.ID),
			},
			"source": &graphql1.InputObjectFieldConfig{
				DefaultValue: "GraphQL",
				Description:  "The source of the resolve request",
				Type:         graphql1.String,
			},
		},
		Name: "ResolveEventInput",
	}
}

// describe ResolveEventInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeResolveEventInputDesc = graphql.InputDesc{Config: _InputTypeResolveEventInputConfigFn}

// ResolveEventPayloadClientMutationIDFieldResolver implement to resolve requests for the ResolveEventPayload's clientMutationId field.
type ResolveEventPayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// ResolveEventPayloadEventFieldResolver implement to resolve requests for the ResolveEventPayload's event field.
type ResolveEventPayloadEventFieldResolver interface {
	// Event implements response to request for event field.
	Event(p graphql.ResolveParams) (interface{}, error)
}

//
// ResolveEventPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'ResolveEventPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type ResolveEventPayloadFieldResolvers interface {
	ResolveEventPayloadClientMutationIDFieldResolver
	ResolveEventPayloadEventFieldResolver
}

// ResolveEventPayloadAliases implements all methods on ResolveEventPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type ResolveEventPayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ ResolveEventPayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'clientMutationId'")
	}
	return ret, err
}

// Event implements response to request for 'event' field.
func (_ ResolveEventPayloadAliases) Event(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ResolveEventPayloadType self descriptive
var ResolveEventPayloadType = graphql.NewType("ResolveEventPayload", graphql.ObjectKind)

// RegisterResolveEventPayload registers ResolveEventPayload object type with given service.
func RegisterResolveEventPayload(svc *graphql.Service, impl ResolveEventPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeResolveEventPayloadDesc, impl)
}
func _ObjTypeResolveEventPayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ResolveEventPayloadClientMutationIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(frp)
	}
}

func _ObjTypeResolveEventPayloadEventHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ResolveEventPayloadEventFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Event(frp)
	}
}

func _ObjectTypeResolveEventPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
			"event": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The event that was resolved.",
				Name:              "event",
				Type:              graphql1.NewNonNull(graphql.OutputType("Event")),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ResolveEventPayloadFieldResolvers.")
		},
		Name: "ResolveEventPayload",
	}
}

// describe ResolveEventPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeResolveEventPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeResolveEventPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"clientMutationId": _ObjTypeResolveEventPayloadClientMutationIDHandler,
		"event":            _ObjTypeResolveEventPayloadEventHandler,
	},
}

// CreateSilenceInput self descriptive
type CreateSilenceInput struct {
	// ClientMutationID - A unique identifier for the client performing the mutation.
	ClientMutationID string
	// Namespace - namespace the resulting resource will belong to.
	Namespace string
	// Check - check associated with the silenced entry; optional.
	Check string
	// Subscription - subscription associated with the silenced entry; optional.
	Subscription string
	// Props - properties of the silence
	Props *SilenceInputs
}

// CreateSilenceInputType self descriptive
var CreateSilenceInputType = graphql.NewType("CreateSilenceInput", graphql.InputKind)

// RegisterCreateSilenceInput registers CreateSilenceInput object type with given service.
func RegisterCreateSilenceInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeCreateSilenceInputDesc)
}
func _InputTypeCreateSilenceInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"check": &graphql1.InputObjectFieldConfig{
				Description: "check associated with the silenced entry; optional.",
				Type:        graphql1.String,
			},
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"namespace": &graphql1.InputObjectFieldConfig{
				DefaultValue: "default",
				Description:  "namespace the resulting resource will belong to.",
				Type:         graphql1.String,
			},
			"props": &graphql1.InputObjectFieldConfig{
				Description: "properties of the silence",
				Type:        graphql1.NewNonNull(graphql.InputType("SilenceInputs")),
			},
			"subscription": &graphql1.InputObjectFieldConfig{
				Description: "subscription associated with the silenced entry; optional.",
				Type:        graphql1.String,
			},
		},
		Name: "CreateSilenceInput",
	}
}

// describe CreateSilenceInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeCreateSilenceInputDesc = graphql.InputDesc{Config: _InputTypeCreateSilenceInputConfigFn}

// SilenceInputs self descriptive
type SilenceInputs struct {
	// Reason is used to provide context to the entry
	Reason string
	// Begin is a timestamp at which the silenced entry takes effect.
	Begin time.Time
	/*
	   ExpireOnResolve defaults to false, clears the entry on resolution when set
	   to true
	*/
	ExpireOnResolve bool
	// Expire is the number of seconds the entry will live
	Expire int
}

// SilenceInputsType self descriptive
var SilenceInputsType = graphql.NewType("SilenceInputs", graphql.InputKind)

// RegisterSilenceInputs registers SilenceInputs object type with given service.
func RegisterSilenceInputs(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeSilenceInputsDesc)
}
func _InputTypeSilenceInputsConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"begin": &graphql1.InputObjectFieldConfig{
				Description: "Begin is a timestamp at which the silenced entry takes effect.",
				Type:        graphql1.DateTime,
			},
			"expire": &graphql1.InputObjectFieldConfig{
				DefaultValue: -1,
				Description:  "Expire is the number of seconds the entry will live",
				Type:         graphql1.Int,
			},
			"expireOnResolve": &graphql1.InputObjectFieldConfig{
				DefaultValue: true,
				Description:  "ExpireOnResolve defaults to false, clears the entry on resolution when set\nto true",
				Type:         graphql1.Boolean,
			},
			"reason": &graphql1.InputObjectFieldConfig{
				Description: "Reason is used to provide context to the entry",
				Type:        graphql1.String,
			},
		},
		Name: "SilenceInputs",
	}
}

// describe SilenceInputs's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeSilenceInputsDesc = graphql.InputDesc{Config: _InputTypeSilenceInputsConfigFn}

// CreateSilencePayloadClientMutationIDFieldResolver implement to resolve requests for the CreateSilencePayload's clientMutationId field.
type CreateSilencePayloadClientMutationIDFieldResolver interface {
	// ClientMutationID implements response to request for clientMutationId field.
	ClientMutationID(p graphql.ResolveParams) (string, error)
}

// CreateSilencePayloadSilenceFieldResolver implement to resolve requests for the CreateSilencePayload's silence field.
type CreateSilencePayloadSilenceFieldResolver interface {
	// Silence implements response to request for silence field.
	Silence(p graphql.ResolveParams) (interface{}, error)
}

//
// CreateSilencePayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CreateSilencePayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CreateSilencePayloadFieldResolvers interface {
	CreateSilencePayloadClientMutationIDFieldResolver
	CreateSilencePayloadSilenceFieldResolver
}

// CreateSilencePayloadAliases implements all methods on CreateSilencePayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CreateSilencePayloadAliases struct{}

// ClientMutationID implements response to request for 'clientMutationId' field.
func (_ CreateSilencePayloadAliases) ClientMutationID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'clientMutationId'")
	}
	return ret, err
}

// Silence implements response to request for 'silence' field.
func (_ CreateSilencePayloadAliases) Silence(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CreateSilencePayloadType self descriptive
var CreateSilencePayloadType = graphql.NewType("CreateSilencePayload", graphql.ObjectKind)

// RegisterCreateSilencePayload registers CreateSilencePayload object type with given service.
func RegisterCreateSilencePayload(svc *graphql.Service, impl CreateSilencePayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCreateSilencePayloadDesc, impl)
}
func _ObjTypeCreateSilencePayloadClientMutationIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateSilencePayloadClientMutationIDFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ClientMutationID(frp)
	}
}

func _ObjTypeCreateSilencePayloadSilenceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateSilencePayloadSilenceFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Silence(frp)
	}
}

func _ObjectTypeCreateSilencePayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
			"silence": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The newly created silence.",
				Name:              "silence",
				Type:              graphql1.NewNonNull(graphql.OutputType("Silenced")),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CreateSilencePayloadFieldResolvers.")
		},
		Name: "CreateSilencePayload",
	}
}

// describe CreateSilencePayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCreateSilencePayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCreateSilencePayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"clientMutationId": _ObjTypeCreateSilencePayloadClientMutationIDHandler,
		"silence":          _ObjTypeCreateSilencePayloadSilenceHandler,
	},
}
