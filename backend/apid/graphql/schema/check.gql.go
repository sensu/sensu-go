// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	errors "errors"
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
	time "time"
)

//
// CheckConfigFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CheckConfig' type.
type CheckConfigFieldResolvers interface {
	// ID implements response to request for 'id' field.
	ID(p graphql.ResolveParams) (string, error)

	// Namespace implements response to request for 'namespace' field.
	Namespace(p graphql.ResolveParams) (string, error)

	// Name implements response to request for 'name' field.
	Name(p graphql.ResolveParams) (string, error)

	// Metadata implements response to request for 'metadata' field.
	Metadata(p graphql.ResolveParams) (interface{}, error)

	// Command implements response to request for 'command' field.
	Command(p graphql.ResolveParams) (string, error)

	// CheckHooks implements response to request for 'checkHooks' field.
	CheckHooks(p graphql.ResolveParams) (interface{}, error)

	// Cron implements response to request for 'cron' field.
	Cron(p graphql.ResolveParams) (string, error)

	// EnvVars implements response to request for 'envVars' field.
	EnvVars(p graphql.ResolveParams) ([]string, error)

	// Handlers implements response to request for 'handlers' field.
	Handlers(p graphql.ResolveParams) (interface{}, error)

	// HighFlapThreshold implements response to request for 'highFlapThreshold' field.
	HighFlapThreshold(p graphql.ResolveParams) (int, error)

	// Interval implements response to request for 'interval' field.
	Interval(p graphql.ResolveParams) (int, error)

	// LowFlapThreshold implements response to request for 'lowFlapThreshold' field.
	LowFlapThreshold(p graphql.ResolveParams) (int, error)

	// OutputMetricFormat implements response to request for 'outputMetricFormat' field.
	OutputMetricFormat(p graphql.ResolveParams) (string, error)

	// OutputMetricHandlers implements response to request for 'outputMetricHandlers' field.
	OutputMetricHandlers(p graphql.ResolveParams) (interface{}, error)

	// ProxyEntityName implements response to request for 'proxyEntityName' field.
	ProxyEntityName(p graphql.ResolveParams) (string, error)

	// ProxyRequests implements response to request for 'proxyRequests' field.
	ProxyRequests(p graphql.ResolveParams) (interface{}, error)

	// Publish implements response to request for 'publish' field.
	Publish(p graphql.ResolveParams) (bool, error)

	// RuntimeAssets implements response to request for 'runtimeAssets' field.
	RuntimeAssets(p graphql.ResolveParams) (interface{}, error)

	// RoundRobin implements response to request for 'roundRobin' field.
	RoundRobin(p graphql.ResolveParams) (bool, error)

	// IsSilenced implements response to request for 'isSilenced' field.
	IsSilenced(p graphql.ResolveParams) (bool, error)

	// Silences implements response to request for 'silences' field.
	Silences(p graphql.ResolveParams) (interface{}, error)

	// Stdin implements response to request for 'stdin' field.
	Stdin(p graphql.ResolveParams) (bool, error)

	// Subdue implements response to request for 'subdue' field.
	Subdue(p graphql.ResolveParams) (interface{}, error)

	// Subscriptions implements response to request for 'subscriptions' field.
	Subscriptions(p graphql.ResolveParams) ([]string, error)

	// Timeout implements response to request for 'timeout' field.
	Timeout(p graphql.ResolveParams) (int, error)

	// Ttl implements response to request for 'ttl' field.
	Ttl(p graphql.ResolveParams) (int, error)

	// ToJSON implements response to request for 'toJSON' field.
	ToJSON(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigAliases implements all methods on CheckConfigFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type CheckConfigAliases struct{}

// ID implements response to request for 'id' field.
func (_ CheckConfigAliases) ID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'id'")
	}
	return ret, err
}

// Namespace implements response to request for 'namespace' field.
func (_ CheckConfigAliases) Namespace(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'namespace'")
	}
	return ret, err
}

// Name implements response to request for 'name' field.
func (_ CheckConfigAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'name'")
	}
	return ret, err
}

// Metadata implements response to request for 'metadata' field.
func (_ CheckConfigAliases) Metadata(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Command implements response to request for 'command' field.
func (_ CheckConfigAliases) Command(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'command'")
	}
	return ret, err
}

// CheckHooks implements response to request for 'checkHooks' field.
func (_ CheckConfigAliases) CheckHooks(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Cron implements response to request for 'cron' field.
func (_ CheckConfigAliases) Cron(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'cron'")
	}
	return ret, err
}

// EnvVars implements response to request for 'envVars' field.
func (_ CheckConfigAliases) EnvVars(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'envVars'")
	}
	return ret, err
}

// Handlers implements response to request for 'handlers' field.
func (_ CheckConfigAliases) Handlers(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// HighFlapThreshold implements response to request for 'highFlapThreshold' field.
func (_ CheckConfigAliases) HighFlapThreshold(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'highFlapThreshold'")
	}
	return ret, err
}

// Interval implements response to request for 'interval' field.
func (_ CheckConfigAliases) Interval(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'interval'")
	}
	return ret, err
}

// LowFlapThreshold implements response to request for 'lowFlapThreshold' field.
func (_ CheckConfigAliases) LowFlapThreshold(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'lowFlapThreshold'")
	}
	return ret, err
}

// OutputMetricFormat implements response to request for 'outputMetricFormat' field.
func (_ CheckConfigAliases) OutputMetricFormat(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'outputMetricFormat'")
	}
	return ret, err
}

// OutputMetricHandlers implements response to request for 'outputMetricHandlers' field.
func (_ CheckConfigAliases) OutputMetricHandlers(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ProxyEntityName implements response to request for 'proxyEntityName' field.
func (_ CheckConfigAliases) ProxyEntityName(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'proxyEntityName'")
	}
	return ret, err
}

// ProxyRequests implements response to request for 'proxyRequests' field.
func (_ CheckConfigAliases) ProxyRequests(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Publish implements response to request for 'publish' field.
func (_ CheckConfigAliases) Publish(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'publish'")
	}
	return ret, err
}

// RuntimeAssets implements response to request for 'runtimeAssets' field.
func (_ CheckConfigAliases) RuntimeAssets(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// RoundRobin implements response to request for 'roundRobin' field.
func (_ CheckConfigAliases) RoundRobin(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'roundRobin'")
	}
	return ret, err
}

// IsSilenced implements response to request for 'isSilenced' field.
func (_ CheckConfigAliases) IsSilenced(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'isSilenced'")
	}
	return ret, err
}

// Silences implements response to request for 'silences' field.
func (_ CheckConfigAliases) Silences(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Stdin implements response to request for 'stdin' field.
func (_ CheckConfigAliases) Stdin(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'stdin'")
	}
	return ret, err
}

// Subdue implements response to request for 'subdue' field.
func (_ CheckConfigAliases) Subdue(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Subscriptions implements response to request for 'subscriptions' field.
func (_ CheckConfigAliases) Subscriptions(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'subscriptions'")
	}
	return ret, err
}

// Timeout implements response to request for 'timeout' field.
func (_ CheckConfigAliases) Timeout(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'timeout'")
	}
	return ret, err
}

// Ttl implements response to request for 'ttl' field.
func (_ CheckConfigAliases) Ttl(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'ttl'")
	}
	return ret, err
}

// ToJSON implements response to request for 'toJSON' field.
func (_ CheckConfigAliases) ToJSON(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CheckConfigType CheckConfig is the specification of a check.
var CheckConfigType = graphql.NewType("CheckConfig", graphql.ObjectKind)

// RegisterCheckConfig registers CheckConfig object type with given service.
func RegisterCheckConfig(svc *graphql.Service, impl CheckConfigFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCheckConfigDesc, impl)
}
func _ObjTypeCheckConfigIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ID(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ID(frp)
	}
}

func _ObjTypeCheckConfigNamespaceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Namespace(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Namespace(frp)
	}
}

func _ObjTypeCheckConfigNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Name(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(frp)
	}
}

func _ObjTypeCheckConfigMetadataHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Metadata(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Metadata(frp)
	}
}

func _ObjTypeCheckConfigCommandHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Command(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Command(frp)
	}
}

func _ObjTypeCheckConfigCheckHooksHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		CheckHooks(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.CheckHooks(frp)
	}
}

func _ObjTypeCheckConfigCronHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Cron(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Cron(frp)
	}
}

func _ObjTypeCheckConfigEnvVarsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		EnvVars(p graphql.ResolveParams) ([]string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.EnvVars(frp)
	}
}

func _ObjTypeCheckConfigHandlersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Handlers(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Handlers(frp)
	}
}

func _ObjTypeCheckConfigHighFlapThresholdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		HighFlapThreshold(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.HighFlapThreshold(frp)
	}
}

func _ObjTypeCheckConfigIntervalHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Interval(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Interval(frp)
	}
}

func _ObjTypeCheckConfigLowFlapThresholdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		LowFlapThreshold(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.LowFlapThreshold(frp)
	}
}

func _ObjTypeCheckConfigOutputMetricFormatHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		OutputMetricFormat(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.OutputMetricFormat(frp)
	}
}

func _ObjTypeCheckConfigOutputMetricHandlersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		OutputMetricHandlers(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.OutputMetricHandlers(frp)
	}
}

func _ObjTypeCheckConfigProxyEntityNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ProxyEntityName(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ProxyEntityName(frp)
	}
}

func _ObjTypeCheckConfigProxyRequestsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ProxyRequests(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ProxyRequests(frp)
	}
}

func _ObjTypeCheckConfigPublishHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Publish(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Publish(frp)
	}
}

func _ObjTypeCheckConfigRuntimeAssetsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		RuntimeAssets(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.RuntimeAssets(frp)
	}
}

func _ObjTypeCheckConfigRoundRobinHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		RoundRobin(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.RoundRobin(frp)
	}
}

func _ObjTypeCheckConfigIsSilencedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		IsSilenced(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.IsSilenced(frp)
	}
}

func _ObjTypeCheckConfigSilencesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Silences(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Silences(frp)
	}
}

func _ObjTypeCheckConfigStdinHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Stdin(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Stdin(frp)
	}
}

func _ObjTypeCheckConfigSubdueHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Subdue(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Subdue(frp)
	}
}

func _ObjTypeCheckConfigSubscriptionsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Subscriptions(p graphql.ResolveParams) ([]string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Subscriptions(frp)
	}
}

func _ObjTypeCheckConfigTimeoutHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Timeout(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Timeout(frp)
	}
}

func _ObjTypeCheckConfigTtlHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Ttl(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Ttl(frp)
	}
}

func _ObjTypeCheckConfigToJSONHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToJSON(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToJSON(frp)
	}
}

func _ObjectTypeCheckConfigConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "CheckConfig is the specification of a check.",
		Fields: graphql1.Fields{
			"checkHooks": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "CheckHooks is the configured list of check hooks for the check",
				Name:              "checkHooks",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("HookList")))),
			},
			"command": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "command is the command to be executed.",
				Name:              "command",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"cron": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Cron is the cron string at which the check should be run.",
				Name:              "cron",
				Type:              graphql1.String,
			},
			"envVars": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "EnvVars is the list of environment variables to set for the check's\nexecution environment.",
				Name:              "envVars",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql1.String))),
			},
			"handlers": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "handlers are the event handler for the check (incidents and/or metrics).",
				Name:              "handlers",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Handler"))),
			},
			"highFlapThreshold": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "HighFlapThreshold is the flap detection high threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "highFlapThreshold",
				Type:              graphql1.Int,
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The globally unique identifier of the check.",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"interval": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Interval is the interval, in seconds, at which the check should be run.",
				Name:              "interval",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"isSilenced": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "isSilenced return true if the entity has any silences associated with it.",
				Name:              "isSilenced",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"lowFlapThreshold": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "LowFlapThreshold is the flap detection low threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "lowFlapThreshold",
				Type:              graphql1.Int,
			},
			"metadata": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "metadata contains name, namespace, labels and annotations of the record",
				Name:              "metadata",
				Type:              graphql.OutputType("ObjectMeta"),
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "use metadata",
				Description:       "name is the unique identifier for a check",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"namespace": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "use metadata",
				Description:       "namespace in which this check resides",
				Name:              "namespace",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"outputMetricFormat": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "OutputOutputMetricFormat is the metric protocol that the check's output will be\nexpected to follow in order to be extracted.",
				Name:              "outputMetricFormat",
				Type:              graphql1.String,
			},
			"outputMetricHandlers": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "OutputOutputMetricHandlers is the list of event handlers that will respond to metrics\nthat have been extracted from the check.",
				Name:              "outputMetricHandlers",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Handler"))),
			},
			"proxyEntityName": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "proxyEntityName indicates the name of the entity representing an external resource",
				Name:              "proxyEntityName",
				Type:              graphql1.String,
			},
			"proxyRequests": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "proxyRequests represents a request to execute a proxy check.",
				Name:              "proxyRequests",
				Type:              graphql.OutputType("ProxyRequests"),
			},
			"publish": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Publish indicates if check requests are published for the check",
				Name:              "publish",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"roundRobin": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "RoundRobin enables round-robin scheduling if set true.",
				Name:              "roundRobin",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"runtimeAssets": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "RuntimeAssets are a list of assets required to execute check.",
				Name:              "runtimeAssets",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Asset"))),
			},
			"silences": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "All silences matching the entity's subscriptions and where the silence\nmatches all checks.",
				Name:              "silences",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("Silenced")))),
			},
			"stdin": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "STDIN indicates if the check command accepts JSON via stdin from the agent",
				Name:              "stdin",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"subdue": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Subdue represents one or more time windows when the check should be subdued.",
				Name:              "subdue",
				Type:              graphql.OutputType("TimeWindowWhen"),
			},
			"subscriptions": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Subscriptions is the list of subscribers for the check.",
				Name:              "subscriptions",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.String)),
			},
			"timeout": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Timeout is the timeout, in seconds, at which the check has to run.",
				Name:              "timeout",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"toJSON": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "toJSON returns a REST API compatible representation of the resource. Handy for\nsharing snippets that can then be imported with `sensuctl create`.",
				Name:              "toJSON",
				Type:              graphql1.NewNonNull(graphql.OutputType("JSON")),
			},
			"ttl": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "TTL represents the length of time in seconds for which a check result is valid.",
				Name:              "ttl",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Node"),
			graphql.Interface("Namespaced"),
			graphql.Interface("Silenceable"),
			graphql.Interface("Resource")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckConfigFieldResolvers.")
		},
		Name: "CheckConfig",
	}
}

// describe CheckConfig's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCheckConfigDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCheckConfigConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"checkHooks":           _ObjTypeCheckConfigCheckHooksHandler,
		"command":              _ObjTypeCheckConfigCommandHandler,
		"cron":                 _ObjTypeCheckConfigCronHandler,
		"envVars":              _ObjTypeCheckConfigEnvVarsHandler,
		"handlers":             _ObjTypeCheckConfigHandlersHandler,
		"highFlapThreshold":    _ObjTypeCheckConfigHighFlapThresholdHandler,
		"id":                   _ObjTypeCheckConfigIDHandler,
		"interval":             _ObjTypeCheckConfigIntervalHandler,
		"isSilenced":           _ObjTypeCheckConfigIsSilencedHandler,
		"lowFlapThreshold":     _ObjTypeCheckConfigLowFlapThresholdHandler,
		"metadata":             _ObjTypeCheckConfigMetadataHandler,
		"name":                 _ObjTypeCheckConfigNameHandler,
		"namespace":            _ObjTypeCheckConfigNamespaceHandler,
		"outputMetricFormat":   _ObjTypeCheckConfigOutputMetricFormatHandler,
		"outputMetricHandlers": _ObjTypeCheckConfigOutputMetricHandlersHandler,
		"proxyEntityName":      _ObjTypeCheckConfigProxyEntityNameHandler,
		"proxyRequests":        _ObjTypeCheckConfigProxyRequestsHandler,
		"publish":              _ObjTypeCheckConfigPublishHandler,
		"roundRobin":           _ObjTypeCheckConfigRoundRobinHandler,
		"runtimeAssets":        _ObjTypeCheckConfigRuntimeAssetsHandler,
		"silences":             _ObjTypeCheckConfigSilencesHandler,
		"stdin":                _ObjTypeCheckConfigStdinHandler,
		"subdue":               _ObjTypeCheckConfigSubdueHandler,
		"subscriptions":        _ObjTypeCheckConfigSubscriptionsHandler,
		"timeout":              _ObjTypeCheckConfigTimeoutHandler,
		"toJSON":               _ObjTypeCheckConfigToJSONHandler,
		"ttl":                  _ObjTypeCheckConfigTtlHandler,
	},
}

// CheckHistoryFieldResolverArgs contains arguments provided to history when selected
type CheckHistoryFieldResolverArgs struct {
	First int // First - self descriptive
}

// CheckHistoryFieldResolverParams contains contextual info to resolve history field
type CheckHistoryFieldResolverParams struct {
	graphql.ResolveParams
	Args CheckHistoryFieldResolverArgs
}

// CheckOutputFieldResolverArgs contains arguments provided to output when selected
type CheckOutputFieldResolverArgs struct {
	First int // First - self descriptive
	Last  int // Last - self descriptive
}

// CheckOutputFieldResolverParams contains contextual info to resolve output field
type CheckOutputFieldResolverParams struct {
	graphql.ResolveParams
	Args CheckOutputFieldResolverArgs
}

//
// CheckFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Check' type.
type CheckFieldResolvers interface {
	// NodeID implements response to request for 'nodeId' field.
	NodeID(p graphql.ResolveParams) (string, error)

	// Name implements response to request for 'name' field.
	Name(p graphql.ResolveParams) (string, error)

	// Metadata implements response to request for 'metadata' field.
	Metadata(p graphql.ResolveParams) (interface{}, error)

	// Command implements response to request for 'command' field.
	Command(p graphql.ResolveParams) (string, error)

	// CheckHooks implements response to request for 'checkHooks' field.
	CheckHooks(p graphql.ResolveParams) (interface{}, error)

	// EnvVars implements response to request for 'envVars' field.
	EnvVars(p graphql.ResolveParams) ([]string, error)

	// Handlers implements response to request for 'handlers' field.
	Handlers(p graphql.ResolveParams) (interface{}, error)

	// HighFlapThreshold implements response to request for 'highFlapThreshold' field.
	HighFlapThreshold(p graphql.ResolveParams) (int, error)

	// Interval implements response to request for 'interval' field.
	Interval(p graphql.ResolveParams) (int, error)

	// Cron implements response to request for 'cron' field.
	Cron(p graphql.ResolveParams) (string, error)

	// LowFlapThreshold implements response to request for 'lowFlapThreshold' field.
	LowFlapThreshold(p graphql.ResolveParams) (int, error)

	// OutputMetricFormat implements response to request for 'outputMetricFormat' field.
	OutputMetricFormat(p graphql.ResolveParams) (string, error)

	// OutputMetricHandlers implements response to request for 'outputMetricHandlers' field.
	OutputMetricHandlers(p graphql.ResolveParams) (interface{}, error)

	// ProxyEntityName implements response to request for 'proxyEntityName' field.
	ProxyEntityName(p graphql.ResolveParams) (string, error)

	// ProxyRequests implements response to request for 'proxyRequests' field.
	ProxyRequests(p graphql.ResolveParams) (interface{}, error)

	// Publish implements response to request for 'publish' field.
	Publish(p graphql.ResolveParams) (bool, error)

	// RuntimeAssets implements response to request for 'runtimeAssets' field.
	RuntimeAssets(p graphql.ResolveParams) (interface{}, error)

	// RoundRobin implements response to request for 'roundRobin' field.
	RoundRobin(p graphql.ResolveParams) (bool, error)

	// Subscriptions implements response to request for 'subscriptions' field.
	Subscriptions(p graphql.ResolveParams) ([]string, error)

	// Stdin implements response to request for 'stdin' field.
	Stdin(p graphql.ResolveParams) (bool, error)

	// Subdue implements response to request for 'subdue' field.
	Subdue(p graphql.ResolveParams) (interface{}, error)

	// Duration implements response to request for 'duration' field.
	Duration(p graphql.ResolveParams) (float64, error)

	// Executed implements response to request for 'executed' field.
	Executed(p graphql.ResolveParams) (time.Time, error)

	// History implements response to request for 'history' field.
	History(p CheckHistoryFieldResolverParams) (interface{}, error)

	// Issued implements response to request for 'issued' field.
	Issued(p graphql.ResolveParams) (time.Time, error)

	// Output implements response to request for 'output' field.
	Output(p CheckOutputFieldResolverParams) (string, error)

	// State implements response to request for 'state' field.
	State(p graphql.ResolveParams) (string, error)

	// Status implements response to request for 'status' field.
	Status(p graphql.ResolveParams) (interface{}, error)

	// TotalStateChange implements response to request for 'totalStateChange' field.
	TotalStateChange(p graphql.ResolveParams) (int, error)

	// Hooks implements response to request for 'hooks' field.
	Hooks(p graphql.ResolveParams) (interface{}, error)

	// Silenced implements response to request for 'silenced' field.
	Silenced(p graphql.ResolveParams) ([]string, error)

	// IsSilenced implements response to request for 'isSilenced' field.
	IsSilenced(p graphql.ResolveParams) (bool, error)

	// Silences implements response to request for 'silences' field.
	Silences(p graphql.ResolveParams) (interface{}, error)

	// LastOK implements response to request for 'lastOK' field.
	LastOK(p graphql.ResolveParams) (*time.Time, error)

	// Occurrences implements response to request for 'occurrences' field.
	Occurrences(p graphql.ResolveParams) (int, error)

	// OccurrencesWatermark implements response to request for 'occurrencesWatermark' field.
	OccurrencesWatermark(p graphql.ResolveParams) (int, error)

	// Timeout implements response to request for 'timeout' field.
	Timeout(p graphql.ResolveParams) (int, error)

	// Ttl implements response to request for 'ttl' field.
	Ttl(p graphql.ResolveParams) (int, error)

	// ToJSON implements response to request for 'toJSON' field.
	ToJSON(p graphql.ResolveParams) (interface{}, error)
}

// CheckAliases implements all methods on CheckFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type CheckAliases struct{}

// NodeID implements response to request for 'nodeId' field.
func (_ CheckAliases) NodeID(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'nodeId'")
	}
	return ret, err
}

// Name implements response to request for 'name' field.
func (_ CheckAliases) Name(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'name'")
	}
	return ret, err
}

// Metadata implements response to request for 'metadata' field.
func (_ CheckAliases) Metadata(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Command implements response to request for 'command' field.
func (_ CheckAliases) Command(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'command'")
	}
	return ret, err
}

// CheckHooks implements response to request for 'checkHooks' field.
func (_ CheckAliases) CheckHooks(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// EnvVars implements response to request for 'envVars' field.
func (_ CheckAliases) EnvVars(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'envVars'")
	}
	return ret, err
}

// Handlers implements response to request for 'handlers' field.
func (_ CheckAliases) Handlers(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// HighFlapThreshold implements response to request for 'highFlapThreshold' field.
func (_ CheckAliases) HighFlapThreshold(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'highFlapThreshold'")
	}
	return ret, err
}

// Interval implements response to request for 'interval' field.
func (_ CheckAliases) Interval(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'interval'")
	}
	return ret, err
}

// Cron implements response to request for 'cron' field.
func (_ CheckAliases) Cron(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'cron'")
	}
	return ret, err
}

// LowFlapThreshold implements response to request for 'lowFlapThreshold' field.
func (_ CheckAliases) LowFlapThreshold(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'lowFlapThreshold'")
	}
	return ret, err
}

// OutputMetricFormat implements response to request for 'outputMetricFormat' field.
func (_ CheckAliases) OutputMetricFormat(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'outputMetricFormat'")
	}
	return ret, err
}

// OutputMetricHandlers implements response to request for 'outputMetricHandlers' field.
func (_ CheckAliases) OutputMetricHandlers(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ProxyEntityName implements response to request for 'proxyEntityName' field.
func (_ CheckAliases) ProxyEntityName(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'proxyEntityName'")
	}
	return ret, err
}

// ProxyRequests implements response to request for 'proxyRequests' field.
func (_ CheckAliases) ProxyRequests(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Publish implements response to request for 'publish' field.
func (_ CheckAliases) Publish(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'publish'")
	}
	return ret, err
}

// RuntimeAssets implements response to request for 'runtimeAssets' field.
func (_ CheckAliases) RuntimeAssets(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// RoundRobin implements response to request for 'roundRobin' field.
func (_ CheckAliases) RoundRobin(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'roundRobin'")
	}
	return ret, err
}

// Subscriptions implements response to request for 'subscriptions' field.
func (_ CheckAliases) Subscriptions(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'subscriptions'")
	}
	return ret, err
}

// Stdin implements response to request for 'stdin' field.
func (_ CheckAliases) Stdin(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'stdin'")
	}
	return ret, err
}

// Subdue implements response to request for 'subdue' field.
func (_ CheckAliases) Subdue(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Duration implements response to request for 'duration' field.
func (_ CheckAliases) Duration(p graphql.ResolveParams) (float64, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Float.ParseValue(val).(float64)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'duration'")
	}
	return ret, err
}

// Executed implements response to request for 'executed' field.
func (_ CheckAliases) Executed(p graphql.ResolveParams) (time.Time, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(time.Time)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'executed'")
	}
	return ret, err
}

// History implements response to request for 'history' field.
func (_ CheckAliases) History(p CheckHistoryFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Issued implements response to request for 'issued' field.
func (_ CheckAliases) Issued(p graphql.ResolveParams) (time.Time, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(time.Time)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'issued'")
	}
	return ret, err
}

// Output implements response to request for 'output' field.
func (_ CheckAliases) Output(p CheckOutputFieldResolverParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'output'")
	}
	return ret, err
}

// State implements response to request for 'state' field.
func (_ CheckAliases) State(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'state'")
	}
	return ret, err
}

// Status implements response to request for 'status' field.
func (_ CheckAliases) Status(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// TotalStateChange implements response to request for 'totalStateChange' field.
func (_ CheckAliases) TotalStateChange(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'totalStateChange'")
	}
	return ret, err
}

// Hooks implements response to request for 'hooks' field.
func (_ CheckAliases) Hooks(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Silenced implements response to request for 'silenced' field.
func (_ CheckAliases) Silenced(p graphql.ResolveParams) ([]string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.([]string)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'silenced'")
	}
	return ret, err
}

// IsSilenced implements response to request for 'isSilenced' field.
func (_ CheckAliases) IsSilenced(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'isSilenced'")
	}
	return ret, err
}

// Silences implements response to request for 'silences' field.
func (_ CheckAliases) Silences(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// LastOK implements response to request for 'lastOK' field.
func (_ CheckAliases) LastOK(p graphql.ResolveParams) (*time.Time, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(*time.Time)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'lastOK'")
	}
	return ret, err
}

// Occurrences implements response to request for 'occurrences' field.
func (_ CheckAliases) Occurrences(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'occurrences'")
	}
	return ret, err
}

// OccurrencesWatermark implements response to request for 'occurrencesWatermark' field.
func (_ CheckAliases) OccurrencesWatermark(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'occurrencesWatermark'")
	}
	return ret, err
}

// Timeout implements response to request for 'timeout' field.
func (_ CheckAliases) Timeout(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'timeout'")
	}
	return ret, err
}

// Ttl implements response to request for 'ttl' field.
func (_ CheckAliases) Ttl(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'ttl'")
	}
	return ret, err
}

// ToJSON implements response to request for 'toJSON' field.
func (_ CheckAliases) ToJSON(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

/*
CheckType A Check is a check specification and optionally the results of the check's
execution.
*/
var CheckType = graphql.NewType("Check", graphql.ObjectKind)

// RegisterCheck registers Check object type with given service.
func RegisterCheck(svc *graphql.Service, impl CheckFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCheckDesc, impl)
}
func _ObjTypeCheckNodeIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		NodeID(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.NodeID(frp)
	}
}

func _ObjTypeCheckNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Name(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Name(frp)
	}
}

func _ObjTypeCheckMetadataHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Metadata(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Metadata(frp)
	}
}

func _ObjTypeCheckCommandHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Command(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Command(frp)
	}
}

func _ObjTypeCheckCheckHooksHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		CheckHooks(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.CheckHooks(frp)
	}
}

func _ObjTypeCheckEnvVarsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		EnvVars(p graphql.ResolveParams) ([]string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.EnvVars(frp)
	}
}

func _ObjTypeCheckHandlersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Handlers(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Handlers(frp)
	}
}

func _ObjTypeCheckHighFlapThresholdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		HighFlapThreshold(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.HighFlapThreshold(frp)
	}
}

func _ObjTypeCheckIntervalHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Interval(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Interval(frp)
	}
}

func _ObjTypeCheckCronHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Cron(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Cron(frp)
	}
}

func _ObjTypeCheckLowFlapThresholdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		LowFlapThreshold(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.LowFlapThreshold(frp)
	}
}

func _ObjTypeCheckOutputMetricFormatHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		OutputMetricFormat(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.OutputMetricFormat(frp)
	}
}

func _ObjTypeCheckOutputMetricHandlersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		OutputMetricHandlers(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.OutputMetricHandlers(frp)
	}
}

func _ObjTypeCheckProxyEntityNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ProxyEntityName(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ProxyEntityName(frp)
	}
}

func _ObjTypeCheckProxyRequestsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ProxyRequests(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ProxyRequests(frp)
	}
}

func _ObjTypeCheckPublishHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Publish(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Publish(frp)
	}
}

func _ObjTypeCheckRuntimeAssetsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		RuntimeAssets(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.RuntimeAssets(frp)
	}
}

func _ObjTypeCheckRoundRobinHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		RoundRobin(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.RoundRobin(frp)
	}
}

func _ObjTypeCheckSubscriptionsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Subscriptions(p graphql.ResolveParams) ([]string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Subscriptions(frp)
	}
}

func _ObjTypeCheckStdinHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Stdin(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Stdin(frp)
	}
}

func _ObjTypeCheckSubdueHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Subdue(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Subdue(frp)
	}
}

func _ObjTypeCheckDurationHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Duration(p graphql.ResolveParams) (float64, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Duration(frp)
	}
}

func _ObjTypeCheckExecutedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Executed(p graphql.ResolveParams) (time.Time, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Executed(frp)
	}
}

func _ObjTypeCheckHistoryHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		History(p CheckHistoryFieldResolverParams) (interface{}, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := CheckHistoryFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.History(frp)
	}
}

func _ObjTypeCheckIssuedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Issued(p graphql.ResolveParams) (time.Time, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Issued(frp)
	}
}

func _ObjTypeCheckOutputHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Output(p CheckOutputFieldResolverParams) (string, error)
	})
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := CheckOutputFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.Output(frp)
	}
}

func _ObjTypeCheckStateHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		State(p graphql.ResolveParams) (string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.State(frp)
	}
}

func _ObjTypeCheckStatusHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Status(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Status(frp)
	}
}

func _ObjTypeCheckTotalStateChangeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		TotalStateChange(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.TotalStateChange(frp)
	}
}

func _ObjTypeCheckHooksHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Hooks(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Hooks(frp)
	}
}

func _ObjTypeCheckSilencedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Silenced(p graphql.ResolveParams) ([]string, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Silenced(frp)
	}
}

func _ObjTypeCheckIsSilencedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		IsSilenced(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.IsSilenced(frp)
	}
}

func _ObjTypeCheckSilencesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Silences(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Silences(frp)
	}
}

func _ObjTypeCheckLastOKHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		LastOK(p graphql.ResolveParams) (*time.Time, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.LastOK(frp)
	}
}

func _ObjTypeCheckOccurrencesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Occurrences(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Occurrences(frp)
	}
}

func _ObjTypeCheckOccurrencesWatermarkHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		OccurrencesWatermark(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.OccurrencesWatermark(frp)
	}
}

func _ObjTypeCheckTimeoutHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Timeout(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Timeout(frp)
	}
}

func _ObjTypeCheckTtlHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Ttl(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Ttl(frp)
	}
}

func _ObjTypeCheckToJSONHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		ToJSON(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.ToJSON(frp)
	}
}

func _ObjectTypeCheckConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A Check is a check specification and optionally the results of the check's\nexecution.",
		Fields: graphql1.Fields{
			"checkHooks": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "CheckHooks is the list of check hooks for the check",
				Name:              "checkHooks",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("HookList")))),
			},
			"command": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "command is the command to be executed.",
				Name:              "command",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"cron": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Cron is the cron string at which the check should be run.",
				Name:              "cron",
				Type:              graphql1.String,
			},
			"duration": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Duration of execution",
				Name:              "duration",
				Type:              graphql1.Float,
			},
			"envVars": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "envVars is the list of environment variables to set for the check's\nexecution environment.",
				Name:              "envVars",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql1.String))),
			},
			"executed": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Executed describes the time in which the check request was executed",
				Name:              "executed",
				Type:              graphql1.NewNonNull(graphql1.DateTime),
			},
			"handlers": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "handlers are the event handler for the check (incidents and/or metrics).",
				Name:              "handlers",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Handler"))),
			},
			"highFlapThreshold": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "HighFlapThreshold is the flap detection high threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "highFlapThreshold",
				Type:              graphql1.Int,
			},
			"history": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{"first": &graphql1.ArgumentConfig{
					DefaultValue: 21,
					Description:  "self descriptive",
					Type:         graphql1.Int,
				}},
				DeprecationReason: "",
				Description:       "History is the check state history.",
				Name:              "history",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("CheckHistory"))),
			},
			"hooks": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Hooks describes the results of multiple hooks; if event is associated to hook\nexecution.",
				Name:              "hooks",
				Type:              graphql1.NewList(graphql.OutputType("Hook")),
			},
			"interval": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Interval is the interval, in seconds, at which the check should be run.",
				Name:              "interval",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"isSilenced": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "isSilenced return true if the entity has any silences associated with it.",
				Name:              "isSilenced",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"issued": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Issued describes the time in which the check request was issued",
				Name:              "issued",
				Type:              graphql1.NewNonNull(graphql1.DateTime),
			},
			"lastOK": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "LastOK displays last time this check's status was set to zero.",
				Name:              "lastOK",
				Type:              graphql1.DateTime,
			},
			"lowFlapThreshold": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "LowFlapThreshold is the flap detection low threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "lowFlapThreshold",
				Type:              graphql1.Int,
			},
			"metadata": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "metadata contains name, namespace, labels and annotations of the record",
				Name:              "metadata",
				Type:              graphql.OutputType("ObjectMeta"),
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "use metadata",
				Description:       "name is the unique identifier for a check",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"nodeId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "id of the check's configuration",
				Name:              "nodeId",
				Type:              graphql1.NewNonNull(graphql1.ID),
			},
			"occurrences": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Occurrences indicates the number of times an event has occurred for a\nclient/check pair with the same check status.",
				Name:              "occurrences",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"occurrencesWatermark": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "OccurrencesWatermark indicates the high water mark tracking number of\noccurrences at the current severity.",
				Name:              "occurrencesWatermark",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"output": &graphql1.Field{
				Args: graphql1.FieldConfigArgument{
					"first": &graphql1.ArgumentConfig{
						Description: "self descriptive",
						Type:        graphql1.Int,
					},
					"last": &graphql1.ArgumentConfig{
						Description: "self descriptive",
						Type:        graphql1.Int,
					},
				},
				DeprecationReason: "",
				Description:       "Output from the execution of Command",
				Name:              "output",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"outputMetricFormat": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "OutputOutputMetricFormat is the metric protocol that the check's output will be\nexpected to follow in order to be extracted.",
				Name:              "outputMetricFormat",
				Type:              graphql1.String,
			},
			"outputMetricHandlers": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "OutputOutputMetricHandlers is the list of event handlers that will respond to metrics\nthat have been extracted from the check.",
				Name:              "outputMetricHandlers",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Handler"))),
			},
			"proxyEntityName": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "proxyEntityName indicates the name of the entity representing an external resource",
				Name:              "proxyEntityName",
				Type:              graphql1.String,
			},
			"proxyRequests": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "proxyRequests represents a request to execute a proxy check.",
				Name:              "proxyRequests",
				Type:              graphql.OutputType("ProxyRequests"),
			},
			"publish": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Publish indicates if check requests are published for the check",
				Name:              "publish",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"roundRobin": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "RoundRobin enables round-robin scheduling if set true.",
				Name:              "roundRobin",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"runtimeAssets": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "RuntimeAssets are a list of assets required to execute check.",
				Name:              "runtimeAssets",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Asset"))),
			},
			"silenced": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Silenced is a list of silenced entry ids (subscription and check name)",
				Name:              "silenced",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.String)),
			},
			"silences": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "All silences matching the entity's subscriptions and where the silence\nmatches all checks.",
				Name:              "silences",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("Silenced")))),
			},
			"state": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "State provides handlers with more information about the state change",
				Name:              "state",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"status": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Status is the exit status code produced by the check",
				Name:              "status",
				Type:              graphql1.NewNonNull(graphql.OutputType("Uint")),
			},
			"stdin": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "STDIN indicates if the check command accepts JSON via stdin from the agent",
				Name:              "stdin",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"subdue": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Subdue represents one or more time windows when the check should be subdued.",
				Name:              "subdue",
				Type:              graphql.OutputType("TimeWindowWhen"),
			},
			"subscriptions": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Subscriptions is the list of subscribers for the check.",
				Name:              "subscriptions",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.String)),
			},
			"timeout": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Timeout is the timeout, in seconds, at which the check has to run.",
				Name:              "timeout",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"toJSON": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "toJSON returns a REST API compatible representation of the resource. Handy for\nsharing snippets that can then be imported with `sensuctl create`.",
				Name:              "toJSON",
				Type:              graphql1.NewNonNull(graphql.OutputType("JSON")),
			},
			"totalStateChange": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "TotalStateChange indicates the total state change percentage for the\ncheck's history",
				Name:              "totalStateChange",
				Type:              graphql1.Int,
			},
			"ttl": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "TTL represents the length of time in seconds for which a check result is valid.",
				Name:              "ttl",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
		},
		Interfaces: []*graphql1.Interface{
			graphql.Interface("Silenceable"),
			graphql.Interface("Resource")},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckFieldResolvers.")
		},
		Name: "Check",
	}
}

// describe Check's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCheckDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCheckConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"checkHooks":           _ObjTypeCheckCheckHooksHandler,
		"command":              _ObjTypeCheckCommandHandler,
		"cron":                 _ObjTypeCheckCronHandler,
		"duration":             _ObjTypeCheckDurationHandler,
		"envVars":              _ObjTypeCheckEnvVarsHandler,
		"executed":             _ObjTypeCheckExecutedHandler,
		"handlers":             _ObjTypeCheckHandlersHandler,
		"highFlapThreshold":    _ObjTypeCheckHighFlapThresholdHandler,
		"history":              _ObjTypeCheckHistoryHandler,
		"hooks":                _ObjTypeCheckHooksHandler,
		"interval":             _ObjTypeCheckIntervalHandler,
		"isSilenced":           _ObjTypeCheckIsSilencedHandler,
		"issued":               _ObjTypeCheckIssuedHandler,
		"lastOK":               _ObjTypeCheckLastOKHandler,
		"lowFlapThreshold":     _ObjTypeCheckLowFlapThresholdHandler,
		"metadata":             _ObjTypeCheckMetadataHandler,
		"name":                 _ObjTypeCheckNameHandler,
		"nodeId":               _ObjTypeCheckNodeIDHandler,
		"occurrences":          _ObjTypeCheckOccurrencesHandler,
		"occurrencesWatermark": _ObjTypeCheckOccurrencesWatermarkHandler,
		"output":               _ObjTypeCheckOutputHandler,
		"outputMetricFormat":   _ObjTypeCheckOutputMetricFormatHandler,
		"outputMetricHandlers": _ObjTypeCheckOutputMetricHandlersHandler,
		"proxyEntityName":      _ObjTypeCheckProxyEntityNameHandler,
		"proxyRequests":        _ObjTypeCheckProxyRequestsHandler,
		"publish":              _ObjTypeCheckPublishHandler,
		"roundRobin":           _ObjTypeCheckRoundRobinHandler,
		"runtimeAssets":        _ObjTypeCheckRuntimeAssetsHandler,
		"silenced":             _ObjTypeCheckSilencedHandler,
		"silences":             _ObjTypeCheckSilencesHandler,
		"state":                _ObjTypeCheckStateHandler,
		"status":               _ObjTypeCheckStatusHandler,
		"stdin":                _ObjTypeCheckStdinHandler,
		"subdue":               _ObjTypeCheckSubdueHandler,
		"subscriptions":        _ObjTypeCheckSubscriptionsHandler,
		"timeout":              _ObjTypeCheckTimeoutHandler,
		"toJSON":               _ObjTypeCheckToJSONHandler,
		"totalStateChange":     _ObjTypeCheckTotalStateChangeHandler,
		"ttl":                  _ObjTypeCheckTtlHandler,
	},
}

//
// CheckHistoryFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CheckHistory' type.
type CheckHistoryFieldResolvers interface {
	// Status implements response to request for 'status' field.
	Status(p graphql.ResolveParams) (interface{}, error)

	// Executed implements response to request for 'executed' field.
	Executed(p graphql.ResolveParams) (time.Time, error)
}

// CheckHistoryAliases implements all methods on CheckHistoryFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type CheckHistoryAliases struct{}

// Status implements response to request for 'status' field.
func (_ CheckHistoryAliases) Status(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Executed implements response to request for 'executed' field.
func (_ CheckHistoryAliases) Executed(p graphql.ResolveParams) (time.Time, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(time.Time)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'executed'")
	}
	return ret, err
}

// CheckHistoryType CheckHistory is a record of a check execution and its status
var CheckHistoryType = graphql.NewType("CheckHistory", graphql.ObjectKind)

// RegisterCheckHistory registers CheckHistory object type with given service.
func RegisterCheckHistory(svc *graphql.Service, impl CheckHistoryFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCheckHistoryDesc, impl)
}
func _ObjTypeCheckHistoryStatusHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Status(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Status(frp)
	}
}

func _ObjTypeCheckHistoryExecutedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Executed(p graphql.ResolveParams) (time.Time, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Executed(frp)
	}
}

func _ObjectTypeCheckHistoryConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "CheckHistory is a record of a check execution and its status",
		Fields: graphql1.Fields{
			"executed": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Executed describes the time in which the check request was executed",
				Name:              "executed",
				Type:              graphql1.NewNonNull(graphql1.DateTime),
			},
			"status": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Status is the exit status code produced by the check.",
				Name:              "status",
				Type:              graphql1.NewNonNull(graphql.OutputType("Uint")),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckHistoryFieldResolvers.")
		},
		Name: "CheckHistory",
	}
}

// describe CheckHistory's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCheckHistoryDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCheckHistoryConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"executed": _ObjTypeCheckHistoryExecutedHandler,
		"status":   _ObjTypeCheckHistoryStatusHandler,
	},
}

//
// ProxyRequestsFieldResolvers represents a collection of methods whose products represent the
// response values of the 'ProxyRequests' type.
type ProxyRequestsFieldResolvers interface {
	// EntityAttributes implements response to request for 'entityAttributes' field.
	EntityAttributes(p graphql.ResolveParams) (interface{}, error)

	// Splay implements response to request for 'splay' field.
	Splay(p graphql.ResolveParams) (bool, error)

	// SplayCoverage implements response to request for 'splayCoverage' field.
	SplayCoverage(p graphql.ResolveParams) (int, error)
}

// ProxyRequestsAliases implements all methods on ProxyRequestsFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type ProxyRequestsAliases struct{}

// EntityAttributes implements response to request for 'entityAttributes' field.
func (_ ProxyRequestsAliases) EntityAttributes(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// Splay implements response to request for 'splay' field.
func (_ ProxyRequestsAliases) Splay(p graphql.ResolveParams) (bool, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := val.(bool)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'splay'")
	}
	return ret, err
}

// SplayCoverage implements response to request for 'splayCoverage' field.
func (_ ProxyRequestsAliases) SplayCoverage(p graphql.ResolveParams) (int, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret, ok := graphql1.Int.ParseValue(val).(int)
	if err != nil {
		return ret, err
	}
	if !ok {
		return ret, errors.New("unable to coerce value for field 'splayCoverage'")
	}
	return ret, err
}

// ProxyRequestsType A ProxyRequests represents a request to execute a proxy check.
var ProxyRequestsType = graphql.NewType("ProxyRequests", graphql.ObjectKind)

// RegisterProxyRequests registers ProxyRequests object type with given service.
func RegisterProxyRequests(svc *graphql.Service, impl ProxyRequestsFieldResolvers) {
	svc.RegisterObject(_ObjectTypeProxyRequestsDesc, impl)
}
func _ObjTypeProxyRequestsEntityAttributesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		EntityAttributes(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.EntityAttributes(frp)
	}
}

func _ObjTypeProxyRequestsSplayHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Splay(p graphql.ResolveParams) (bool, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Splay(frp)
	}
}

func _ObjTypeProxyRequestsSplayCoverageHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		SplayCoverage(p graphql.ResolveParams) (int, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.SplayCoverage(frp)
	}
}

func _ObjectTypeProxyRequestsConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A ProxyRequests represents a request to execute a proxy check.",
		Fields: graphql1.Fields{
			"entityAttributes": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "entityAttributes store serialized arbitrary JSON-encoded data to match\nentities in the registry.",
				Name:              "entityAttributes",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("JSON")))),
			},
			"splay": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "splay indicates if proxy check requests should be splayed, published evenly\nover a window of time.",
				Name:              "splay",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"splayCoverage": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "splayCoverage is the percentage used for proxy check request splay\ncalculation.",
				Name:              "splayCoverage",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ProxyRequestsFieldResolvers.")
		},
		Name: "ProxyRequests",
	}
}

// describe ProxyRequests's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeProxyRequestsDesc = graphql.ObjectDesc{
	Config: _ObjectTypeProxyRequestsConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"entityAttributes": _ObjTypeProxyRequestsEntityAttributesHandler,
		"splay":            _ObjTypeProxyRequestsSplayHandler,
		"splayCoverage":    _ObjTypeProxyRequestsSplayCoverageHandler,
	},
}

//
// CheckConfigConnectionFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CheckConfigConnection' type.
type CheckConfigConnectionFieldResolvers interface {
	// Nodes implements response to request for 'nodes' field.
	Nodes(p graphql.ResolveParams) (interface{}, error)

	// PageInfo implements response to request for 'pageInfo' field.
	PageInfo(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigConnectionAliases implements all methods on CheckConfigConnectionFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
type CheckConfigConnectionAliases struct{}

// Nodes implements response to request for 'nodes' field.
func (_ CheckConfigConnectionAliases) Nodes(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// PageInfo implements response to request for 'pageInfo' field.
func (_ CheckConfigConnectionAliases) PageInfo(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// CheckConfigConnectionType A connection to a sequence of records.
var CheckConfigConnectionType = graphql.NewType("CheckConfigConnection", graphql.ObjectKind)

// RegisterCheckConfigConnection registers CheckConfigConnection object type with given service.
func RegisterCheckConfigConnection(svc *graphql.Service, impl CheckConfigConnectionFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCheckConfigConnectionDesc, impl)
}
func _ObjTypeCheckConfigConnectionNodesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		Nodes(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Nodes(frp)
	}
}

func _ObjTypeCheckConfigConnectionPageInfoHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(interface {
		PageInfo(p graphql.ResolveParams) (interface{}, error)
	})
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.PageInfo(frp)
	}
}

func _ObjectTypeCheckConfigConnectionConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A connection to a sequence of records.",
		Fields: graphql1.Fields{
			"nodes": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "nodes",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("CheckConfig")))),
			},
			"pageInfo": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "pageInfo",
				Type:              graphql1.NewNonNull(graphql.OutputType("OffsetPageInfo")),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckConfigConnectionFieldResolvers.")
		},
		Name: "CheckConfigConnection",
	}
}

// describe CheckConfigConnection's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCheckConfigConnectionDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCheckConfigConnectionConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"nodes":    _ObjTypeCheckConfigConnectionNodesHandler,
		"pageInfo": _ObjTypeCheckConfigConnectionPageInfoHandler,
	},
}

// CheckListOrder Describes ways in which a list of checks can be ordered.
type CheckListOrder string

// CheckListOrders holds enum values
var CheckListOrders = _EnumTypeCheckListOrderValues{
	NAME:      "NAME",
	NAME_DESC: "NAME_DESC",
}

// CheckListOrderType Describes ways in which a list of checks can be ordered.
var CheckListOrderType = graphql.NewType("CheckListOrder", graphql.EnumKind)

// RegisterCheckListOrder registers CheckListOrder object type with given service.
func RegisterCheckListOrder(svc *graphql.Service) {
	svc.RegisterEnum(_EnumTypeCheckListOrderDesc)
}
func _EnumTypeCheckListOrderConfigFn() graphql1.EnumConfig {
	return graphql1.EnumConfig{
		Description: "Describes ways in which a list of checks can be ordered.",
		Name:        "CheckListOrder",
		Values: graphql1.EnumValueConfigMap{
			"NAME": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "NAME",
			},
			"NAME_DESC": &graphql1.EnumValueConfig{
				DeprecationReason: "",
				Description:       "self descriptive",
				Value:             "NAME_DESC",
			},
		},
	}
}

// describe CheckListOrder's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _EnumTypeCheckListOrderDesc = graphql.EnumDesc{Config: _EnumTypeCheckListOrderConfigFn}

type _EnumTypeCheckListOrderValues struct {
	// NAME - self descriptive
	NAME CheckListOrder
	// NAME_DESC - self descriptive
	NAME_DESC CheckListOrder
}
