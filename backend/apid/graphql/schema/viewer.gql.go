// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// ViewerNamespacesFieldResolver implement to resolve requests for the Viewer's namespaces field.
type ViewerNamespacesFieldResolver interface {
	// Namespaces implements response to request for namespaces field.
	Namespaces(p graphql.ResolveParams) (interface{}, error)
}

// ViewerUserFieldResolver implement to resolve requests for the Viewer's user field.
type ViewerUserFieldResolver interface {
	// User implements response to request for user field.
	User(p graphql.ResolveParams) (interface{}, error)
}

//
// ViewerFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Viewer' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type ViewerFieldResolvers interface {
	ViewerNamespacesFieldResolver
	ViewerUserFieldResolver
}

// ViewerAliases implements all methods on ViewerFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type ViewerAliases struct{}

// Namespaces implements response to request for 'namespaces' field.
func (_ ViewerAliases) Namespaces(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// User implements response to request for 'user' field.
func (_ ViewerAliases) User(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	return val, err
}

// ViewerType Describes a viewer of the system; generally an authenticated user.
var ViewerType = graphql.NewType("Viewer", graphql.ObjectKind)

// RegisterViewer registers Viewer object type with given service.
func RegisterViewer(svc *graphql.Service, impl ViewerFieldResolvers) {
	svc.RegisterObject(_ObjectTypeViewerDesc, impl)
}
func _ObjTypeViewerNamespacesHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ViewerNamespacesFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.Namespaces(frp)
	}
}

func _ObjTypeViewerUserHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(ViewerUserFieldResolver)
	return func(frp graphql1.ResolveParams) (interface{}, error) {
		return resolver.User(frp)
	}
}

func _ObjectTypeViewerConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "Describes a viewer of the system; generally an authenticated user.",
		Fields: graphql1.Fields{
			"namespaces": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "All namespaces the viewer has access to view.",
				Name:              "namespaces",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql1.NewNonNull(graphql.OutputType("Namespace")))),
			},
			"user": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "User account associated with the viewer.",
				Name:              "user",
				Type:              graphql.OutputType("User"),
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see ViewerFieldResolvers.")
		},
		Name: "Viewer",
	}
}

// describe Viewer's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeViewerDesc = graphql.ObjectDesc{
	Config: _ObjectTypeViewerConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"namespaces": _ObjTypeViewerNamespacesHandler,
		"user":       _ObjTypeViewerUserHandler,
	},
}
