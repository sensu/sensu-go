// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sensu/sensu-go/backend/api/mockapi (interfaces: AssetClient,AuthenticationClient,CheckClient,EntityClient,EventClient,EventFilterClient,HandlerClient,HookConfigClient,NamespaceClient,RBACClient,SilencedClient,UserClient)

// Package mockapi is a generated GoMock package.
package mockapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/sensu/core/v2"
	v3 "github.com/sensu/core/v3"
	store "github.com/sensu/sensu-go/backend/store"
)

// MockAssetClient is a mock of AssetClient interface.
type MockAssetClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssetClientMockRecorder
}

// MockAssetClientMockRecorder is the mock recorder for MockAssetClient.
type MockAssetClientMockRecorder struct {
	mock *MockAssetClient
}

// NewMockAssetClient creates a new mock instance.
func NewMockAssetClient(ctrl *gomock.Controller) *MockAssetClient {
	mock := &MockAssetClient{ctrl: ctrl}
	mock.recorder = &MockAssetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetClient) EXPECT() *MockAssetClientMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockAssetClient) CreateAsset(arg0 context.Context, arg1 *v2.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockAssetClientMockRecorder) CreateAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAssetClient)(nil).CreateAsset), arg0, arg1)
}

// FetchAsset mocks base method.
func (m *MockAssetClient) FetchAsset(arg0 context.Context, arg1 string) (*v2.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAsset", arg0, arg1)
	ret0, _ := ret[0].(*v2.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAsset indicates an expected call of FetchAsset.
func (mr *MockAssetClientMockRecorder) FetchAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAsset", reflect.TypeOf((*MockAssetClient)(nil).FetchAsset), arg0, arg1)
}

// ListAssets mocks base method.
func (m *MockAssetClient) ListAssets(arg0 context.Context) ([]*v2.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssets", arg0)
	ret0, _ := ret[0].([]*v2.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssets indicates an expected call of ListAssets.
func (mr *MockAssetClientMockRecorder) ListAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssets", reflect.TypeOf((*MockAssetClient)(nil).ListAssets), arg0)
}

// UpdateAsset mocks base method.
func (m *MockAssetClient) UpdateAsset(arg0 context.Context, arg1 *v2.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockAssetClientMockRecorder) UpdateAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockAssetClient)(nil).UpdateAsset), arg0, arg1)
}

// MockAuthenticationClient is a mock of AuthenticationClient interface.
type MockAuthenticationClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationClientMockRecorder
}

// MockAuthenticationClientMockRecorder is the mock recorder for MockAuthenticationClient.
type MockAuthenticationClientMockRecorder struct {
	mock *MockAuthenticationClient
}

// NewMockAuthenticationClient creates a new mock instance.
func NewMockAuthenticationClient(ctrl *gomock.Controller) *MockAuthenticationClient {
	mock := &MockAuthenticationClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationClient) EXPECT() *MockAuthenticationClientMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockAuthenticationClient) CreateAccessToken(arg0 context.Context, arg1, arg2 string) (*v2.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockAuthenticationClientMockRecorder) CreateAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockAuthenticationClient)(nil).CreateAccessToken), arg0, arg1, arg2)
}

// Logout mocks base method.
func (m *MockAuthenticationClient) Logout(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthenticationClientMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthenticationClient)(nil).Logout), arg0)
}

// RefreshAccessToken mocks base method.
func (m *MockAuthenticationClient) RefreshAccessToken(arg0 context.Context) (*v2.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAccessToken", arg0)
	ret0, _ := ret[0].(*v2.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockAuthenticationClientMockRecorder) RefreshAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockAuthenticationClient)(nil).RefreshAccessToken), arg0)
}

// TestCreds mocks base method.
func (m *MockAuthenticationClient) TestCreds(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCreds", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestCreds indicates an expected call of TestCreds.
func (mr *MockAuthenticationClientMockRecorder) TestCreds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCreds", reflect.TypeOf((*MockAuthenticationClient)(nil).TestCreds), arg0, arg1, arg2)
}

// MockCheckClient is a mock of CheckClient interface.
type MockCheckClient struct {
	ctrl     *gomock.Controller
	recorder *MockCheckClientMockRecorder
}

// MockCheckClientMockRecorder is the mock recorder for MockCheckClient.
type MockCheckClientMockRecorder struct {
	mock *MockCheckClient
}

// NewMockCheckClient creates a new mock instance.
func NewMockCheckClient(ctrl *gomock.Controller) *MockCheckClient {
	mock := &MockCheckClient{ctrl: ctrl}
	mock.recorder = &MockCheckClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckClient) EXPECT() *MockCheckClientMockRecorder {
	return m.recorder
}

// CreateCheck mocks base method.
func (m *MockCheckClient) CreateCheck(arg0 context.Context, arg1 *v2.CheckConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCheck indicates an expected call of CreateCheck.
func (mr *MockCheckClientMockRecorder) CreateCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheck", reflect.TypeOf((*MockCheckClient)(nil).CreateCheck), arg0, arg1)
}

// DeleteCheck mocks base method.
func (m *MockCheckClient) DeleteCheck(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheck indicates an expected call of DeleteCheck.
func (mr *MockCheckClientMockRecorder) DeleteCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheck", reflect.TypeOf((*MockCheckClient)(nil).DeleteCheck), arg0, arg1)
}

// ExecuteCheck mocks base method.
func (m *MockCheckClient) ExecuteCheck(arg0 context.Context, arg1 string, arg2 *v2.AdhocRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCheck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCheck indicates an expected call of ExecuteCheck.
func (mr *MockCheckClientMockRecorder) ExecuteCheck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCheck", reflect.TypeOf((*MockCheckClient)(nil).ExecuteCheck), arg0, arg1, arg2)
}

// FetchCheck mocks base method.
func (m *MockCheckClient) FetchCheck(arg0 context.Context, arg1 string) (*v2.CheckConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheck", arg0, arg1)
	ret0, _ := ret[0].(*v2.CheckConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheck indicates an expected call of FetchCheck.
func (mr *MockCheckClientMockRecorder) FetchCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheck", reflect.TypeOf((*MockCheckClient)(nil).FetchCheck), arg0, arg1)
}

// ListChecks mocks base method.
func (m *MockCheckClient) ListChecks(arg0 context.Context) ([]*v2.CheckConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChecks", arg0)
	ret0, _ := ret[0].([]*v2.CheckConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChecks indicates an expected call of ListChecks.
func (mr *MockCheckClientMockRecorder) ListChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChecks", reflect.TypeOf((*MockCheckClient)(nil).ListChecks), arg0)
}

// UpdateCheck mocks base method.
func (m *MockCheckClient) UpdateCheck(arg0 context.Context, arg1 *v2.CheckConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheck indicates an expected call of UpdateCheck.
func (mr *MockCheckClientMockRecorder) UpdateCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheck", reflect.TypeOf((*MockCheckClient)(nil).UpdateCheck), arg0, arg1)
}

// MockEntityClient is a mock of EntityClient interface.
type MockEntityClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntityClientMockRecorder
}

// MockEntityClientMockRecorder is the mock recorder for MockEntityClient.
type MockEntityClientMockRecorder struct {
	mock *MockEntityClient
}

// NewMockEntityClient creates a new mock instance.
func NewMockEntityClient(ctrl *gomock.Controller) *MockEntityClient {
	mock := &MockEntityClient{ctrl: ctrl}
	mock.recorder = &MockEntityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityClient) EXPECT() *MockEntityClientMockRecorder {
	return m.recorder
}

// CreateEntity mocks base method.
func (m *MockEntityClient) CreateEntity(arg0 context.Context, arg1 *v2.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockEntityClientMockRecorder) CreateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockEntityClient)(nil).CreateEntity), arg0, arg1)
}

// DeleteEntity mocks base method.
func (m *MockEntityClient) DeleteEntity(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockEntityClientMockRecorder) DeleteEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockEntityClient)(nil).DeleteEntity), arg0, arg1)
}

// FetchEntity mocks base method.
func (m *MockEntityClient) FetchEntity(arg0 context.Context, arg1 string) (*v2.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEntity", arg0, arg1)
	ret0, _ := ret[0].(*v2.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEntity indicates an expected call of FetchEntity.
func (mr *MockEntityClientMockRecorder) FetchEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEntity", reflect.TypeOf((*MockEntityClient)(nil).FetchEntity), arg0, arg1)
}

// ListEntities mocks base method.
func (m *MockEntityClient) ListEntities(arg0 context.Context, arg1 *store.SelectionPredicate) ([]*v2.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntities", arg0, arg1)
	ret0, _ := ret[0].([]*v2.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockEntityClientMockRecorder) ListEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockEntityClient)(nil).ListEntities), arg0, arg1)
}

// UpdateEntity mocks base method.
func (m *MockEntityClient) UpdateEntity(arg0 context.Context, arg1 *v2.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockEntityClientMockRecorder) UpdateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockEntityClient)(nil).UpdateEntity), arg0, arg1)
}

// MockEventClient is a mock of EventClient interface.
type MockEventClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventClientMockRecorder
}

// MockEventClientMockRecorder is the mock recorder for MockEventClient.
type MockEventClientMockRecorder struct {
	mock *MockEventClient
}

// NewMockEventClient creates a new mock instance.
func NewMockEventClient(ctrl *gomock.Controller) *MockEventClient {
	mock := &MockEventClient{ctrl: ctrl}
	mock.recorder = &MockEventClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventClient) EXPECT() *MockEventClientMockRecorder {
	return m.recorder
}

// CountEvents mocks base method.
func (m *MockEventClient) CountEvents(arg0 context.Context, arg1 *store.SelectionPredicate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEvents", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEvents indicates an expected call of CountEvents.
func (mr *MockEventClientMockRecorder) CountEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEvents", reflect.TypeOf((*MockEventClient)(nil).CountEvents), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockEventClient) DeleteEvent(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventClientMockRecorder) DeleteEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventClient)(nil).DeleteEvent), arg0, arg1, arg2)
}

// EventStoreSupportsFiltering mocks base method.
func (m *MockEventClient) EventStoreSupportsFiltering(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStoreSupportsFiltering", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EventStoreSupportsFiltering indicates an expected call of EventStoreSupportsFiltering.
func (mr *MockEventClientMockRecorder) EventStoreSupportsFiltering(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStoreSupportsFiltering", reflect.TypeOf((*MockEventClient)(nil).EventStoreSupportsFiltering), arg0)
}

// FetchEvent mocks base method.
func (m *MockEventClient) FetchEvent(arg0 context.Context, arg1, arg2 string) (*v2.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEvent indicates an expected call of FetchEvent.
func (mr *MockEventClientMockRecorder) FetchEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEvent", reflect.TypeOf((*MockEventClient)(nil).FetchEvent), arg0, arg1, arg2)
}

// ListEvents mocks base method.
func (m *MockEventClient) ListEvents(arg0 context.Context, arg1 *store.SelectionPredicate) ([]*v2.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0, arg1)
	ret0, _ := ret[0].([]*v2.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockEventClientMockRecorder) ListEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockEventClient)(nil).ListEvents), arg0, arg1)
}

// ListEventsByEntity mocks base method.
func (m *MockEventClient) ListEventsByEntity(arg0 context.Context, arg1 string, arg2 *store.SelectionPredicate) ([]*v2.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsByEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v2.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventsByEntity indicates an expected call of ListEventsByEntity.
func (mr *MockEventClientMockRecorder) ListEventsByEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsByEntity", reflect.TypeOf((*MockEventClient)(nil).ListEventsByEntity), arg0, arg1, arg2)
}

// UpdateEvent mocks base method.
func (m *MockEventClient) UpdateEvent(arg0 context.Context, arg1 *v2.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventClientMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventClient)(nil).UpdateEvent), arg0, arg1)
}

// MockEventFilterClient is a mock of EventFilterClient interface.
type MockEventFilterClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventFilterClientMockRecorder
}

// MockEventFilterClientMockRecorder is the mock recorder for MockEventFilterClient.
type MockEventFilterClientMockRecorder struct {
	mock *MockEventFilterClient
}

// NewMockEventFilterClient creates a new mock instance.
func NewMockEventFilterClient(ctrl *gomock.Controller) *MockEventFilterClient {
	mock := &MockEventFilterClient{ctrl: ctrl}
	mock.recorder = &MockEventFilterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventFilterClient) EXPECT() *MockEventFilterClientMockRecorder {
	return m.recorder
}

// CreateEventFilter mocks base method.
func (m *MockEventFilterClient) CreateEventFilter(arg0 context.Context, arg1 *v2.EventFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventFilter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventFilter indicates an expected call of CreateEventFilter.
func (mr *MockEventFilterClientMockRecorder) CreateEventFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventFilter", reflect.TypeOf((*MockEventFilterClient)(nil).CreateEventFilter), arg0, arg1)
}

// DeleteEventFilter mocks base method.
func (m *MockEventFilterClient) DeleteEventFilter(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventFilter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventFilter indicates an expected call of DeleteEventFilter.
func (mr *MockEventFilterClientMockRecorder) DeleteEventFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventFilter", reflect.TypeOf((*MockEventFilterClient)(nil).DeleteEventFilter), arg0, arg1)
}

// FetchEventFilter mocks base method.
func (m *MockEventFilterClient) FetchEventFilter(arg0 context.Context, arg1 string) (*v2.EventFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEventFilter", arg0, arg1)
	ret0, _ := ret[0].(*v2.EventFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEventFilter indicates an expected call of FetchEventFilter.
func (mr *MockEventFilterClientMockRecorder) FetchEventFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEventFilter", reflect.TypeOf((*MockEventFilterClient)(nil).FetchEventFilter), arg0, arg1)
}

// ListEventFilters mocks base method.
func (m *MockEventFilterClient) ListEventFilters(arg0 context.Context) ([]*v2.EventFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventFilters", arg0)
	ret0, _ := ret[0].([]*v2.EventFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventFilters indicates an expected call of ListEventFilters.
func (mr *MockEventFilterClientMockRecorder) ListEventFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventFilters", reflect.TypeOf((*MockEventFilterClient)(nil).ListEventFilters), arg0)
}

// UpdateEventFilter mocks base method.
func (m *MockEventFilterClient) UpdateEventFilter(arg0 context.Context, arg1 *v2.EventFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventFilter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventFilter indicates an expected call of UpdateEventFilter.
func (mr *MockEventFilterClientMockRecorder) UpdateEventFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventFilter", reflect.TypeOf((*MockEventFilterClient)(nil).UpdateEventFilter), arg0, arg1)
}

// MockHandlerClient is a mock of HandlerClient interface.
type MockHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerClientMockRecorder
}

// MockHandlerClientMockRecorder is the mock recorder for MockHandlerClient.
type MockHandlerClientMockRecorder struct {
	mock *MockHandlerClient
}

// NewMockHandlerClient creates a new mock instance.
func NewMockHandlerClient(ctrl *gomock.Controller) *MockHandlerClient {
	mock := &MockHandlerClient{ctrl: ctrl}
	mock.recorder = &MockHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerClient) EXPECT() *MockHandlerClientMockRecorder {
	return m.recorder
}

// CreateHandler mocks base method.
func (m *MockHandlerClient) CreateHandler(arg0 context.Context, arg1 *v2.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHandler indicates an expected call of CreateHandler.
func (mr *MockHandlerClientMockRecorder) CreateHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHandler", reflect.TypeOf((*MockHandlerClient)(nil).CreateHandler), arg0, arg1)
}

// DeleteHandler mocks base method.
func (m *MockHandlerClient) DeleteHandler(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHandler indicates an expected call of DeleteHandler.
func (mr *MockHandlerClientMockRecorder) DeleteHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHandler", reflect.TypeOf((*MockHandlerClient)(nil).DeleteHandler), arg0, arg1)
}

// FetchHandler mocks base method.
func (m *MockHandlerClient) FetchHandler(arg0 context.Context, arg1 string) (*v2.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHandler", arg0, arg1)
	ret0, _ := ret[0].(*v2.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHandler indicates an expected call of FetchHandler.
func (mr *MockHandlerClientMockRecorder) FetchHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHandler", reflect.TypeOf((*MockHandlerClient)(nil).FetchHandler), arg0, arg1)
}

// ListHandlers mocks base method.
func (m *MockHandlerClient) ListHandlers(arg0 context.Context) ([]*v2.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHandlers", arg0)
	ret0, _ := ret[0].([]*v2.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHandlers indicates an expected call of ListHandlers.
func (mr *MockHandlerClientMockRecorder) ListHandlers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHandlers", reflect.TypeOf((*MockHandlerClient)(nil).ListHandlers), arg0)
}

// UpdateHandler mocks base method.
func (m *MockHandlerClient) UpdateHandler(arg0 context.Context, arg1 *v2.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHandler indicates an expected call of UpdateHandler.
func (mr *MockHandlerClientMockRecorder) UpdateHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHandler", reflect.TypeOf((*MockHandlerClient)(nil).UpdateHandler), arg0, arg1)
}

// MockHookConfigClient is a mock of HookConfigClient interface.
type MockHookConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockHookConfigClientMockRecorder
}

// MockHookConfigClientMockRecorder is the mock recorder for MockHookConfigClient.
type MockHookConfigClientMockRecorder struct {
	mock *MockHookConfigClient
}

// NewMockHookConfigClient creates a new mock instance.
func NewMockHookConfigClient(ctrl *gomock.Controller) *MockHookConfigClient {
	mock := &MockHookConfigClient{ctrl: ctrl}
	mock.recorder = &MockHookConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookConfigClient) EXPECT() *MockHookConfigClientMockRecorder {
	return m.recorder
}

// CreateHookConfig mocks base method.
func (m *MockHookConfigClient) CreateHookConfig(arg0 context.Context, arg1 *v2.HookConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHookConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHookConfig indicates an expected call of CreateHookConfig.
func (mr *MockHookConfigClientMockRecorder) CreateHookConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHookConfig", reflect.TypeOf((*MockHookConfigClient)(nil).CreateHookConfig), arg0, arg1)
}

// DeleteHookConfig mocks base method.
func (m *MockHookConfigClient) DeleteHookConfig(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHookConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHookConfig indicates an expected call of DeleteHookConfig.
func (mr *MockHookConfigClientMockRecorder) DeleteHookConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHookConfig", reflect.TypeOf((*MockHookConfigClient)(nil).DeleteHookConfig), arg0, arg1)
}

// FetchHookConfig mocks base method.
func (m *MockHookConfigClient) FetchHookConfig(arg0 context.Context, arg1 string) (*v2.HookConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHookConfig", arg0, arg1)
	ret0, _ := ret[0].(*v2.HookConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHookConfig indicates an expected call of FetchHookConfig.
func (mr *MockHookConfigClientMockRecorder) FetchHookConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHookConfig", reflect.TypeOf((*MockHookConfigClient)(nil).FetchHookConfig), arg0, arg1)
}

// ListHookConfigs mocks base method.
func (m *MockHookConfigClient) ListHookConfigs(arg0 context.Context) ([]*v2.HookConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHookConfigs", arg0)
	ret0, _ := ret[0].([]*v2.HookConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHookConfigs indicates an expected call of ListHookConfigs.
func (mr *MockHookConfigClientMockRecorder) ListHookConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHookConfigs", reflect.TypeOf((*MockHookConfigClient)(nil).ListHookConfigs), arg0)
}

// UpdateHookConfig mocks base method.
func (m *MockHookConfigClient) UpdateHookConfig(arg0 context.Context, arg1 *v2.HookConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHookConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHookConfig indicates an expected call of UpdateHookConfig.
func (mr *MockHookConfigClientMockRecorder) UpdateHookConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHookConfig", reflect.TypeOf((*MockHookConfigClient)(nil).UpdateHookConfig), arg0, arg1)
}

// MockNamespaceClient is a mock of NamespaceClient interface.
type MockNamespaceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceClientMockRecorder
}

// MockNamespaceClientMockRecorder is the mock recorder for MockNamespaceClient.
type MockNamespaceClientMockRecorder struct {
	mock *MockNamespaceClient
}

// NewMockNamespaceClient creates a new mock instance.
func NewMockNamespaceClient(ctrl *gomock.Controller) *MockNamespaceClient {
	mock := &MockNamespaceClient{ctrl: ctrl}
	mock.recorder = &MockNamespaceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceClient) EXPECT() *MockNamespaceClientMockRecorder {
	return m.recorder
}

// CreateNamespace mocks base method.
func (m *MockNamespaceClient) CreateNamespace(arg0 context.Context, arg1 *v3.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockNamespaceClientMockRecorder) CreateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockNamespaceClient)(nil).CreateNamespace), arg0, arg1)
}

// DeleteNamespace mocks base method.
func (m *MockNamespaceClient) DeleteNamespace(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockNamespaceClientMockRecorder) DeleteNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockNamespaceClient)(nil).DeleteNamespace), arg0, arg1)
}

// FetchNamespace mocks base method.
func (m *MockNamespaceClient) FetchNamespace(arg0 context.Context, arg1 string) (*v3.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v3.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNamespace indicates an expected call of FetchNamespace.
func (mr *MockNamespaceClientMockRecorder) FetchNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNamespace", reflect.TypeOf((*MockNamespaceClient)(nil).FetchNamespace), arg0, arg1)
}

// ListNamespaces mocks base method.
func (m *MockNamespaceClient) ListNamespaces(arg0 context.Context, arg1 *store.SelectionPredicate) ([]*v3.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", arg0, arg1)
	ret0, _ := ret[0].([]*v3.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockNamespaceClientMockRecorder) ListNamespaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockNamespaceClient)(nil).ListNamespaces), arg0, arg1)
}

// UpdateNamespace mocks base method.
func (m *MockNamespaceClient) UpdateNamespace(arg0 context.Context, arg1 *v3.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockNamespaceClientMockRecorder) UpdateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockNamespaceClient)(nil).UpdateNamespace), arg0, arg1)
}

// MockRBACClient is a mock of RBACClient interface.
type MockRBACClient struct {
	ctrl     *gomock.Controller
	recorder *MockRBACClientMockRecorder
}

// MockRBACClientMockRecorder is the mock recorder for MockRBACClient.
type MockRBACClientMockRecorder struct {
	mock *MockRBACClient
}

// NewMockRBACClient creates a new mock instance.
func NewMockRBACClient(ctrl *gomock.Controller) *MockRBACClient {
	mock := &MockRBACClient{ctrl: ctrl}
	mock.recorder = &MockRBACClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACClient) EXPECT() *MockRBACClientMockRecorder {
	return m.recorder
}

// CreateClusterRole mocks base method.
func (m *MockRBACClient) CreateClusterRole(arg0 context.Context, arg1 *v2.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRole indicates an expected call of CreateClusterRole.
func (mr *MockRBACClientMockRecorder) CreateClusterRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRole", reflect.TypeOf((*MockRBACClient)(nil).CreateClusterRole), arg0, arg1)
}

// CreateClusterRoleBinding mocks base method.
func (m *MockRBACClient) CreateClusterRoleBinding(arg0 context.Context, arg1 *v2.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRoleBinding indicates an expected call of CreateClusterRoleBinding.
func (mr *MockRBACClientMockRecorder) CreateClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).CreateClusterRoleBinding), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockRBACClient) CreateRole(arg0 context.Context, arg1 *v2.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACClientMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACClient)(nil).CreateRole), arg0, arg1)
}

// CreateRoleBinding mocks base method.
func (m *MockRBACClient) CreateRoleBinding(arg0 context.Context, arg1 *v2.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding.
func (mr *MockRBACClientMockRecorder) CreateRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).CreateRoleBinding), arg0, arg1)
}

// DeleteClusterRole mocks base method.
func (m *MockRBACClient) DeleteClusterRole(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockRBACClientMockRecorder) DeleteClusterRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockRBACClient)(nil).DeleteClusterRole), arg0, arg1)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockRBACClient) DeleteClusterRoleBinding(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockRBACClientMockRecorder) DeleteClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).DeleteClusterRoleBinding), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockRBACClient) DeleteRole(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACClientMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACClient)(nil).DeleteRole), arg0, arg1)
}

// DeleteRoleBinding mocks base method.
func (m *MockRBACClient) DeleteRoleBinding(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockRBACClientMockRecorder) DeleteRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).DeleteRoleBinding), arg0, arg1)
}

// FetchClusterRole mocks base method.
func (m *MockRBACClient) FetchClusterRole(arg0 context.Context, arg1 string) (*v2.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClusterRole", arg0, arg1)
	ret0, _ := ret[0].(*v2.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchClusterRole indicates an expected call of FetchClusterRole.
func (mr *MockRBACClientMockRecorder) FetchClusterRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClusterRole", reflect.TypeOf((*MockRBACClient)(nil).FetchClusterRole), arg0, arg1)
}

// FetchClusterRoleBinding mocks base method.
func (m *MockRBACClient) FetchClusterRoleBinding(arg0 context.Context, arg1 string) (*v2.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v2.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchClusterRoleBinding indicates an expected call of FetchClusterRoleBinding.
func (mr *MockRBACClientMockRecorder) FetchClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClusterRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).FetchClusterRoleBinding), arg0, arg1)
}

// FetchRole mocks base method.
func (m *MockRBACClient) FetchRole(arg0 context.Context, arg1 string) (*v2.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRole", arg0, arg1)
	ret0, _ := ret[0].(*v2.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRole indicates an expected call of FetchRole.
func (mr *MockRBACClientMockRecorder) FetchRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRole", reflect.TypeOf((*MockRBACClient)(nil).FetchRole), arg0, arg1)
}

// FetchRoleBinding mocks base method.
func (m *MockRBACClient) FetchRoleBinding(arg0 context.Context, arg1 string) (*v2.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v2.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRoleBinding indicates an expected call of FetchRoleBinding.
func (mr *MockRBACClientMockRecorder) FetchRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).FetchRoleBinding), arg0, arg1)
}

// ListClusterRoleBindings mocks base method.
func (m *MockRBACClient) ListClusterRoleBindings(arg0 context.Context) ([]*v2.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterRoleBindings", arg0)
	ret0, _ := ret[0].([]*v2.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterRoleBindings indicates an expected call of ListClusterRoleBindings.
func (mr *MockRBACClientMockRecorder) ListClusterRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterRoleBindings", reflect.TypeOf((*MockRBACClient)(nil).ListClusterRoleBindings), arg0)
}

// ListClusterRoles mocks base method.
func (m *MockRBACClient) ListClusterRoles(arg0 context.Context) ([]*v2.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterRoles", arg0)
	ret0, _ := ret[0].([]*v2.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterRoles indicates an expected call of ListClusterRoles.
func (mr *MockRBACClientMockRecorder) ListClusterRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterRoles", reflect.TypeOf((*MockRBACClient)(nil).ListClusterRoles), arg0)
}

// ListRoleBindings mocks base method.
func (m *MockRBACClient) ListRoleBindings(arg0 context.Context) ([]*v2.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleBindings", arg0)
	ret0, _ := ret[0].([]*v2.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBindings indicates an expected call of ListRoleBindings.
func (mr *MockRBACClientMockRecorder) ListRoleBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBindings", reflect.TypeOf((*MockRBACClient)(nil).ListRoleBindings), arg0)
}

// ListRoles mocks base method.
func (m *MockRBACClient) ListRoles(arg0 context.Context) ([]*v2.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0)
	ret0, _ := ret[0].([]*v2.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRBACClientMockRecorder) ListRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRBACClient)(nil).ListRoles), arg0)
}

// UpdateClusterRole mocks base method.
func (m *MockRBACClient) UpdateClusterRole(arg0 context.Context, arg1 *v2.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRole indicates an expected call of UpdateClusterRole.
func (mr *MockRBACClientMockRecorder) UpdateClusterRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRole", reflect.TypeOf((*MockRBACClient)(nil).UpdateClusterRole), arg0, arg1)
}

// UpdateClusterRoleBinding mocks base method.
func (m *MockRBACClient) UpdateClusterRoleBinding(arg0 context.Context, arg1 *v2.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleBinding indicates an expected call of UpdateClusterRoleBinding.
func (mr *MockRBACClientMockRecorder) UpdateClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).UpdateClusterRoleBinding), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockRBACClient) UpdateRole(arg0 context.Context, arg1 *v2.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRBACClientMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRBACClient)(nil).UpdateRole), arg0, arg1)
}

// UpdateRoleBinding mocks base method.
func (m *MockRBACClient) UpdateRoleBinding(arg0 context.Context, arg1 *v2.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding.
func (mr *MockRBACClientMockRecorder) UpdateRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockRBACClient)(nil).UpdateRoleBinding), arg0, arg1)
}

// MockSilencedClient is a mock of SilencedClient interface.
type MockSilencedClient struct {
	ctrl     *gomock.Controller
	recorder *MockSilencedClientMockRecorder
}

// MockSilencedClientMockRecorder is the mock recorder for MockSilencedClient.
type MockSilencedClientMockRecorder struct {
	mock *MockSilencedClient
}

// NewMockSilencedClient creates a new mock instance.
func NewMockSilencedClient(ctrl *gomock.Controller) *MockSilencedClient {
	mock := &MockSilencedClient{ctrl: ctrl}
	mock.recorder = &MockSilencedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSilencedClient) EXPECT() *MockSilencedClientMockRecorder {
	return m.recorder
}

// DeleteSilencedByName mocks base method.
func (m *MockSilencedClient) DeleteSilencedByName(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSilencedByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSilencedByName indicates an expected call of DeleteSilencedByName.
func (mr *MockSilencedClientMockRecorder) DeleteSilencedByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSilencedByName", reflect.TypeOf((*MockSilencedClient)(nil).DeleteSilencedByName), arg0, arg1)
}

// GetSilencedByCheckName mocks base method.
func (m *MockSilencedClient) GetSilencedByCheckName(arg0 context.Context, arg1 string) ([]*v2.Silenced, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSilencedByCheckName", arg0, arg1)
	ret0, _ := ret[0].([]*v2.Silenced)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSilencedByCheckName indicates an expected call of GetSilencedByCheckName.
func (mr *MockSilencedClientMockRecorder) GetSilencedByCheckName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilencedByCheckName", reflect.TypeOf((*MockSilencedClient)(nil).GetSilencedByCheckName), arg0, arg1)
}

// GetSilencedByName mocks base method.
func (m *MockSilencedClient) GetSilencedByName(arg0 context.Context, arg1 string) (*v2.Silenced, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSilencedByName", arg0, arg1)
	ret0, _ := ret[0].(*v2.Silenced)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSilencedByName indicates an expected call of GetSilencedByName.
func (mr *MockSilencedClientMockRecorder) GetSilencedByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilencedByName", reflect.TypeOf((*MockSilencedClient)(nil).GetSilencedByName), arg0, arg1)
}

// GetSilencedBySubscription mocks base method.
func (m *MockSilencedClient) GetSilencedBySubscription(arg0 context.Context, arg1 ...string) ([]*v2.Silenced, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSilencedBySubscription", varargs...)
	ret0, _ := ret[0].([]*v2.Silenced)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSilencedBySubscription indicates an expected call of GetSilencedBySubscription.
func (mr *MockSilencedClientMockRecorder) GetSilencedBySubscription(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilencedBySubscription", reflect.TypeOf((*MockSilencedClient)(nil).GetSilencedBySubscription), varargs...)
}

// ListSilenced mocks base method.
func (m *MockSilencedClient) ListSilenced(arg0 context.Context) ([]*v2.Silenced, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSilenced", arg0)
	ret0, _ := ret[0].([]*v2.Silenced)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSilenced indicates an expected call of ListSilenced.
func (mr *MockSilencedClientMockRecorder) ListSilenced(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSilenced", reflect.TypeOf((*MockSilencedClient)(nil).ListSilenced), arg0)
}

// UpdateSilenced mocks base method.
func (m *MockSilencedClient) UpdateSilenced(arg0 context.Context, arg1 *v2.Silenced) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSilenced", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSilenced indicates an expected call of UpdateSilenced.
func (mr *MockSilencedClientMockRecorder) UpdateSilenced(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSilenced", reflect.TypeOf((*MockSilencedClient)(nil).UpdateSilenced), arg0, arg1)
}

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserClient) CreateUser(arg0 context.Context, arg1 *v2.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserClientMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserClient)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserClient) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserClientMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserClient)(nil).DeleteUser), arg0, arg1)
}

// FetchUser mocks base method.
func (m *MockUserClient) FetchUser(arg0 context.Context, arg1 string) (*v2.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", arg0, arg1)
	ret0, _ := ret[0].(*v2.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUser indicates an expected call of FetchUser.
func (mr *MockUserClientMockRecorder) FetchUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockUserClient)(nil).FetchUser), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockUserClient) ListUsers(arg0 context.Context) ([]*v2.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]*v2.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserClientMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserClient)(nil).ListUsers), arg0)
}

// UpdateUser mocks base method.
func (m *MockUserClient) UpdateUser(arg0 context.Context, arg1 *v2.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserClientMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserClient)(nil).UpdateUser), arg0, arg1)
}
