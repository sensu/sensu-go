/*
Copyright 2018 Sensu, Inc.

Permission is hereby granted, free of charge, to any person obtaining 
a copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software 
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in 
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE 
USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.sensu.sensu_go.internal.apis.rbac;

import "github.com/sensu/sensu-go/internal/apis/meta/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "rbac";

// ClusterRole is a role that applies to all Namespaces within
// a cluster.
// +freeze-api:resource-name clusterRoles
message ClusterRole {
  optional github.com.sensu.sensu_go.internal.apis.meta.ObjectMeta metadata = 1;

  // Rules hold all of the Rules for this Role.
  repeated Rule rules = 2;
}

// ClusterRoleBinding grants the permissions defined in a ClusterRole referenced
// to a user or a set of users
// +freeze-api:resource-name clusterRoleBindings
message ClusterRoleBinding {
  optional github.com.sensu.sensu_go.internal.apis.meta.ObjectMeta metadata = 1;

  // Subjects holds references to the objects the role applies to
  repeated Subject subjects = 2;

  // RoleRef is the reference to a ClusterRole in the global namespace
  optional RoleRef roleRef = 3;
}

// A Role applies only to a single Namespace.
// +freeze-api:resource-name roles
message Role {
  optional github.com.sensu.sensu_go.internal.apis.meta.ObjectMeta metadata = 1;

  // Rules hold all of the Rules for this Role.
  repeated Rule rules = 2;
}

// RoleBinding grants the permissions defined in a Role referenced to a user or
// a set of users
// +freeze-api:resource-name roleBindings
message RoleBinding {
  optional github.com.sensu.sensu_go.internal.apis.meta.ObjectMeta metadata = 1;

  // Subjects holds references to the objects the role applies to
  repeated Subject subjects = 2;

  // RoleRef is the reference to a Role in the current namespace
  optional RoleRef roleRef = 3;
}

// RoleRef is used to map groups to Roles or ClusterRoles.
message RoleRef {
  // Type is the type of role being referenced.
  optional string type = 1;

  // Name is the name of the resource being referenced.
  optional string name = 2;
}

// A Rule holds information which describes an action that can be taken.
message Rule {
  // Verbs is a list of verbs that apply to all of the listed
  // resources for this rule. These include "get", "list", "watch",
  // "create", "update", "delete".
  // TODO: add support for "patch" (this is expensive and should be
  // delayed until a further release).
  // TODO: add support for "watch" (via websockets)
  repeated string verbs = 1;

  // APIGroups is the name of the APIGroup that contains the resource
  repeated string apiGroups = 2;

  // Resources is a list of resources that this rule applies to.
  // "*" represents all resources.
  // TODO: enumerate "resources"
  repeated string resources = 3;

  // ResourceNames is an optional list of resource names that the rule
  // applies to.
  repeated string resourceNames = 4;
}

// Subject contains a reference to the user identity a role binding applies to
// +freeze-api:resource-name subjects
message Subject {
  // Kind is the type of object referenced
  optional string kind = 1;

  // Name of the referenced object
  optional string name = 2;
}

