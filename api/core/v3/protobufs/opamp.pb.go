// Copyright 2021, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// OpAMP: Open Agent Management Protocol (https://github.com/open-telemetry/opamp-spec)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: opamp.proto

package protobufs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerCapabilities int32

const (
	// The capabilities field is unspecified.
	ServerCapabilities_UnspecifiedServerCapability ServerCapabilities = 0
	// The Server can accept status reports. This bit MUST be set, since all Server
	// MUST be able to accept status reports.
	ServerCapabilities_AcceptsStatus ServerCapabilities = 1
	// The Server can offer remote configuration to the Agent.
	ServerCapabilities_OffersRemoteConfig ServerCapabilities = 2
	// The Server can accept EffectiveConfig in StatusReport.
	ServerCapabilities_AcceptsEffectiveConfig ServerCapabilities = 4
	// The Server can offer Addons.
	ServerCapabilities_OffersAddons ServerCapabilities = 8
	// The Server can accept Addon status.
	ServerCapabilities_AcceptsAddonsStatus ServerCapabilities = 16
	// The Server can offer packages to install.
	ServerCapabilities_OffersAgentPackage ServerCapabilities = 32
	// The Server can accept the installation status of the package.
	ServerCapabilities_AcceptsAgentPackageStatus ServerCapabilities = 64
	// The Server can offer connection settings.
	ServerCapabilities_OffersConnectionSettings ServerCapabilities = 128
)

// Enum value maps for ServerCapabilities.
var (
	ServerCapabilities_name = map[int32]string{
		0:   "UnspecifiedServerCapability",
		1:   "AcceptsStatus",
		2:   "OffersRemoteConfig",
		4:   "AcceptsEffectiveConfig",
		8:   "OffersAddons",
		16:  "AcceptsAddonsStatus",
		32:  "OffersAgentPackage",
		64:  "AcceptsAgentPackageStatus",
		128: "OffersConnectionSettings",
	}
	ServerCapabilities_value = map[string]int32{
		"UnspecifiedServerCapability": 0,
		"AcceptsStatus":               1,
		"OffersRemoteConfig":          2,
		"AcceptsEffectiveConfig":      4,
		"OffersAddons":                8,
		"AcceptsAddonsStatus":         16,
		"OffersAgentPackage":          32,
		"AcceptsAgentPackageStatus":   64,
		"OffersConnectionSettings":    128,
	}
)

func (x ServerCapabilities) Enum() *ServerCapabilities {
	p := new(ServerCapabilities)
	*p = x
	return p
}

func (x ServerCapabilities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerCapabilities) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[0].Descriptor()
}

func (ServerCapabilities) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[0]
}

func (x ServerCapabilities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerCapabilities.Descriptor instead.
func (ServerCapabilities) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{0}
}

type AgentCapabilities int32

const (
	// The capabilities field is unspecified.
	AgentCapabilities_UnspecifiedAgentCapability AgentCapabilities = 0
	// The Agent can report status. This bit MUST be set, since all Agents MUST
	// report status.
	AgentCapabilities_ReportsStatus AgentCapabilities = 1
	// The Agent can accept remote configuration from the Server.
	AgentCapabilities_AcceptsRemoteConfig AgentCapabilities = 2
	// The Agent will report EffectiveConfig in StatusReport.
	AgentCapabilities_ReportsEffectiveConfig AgentCapabilities = 4
	// The Agent can accept Addon offers.
	AgentCapabilities_AcceptsAddons AgentCapabilities = 8
	// The Agent can report Addon status.
	AgentCapabilities_ReportsAddonsStatus AgentCapabilities = 16
	// The Agent can accept packages to install.
	AgentCapabilities_AcceptsAgentPackage AgentCapabilities = 32
	// The Agent can report the installation status of the package.
	AgentCapabilities_ReportsAgentPackageStatus AgentCapabilities = 64
	// The Agent can report own traces to the destination specified by
	// the Server via ConnectionSettingsOffers.own_traces field.
	AgentCapabilities_ReportsOwnTraces AgentCapabilities = 128
	// The Agent can report own metrics to the destination specified by
	// the Server via ConnectionSettingsOffers.own_metrics field.
	AgentCapabilities_ReportsOwnMetrics AgentCapabilities = 256
	// The Agent can report own logs to the destination specified by
	// the Server via ConnectionSettingsOffers.own_logs field.
	AgentCapabilities_ReportsOwnLogs AgentCapabilities = 512
	// The Agent can accept connections settings for OpAMP via
	// ConnectionSettingsOffers.opamp field.
	AgentCapabilities_AcceptsOpAMPConnectionSettings AgentCapabilities = 1024
	// The Agent can accept connections settings for other destinations via
	// ConnectionSettingsOffers.other_connections field.
	AgentCapabilities_AcceptsOtherConnectionSettings AgentCapabilities = 2048
)

// Enum value maps for AgentCapabilities.
var (
	AgentCapabilities_name = map[int32]string{
		0:    "UnspecifiedAgentCapability",
		1:    "ReportsStatus",
		2:    "AcceptsRemoteConfig",
		4:    "ReportsEffectiveConfig",
		8:    "AcceptsAddons",
		16:   "ReportsAddonsStatus",
		32:   "AcceptsAgentPackage",
		64:   "ReportsAgentPackageStatus",
		128:  "ReportsOwnTraces",
		256:  "ReportsOwnMetrics",
		512:  "ReportsOwnLogs",
		1024: "AcceptsOpAMPConnectionSettings",
		2048: "AcceptsOtherConnectionSettings",
	}
	AgentCapabilities_value = map[string]int32{
		"UnspecifiedAgentCapability":     0,
		"ReportsStatus":                  1,
		"AcceptsRemoteConfig":            2,
		"ReportsEffectiveConfig":         4,
		"AcceptsAddons":                  8,
		"ReportsAddonsStatus":            16,
		"AcceptsAgentPackage":            32,
		"ReportsAgentPackageStatus":      64,
		"ReportsOwnTraces":               128,
		"ReportsOwnMetrics":              256,
		"ReportsOwnLogs":                 512,
		"AcceptsOpAMPConnectionSettings": 1024,
		"AcceptsOtherConnectionSettings": 2048,
	}
)

func (x AgentCapabilities) Enum() *AgentCapabilities {
	p := new(AgentCapabilities)
	*p = x
	return p
}

func (x AgentCapabilities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentCapabilities) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[1].Descriptor()
}

func (AgentCapabilities) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[1]
}

func (x AgentCapabilities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentCapabilities.Descriptor instead.
func (AgentCapabilities) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{1}
}

type ServerToAgent_Flags int32

const (
	ServerToAgent_FlagsUnspecified ServerToAgent_Flags = 0
	// The server asks the agent to report effective config.
	ServerToAgent_ReportEffectiveConfig ServerToAgent_Flags = 1
	// The server asks the agent to report addon statuses.
	ServerToAgent_ReportAddonStatus ServerToAgent_Flags = 2
)

// Enum value maps for ServerToAgent_Flags.
var (
	ServerToAgent_Flags_name = map[int32]string{
		0: "FlagsUnspecified",
		1: "ReportEffectiveConfig",
		2: "ReportAddonStatus",
	}
	ServerToAgent_Flags_value = map[string]int32{
		"FlagsUnspecified":      0,
		"ReportEffectiveConfig": 1,
		"ReportAddonStatus":     2,
	}
)

func (x ServerToAgent_Flags) Enum() *ServerToAgent_Flags {
	p := new(ServerToAgent_Flags)
	*p = x
	return p
}

func (x ServerToAgent_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerToAgent_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[2].Descriptor()
}

func (ServerToAgent_Flags) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[2]
}

func (x ServerToAgent_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerToAgent_Flags.Descriptor instead.
func (ServerToAgent_Flags) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{2, 0}
}

type ConnectionSettings_Flags int32

const (
	ConnectionSettings__                      ConnectionSettings_Flags = 0
	ConnectionSettings_DestinationEndpointSet ConnectionSettings_Flags = 1
	ConnectionSettings_ProxyEndpointSet       ConnectionSettings_Flags = 2
)

// Enum value maps for ConnectionSettings_Flags.
var (
	ConnectionSettings_Flags_name = map[int32]string{
		0: "_",
		1: "DestinationEndpointSet",
		2: "ProxyEndpointSet",
	}
	ConnectionSettings_Flags_value = map[string]int32{
		"_":                      0,
		"DestinationEndpointSet": 1,
		"ProxyEndpointSet":       2,
	}
)

func (x ConnectionSettings_Flags) Enum() *ConnectionSettings_Flags {
	p := new(ConnectionSettings_Flags)
	*p = x
	return p
}

func (x ConnectionSettings_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionSettings_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[3].Descriptor()
}

func (ConnectionSettings_Flags) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[3]
}

func (x ConnectionSettings_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionSettings_Flags.Descriptor instead.
func (ConnectionSettings_Flags) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{3, 0}
}

type ServerErrorResponse_Type int32

const (
	// Unknown error. Something went wrong, but it is not known what exactly.
	// The Agent SHOULD NOT retry the message.
	// The error_message field may contain a description of the problem.
	ServerErrorResponse_Unknown ServerErrorResponse_Type = 0
	// The AgentToServer message was malformed. The Agent SHOULD NOT retry
	// the message.
	ServerErrorResponse_BadRequest ServerErrorResponse_Type = 1
	// The server is overloaded and unable to process the request. The agent
	// should retry the message later. retry_info field may be optionally
	// set with additional information about retrying.
	ServerErrorResponse_Unavailable ServerErrorResponse_Type = 2
)

// Enum value maps for ServerErrorResponse_Type.
var (
	ServerErrorResponse_Type_name = map[int32]string{
		0: "Unknown",
		1: "BadRequest",
		2: "Unavailable",
	}
	ServerErrorResponse_Type_value = map[string]int32{
		"Unknown":     0,
		"BadRequest":  1,
		"Unavailable": 2,
	}
)

func (x ServerErrorResponse_Type) Enum() *ServerErrorResponse_Type {
	p := new(ServerErrorResponse_Type)
	*p = x
	return p
}

func (x ServerErrorResponse_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerErrorResponse_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[4].Descriptor()
}

func (ServerErrorResponse_Type) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[4]
}

func (x ServerErrorResponse_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerErrorResponse_Type.Descriptor instead.
func (ServerErrorResponse_Type) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{11, 0}
}

type RemoteConfigStatus_Status int32

const (
	// Remote config was successfully applied by the Agent.
	RemoteConfigStatus_Applied RemoteConfigStatus_Status = 0
	// Agent is currently applying the remote config that it received earlier.
	RemoteConfigStatus_Applying RemoteConfigStatus_Status = 1
	// Agent tried to apply the config received earlier, but it failed.
	// See error_message for more details.
	RemoteConfigStatus_Failed RemoteConfigStatus_Status = 2
)

// Enum value maps for RemoteConfigStatus_Status.
var (
	RemoteConfigStatus_Status_name = map[int32]string{
		0: "Applied",
		1: "Applying",
		2: "Failed",
	}
	RemoteConfigStatus_Status_value = map[string]int32{
		"Applied":  0,
		"Applying": 1,
		"Failed":   2,
	}
)

func (x RemoteConfigStatus_Status) Enum() *RemoteConfigStatus_Status {
	p := new(RemoteConfigStatus_Status)
	*p = x
	return p
}

func (x RemoteConfigStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteConfigStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[5].Descriptor()
}

func (RemoteConfigStatus_Status) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[5]
}

func (x RemoteConfigStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteConfigStatus_Status.Descriptor instead.
func (RemoteConfigStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{17, 0}
}

type AgentAddonStatus_Status int32

const (
	// Addon is successfully installed by the Agent. error_message MUST NOT be set.
	AgentAddonStatus_Installed AgentAddonStatus_Status = 0
	// Installation of this addon has not yet started.
	AgentAddonStatus_InstallPending AgentAddonStatus_Status = 1
	// Agent is currently downloading and installing the addon.
	// server_offered_hash MUST be set to indicate the version
	// that the agent is installing. error_message MUST NOT be set.
	AgentAddonStatus_Installing AgentAddonStatus_Status = 2
	// Agent tried to install the addon but installation failed.
	// server_offered_hash MUST be set to indicate the version
	// that the agent tried to install. error_message may also contain more
	// details about the failure.
	AgentAddonStatus_InstallFailed AgentAddonStatus_Status = 3
)

// Enum value maps for AgentAddonStatus_Status.
var (
	AgentAddonStatus_Status_name = map[int32]string{
		0: "Installed",
		1: "InstallPending",
		2: "Installing",
		3: "InstallFailed",
	}
	AgentAddonStatus_Status_value = map[string]int32{
		"Installed":      0,
		"InstallPending": 1,
		"Installing":     2,
		"InstallFailed":  3,
	}
)

func (x AgentAddonStatus_Status) Enum() *AgentAddonStatus_Status {
	p := new(AgentAddonStatus_Status)
	*p = x
	return p
}

func (x AgentAddonStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentAddonStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[6].Descriptor()
}

func (AgentAddonStatus_Status) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[6]
}

func (x AgentAddonStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentAddonStatus_Status.Descriptor instead.
func (AgentAddonStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{19, 0}
}

type AgentInstallStatus_Status int32

const (
	// Agent package was successfully installed. error_message MUST NOT be set.
	AgentInstallStatus_Installed AgentInstallStatus_Status = 0
	// Agent is currently downloading and installing the package.
	// server_offered_hash MUST be set to indicate the version
	// that the agent is installing. error_message MUST NOT be set.
	AgentInstallStatus_Installing AgentInstallStatus_Status = 1
	// Agent tried to install the package but installation failed.
	// server_offered_hash MUST be set to indicate the package
	// that the agent tried to install. error_message may also contain more
	// details about the failure.
	AgentInstallStatus_InstallFailed AgentInstallStatus_Status = 2
	// Agent did not install the package because it is not permitted to.
	// This may be for example the case when operating system permissions
	// prevent the agent from self-updating or when self-updating is disabled
	// by the user. error_message may also contain more details about
	// what exactly is not permitted.
	AgentInstallStatus_InstallNoPermission AgentInstallStatus_Status = 3
)

// Enum value maps for AgentInstallStatus_Status.
var (
	AgentInstallStatus_Status_name = map[int32]string{
		0: "Installed",
		1: "Installing",
		2: "InstallFailed",
		3: "InstallNoPermission",
	}
	AgentInstallStatus_Status_value = map[string]int32{
		"Installed":           0,
		"Installing":          1,
		"InstallFailed":       2,
		"InstallNoPermission": 3,
	}
)

func (x AgentInstallStatus_Status) Enum() *AgentInstallStatus_Status {
	p := new(AgentInstallStatus_Status)
	*p = x
	return p
}

func (x AgentInstallStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentInstallStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_opamp_proto_enumTypes[7].Descriptor()
}

func (AgentInstallStatus_Status) Type() protoreflect.EnumType {
	return &file_opamp_proto_enumTypes[7]
}

func (x AgentInstallStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentInstallStatus_Status.Descriptor instead.
func (AgentInstallStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{20, 0}
}

type AgentToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique identifier of the running instance of the agent. SHOULD remain
	// unchanged for the lifetime of the agent process.
	// Recommended format: https://github.com/ulid/spec
	InstanceUid string `protobuf:"bytes,1,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	// The status of the Agent. MUST be set in the first AgentToServer message that the
	// Agent sends after connecting.
	// This field SHOULD be unset if this information is unchanged since the last
	// AgentToServer message for this agent was sent in the stream.
	StatusReport *StatusReport `protobuf:"bytes,2,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
	// The list of the agent addons, including addon statuses.
	// This field SHOULD be unset if this information is unchanged since the last
	// AgentToServer message for this agent was sent in the stream.
	AddonStatuses *AgentAddonStatuses `protobuf:"bytes,3,opt,name=addon_statuses,json=addonStatuses,proto3" json:"addon_statuses,omitempty"`
	// The status of the installation operation that was previously offered by the server.
	// This field SHOULD be unset if the installation status is unchanged since the
	// last AgentToServer message.
	AgentInstallStatus *AgentInstallStatus `protobuf:"bytes,4,opt,name=agent_install_status,json=agentInstallStatus,proto3" json:"agent_install_status,omitempty"`
	// AgentDisconnect MUST be set in the last AgentToServer message sent from the
	// agent to the server.
	AgentDisconnect *AgentDisconnect `protobuf:"bytes,5,opt,name=agent_disconnect,json=agentDisconnect,proto3" json:"agent_disconnect,omitempty"`
}

func (x *AgentToServer) Reset() {
	*x = AgentToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentToServer) ProtoMessage() {}

func (x *AgentToServer) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentToServer.ProtoReflect.Descriptor instead.
func (*AgentToServer) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{0}
}

func (x *AgentToServer) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *AgentToServer) GetStatusReport() *StatusReport {
	if x != nil {
		return x.StatusReport
	}
	return nil
}

func (x *AgentToServer) GetAddonStatuses() *AgentAddonStatuses {
	if x != nil {
		return x.AddonStatuses
	}
	return nil
}

func (x *AgentToServer) GetAgentInstallStatus() *AgentInstallStatus {
	if x != nil {
		return x.AgentInstallStatus
	}
	return nil
}

func (x *AgentToServer) GetAgentDisconnect() *AgentDisconnect {
	if x != nil {
		return x.AgentDisconnect
	}
	return nil
}

// AgentDisconnect is the last message sent from the agent to the server. The server
// SHOULD forget the association of the agent instance with the message stream.
//
// If the message stream is closed in the transport layer then the server SHOULD
// forget association of all agent instances that were previously established for
// this message stream using AgentConnect message, even if the corresponding
// AgentDisconnect message were not explicitly received from the agent.
type AgentDisconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentDisconnect) Reset() {
	*x = AgentDisconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDisconnect) ProtoMessage() {}

func (x *AgentDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDisconnect.ProtoReflect.Descriptor instead.
func (*AgentDisconnect) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{1}
}

type ServerToAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent instance uid. MUST match the instance_uid field in AgentToServer message.
	// Used for multiplexing messages from/to multiple agents using one message stream.
	InstanceUid string `protobuf:"bytes,1,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	// error_response is set if the Server wants to indicate that something went wrong
	// during processing of an AgentToServer message. If error_response is set then
	// all other fields below must be unset and vice versa, if any of the fields below is
	// set then error_response must be unset.
	ErrorResponse *ServerErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,proto3" json:"error_response,omitempty"`
	// remote_config field is set when the server has a remote config offer for the agent.
	RemoteConfig *AgentRemoteConfig `protobuf:"bytes,3,opt,name=remote_config,json=remoteConfig,proto3" json:"remote_config,omitempty"`
	// This field is set when the Server wants the Agent to change one or more
	// of its client connection settings (destination, headers, certificate, etc).
	ConnectionSettings *ConnectionSettingsOffers `protobuf:"bytes,4,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
	// addons_available field is set when the server has addons to offer to the agent.
	AddonsAvailable *AddonsAvailable `protobuf:"bytes,5,opt,name=addons_available,json=addonsAvailable,proto3" json:"addons_available,omitempty"`
	// agent_package_available field is set when the server has a different version
	// of an agent package available for download.
	AgentPackageAvailable *AgentPackageAvailable `protobuf:"bytes,6,opt,name=agent_package_available,json=agentPackageAvailable,proto3" json:"agent_package_available,omitempty"`
	// Bit flags as defined by Flags bit masks.
	Flags ServerToAgent_Flags `protobuf:"varint,7,opt,name=flags,proto3,enum=opamp.proto.ServerToAgent_Flags" json:"flags,omitempty"`
	// Bitmask of flags defined by ServerCapabilities enum.
	// All bits that are not defined in ServerCapabilities enum MUST be set to 0
	// by the Server. This allows extending the protocol and the ServerCapabilities
	// enum in the future such that old Servers automatically report that they
	// don't support the new capability.
	// This field MUST be set in the first ServerToAgent sent by the Server and MAY
	// be omitted in subsequent ServerToAgent messages by setting it to
	// UnspecifiedServerCapability value.
	Capabilities ServerCapabilities `protobuf:"varint,8,opt,name=capabilities,proto3,enum=opamp.proto.ServerCapabilities" json:"capabilities,omitempty"`
}

func (x *ServerToAgent) Reset() {
	*x = ServerToAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToAgent) ProtoMessage() {}

func (x *ServerToAgent) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToAgent.ProtoReflect.Descriptor instead.
func (*ServerToAgent) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{2}
}

func (x *ServerToAgent) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *ServerToAgent) GetErrorResponse() *ServerErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return nil
}

func (x *ServerToAgent) GetRemoteConfig() *AgentRemoteConfig {
	if x != nil {
		return x.RemoteConfig
	}
	return nil
}

func (x *ServerToAgent) GetConnectionSettings() *ConnectionSettingsOffers {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

func (x *ServerToAgent) GetAddonsAvailable() *AddonsAvailable {
	if x != nil {
		return x.AddonsAvailable
	}
	return nil
}

func (x *ServerToAgent) GetAgentPackageAvailable() *AgentPackageAvailable {
	if x != nil {
		return x.AgentPackageAvailable
	}
	return nil
}

func (x *ServerToAgent) GetFlags() ServerToAgent_Flags {
	if x != nil {
		return x.Flags
	}
	return ServerToAgent_FlagsUnspecified
}

func (x *ServerToAgent) GetCapabilities() ServerCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return ServerCapabilities_UnspecifiedServerCapability
}

// The ConnectionSettings message is a collection of fields which comprise an
// offer from the server to the agent to use the specified settings for a network
// connection. It is not required that all fields in this message are specified.
// The server may specify only some of the fields, in which case it means that
// the server offers the agent to change only those fields, while keeping the
// rest of the fields unchanged.
//
// For example the server may send a ConnectionSettings message with only the
// certificate field set, while all other fields are unset. This means that
// the server wants the agent to use a new certificate and continue sending to
// the destination it is currently sending using the current header and other
// settings.
//
// For fields which reference other messages the field is considered unset
// when the reference is unset.
//
// For primitive field (string) we rely on the "flags" to describe that the
// field is not set (this is done to overcome the limitation of old protoc
// compilers don't generate methods that allow to check for the presence of
// the field.
type ConnectionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A URL, host:port or some other destination specifier.
	//
	// For OpAMP destination this MUST be a WebSocket URL and MUST be non-empty, for
	// example: "wss://example.com:4318/v1/opamp"
	//
	// For own telemetry destination this MUST be the full HTTP URL to an
	// OTLP/HTTP/Protobuf receiver. The value MUST be a full URL with path and schema
	// and SHOULD begin with "https://", for example "https://example.com:4318/v1/metrics"
	// The Agent MAY refuse to send the telemetry if the URL begins with "http://".
	// The field is considered unset if (flags & DestinationEndpointSet)==0.
	DestinationEndpoint string `protobuf:"bytes,1,opt,name=destination_endpoint,json=destinationEndpoint,proto3" json:"destination_endpoint,omitempty"`
	// Headers to use when connecting. Typically used to set access tokens or
	// other authorization headers. For HTTP-based protocols the agent should
	// set these in the request headers.
	// For example:
	// key="Authorization", Value="Basic YWxhZGRpbjpvcGVuc2VzYW1l".
	// if the field is unset then the agent SHOULD continue using the headers
	// that it currently has (if any).
	Headers *Headers `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	// A URL, host:port or some other specifier of an intermediary proxy.
	// Empty if no proxy is used.
	//
	// Example use case: if OpAMP proxy is also an OTLP intermediary Collector then
	// the OpAMP proxy can direct the Agents that connect to it to also send Agents's
	// OTLP metrics through its OTLP metrics pipeline.
	// Can be used for example by Otel Helm chart with 2 stage-collection when Agents
	// on K8s nodes are proxied through a standalone Collector.
	//
	// For example: "https://proxy.example.com:5678"
	// The field is considered unset if (flags & ProxyEndpointSet)==0.
	ProxyEndpoint string `protobuf:"bytes,3,opt,name=proxy_endpoint,json=proxyEndpoint,proto3" json:"proxy_endpoint,omitempty"`
	// Headers to use when connecting to a proxy.  For HTTP-based protocols
	// the agent should set these in the request headers.
	// If no proxy is used the Headers field must be present and must contain no headers.
	// For example:
	// key="Proxy-Authorization", value="Basic YWxhZGRpbjpvcGVuc2VzYW1l".
	// if the field is unset then the agent SHOULD continue using the proxy headers
	// that it currently has (if any).
	ProxyHeaders *Headers `protobuf:"bytes,4,opt,name=proxy_headers,json=proxyHeaders,proto3" json:"proxy_headers,omitempty"`
	// The agent should use the offered certificate to connect to the destination
	// from now on. If the agent is able to validate and connect using the offered
	// certificate the agent SHOULD forget any previous client certificates
	// for this connection.
	// This field is used to perform a client certificate revocation/rotation.
	// if the field is unset then the agent SHOULD continue using the certificate
	// that it currently has (if any).
	Certificate *TLSCertificate `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Bitfield of Flags.
	Flags ConnectionSettings_Flags `protobuf:"varint,6,opt,name=flags,proto3,enum=opamp.proto.ConnectionSettings_Flags" json:"flags,omitempty"`
}

func (x *ConnectionSettings) Reset() {
	*x = ConnectionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettings) ProtoMessage() {}

func (x *ConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettings.ProtoReflect.Descriptor instead.
func (*ConnectionSettings) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectionSettings) GetDestinationEndpoint() string {
	if x != nil {
		return x.DestinationEndpoint
	}
	return ""
}

func (x *ConnectionSettings) GetHeaders() *Headers {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ConnectionSettings) GetProxyEndpoint() string {
	if x != nil {
		return x.ProxyEndpoint
	}
	return ""
}

func (x *ConnectionSettings) GetProxyHeaders() *Headers {
	if x != nil {
		return x.ProxyHeaders
	}
	return nil
}

func (x *ConnectionSettings) GetCertificate() *TLSCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *ConnectionSettings) GetFlags() ConnectionSettings_Flags {
	if x != nil {
		return x.Flags
	}
	return ConnectionSettings__
}

type Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []*Header `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *Headers) Reset() {
	*x = Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headers) ProtoMessage() {}

func (x *Headers) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headers.ProtoReflect.Descriptor instead.
func (*Headers) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{4}
}

func (x *Headers) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{5}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TLSCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PEM-encoded public key of the certificate. Required.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// PEM-encoded private key of the certificate. Required.
	PrivateKey []byte `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// PEM-encoded public key of the CA that signed this certificate.
	// Optional. MUST be specified if the certificate is CA-signed.
	// Can be stored by TLS-terminating intermediary proxies in order to verify
	// the connecting client's certificate in the future.
	// It is not recommended that the agent accepts this CA as an authority for
	// any purposes.
	CaPublicKey []byte `protobuf:"bytes,3,opt,name=ca_public_key,json=caPublicKey,proto3" json:"ca_public_key,omitempty"`
}

func (x *TLSCertificate) Reset() {
	*x = TLSCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificate) ProtoMessage() {}

func (x *TLSCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificate.ProtoReflect.Descriptor instead.
func (*TLSCertificate) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{6}
}

func (x *TLSCertificate) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *TLSCertificate) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *TLSCertificate) GetCaPublicKey() []byte {
	if x != nil {
		return x.CaPublicKey
	}
	return nil
}

type ConnectionSettingsOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash of all settings, including settings that may be omitted from this message
	// because they are unchanged. The agent should remember the hash and include
	// it in the subsequent ConnectionStatuses message, in the last_connection_settings_hash
	// field.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Settings to connect to the OpAMP server.
	// If this field is not set then the agent should assume that the settings are
	// unchanged and should continue using existing settings.
	// The agent MUST verify the offered connection settings by actually connecting
	// before accepting the setting to ensure it does not loose access to the OpAMP
	// server due to invalid settings.
	Opamp *ConnectionSettings `protobuf:"bytes,2,opt,name=opamp,proto3" json:"opamp,omitempty"`
	// Settings to connect to an OTLP metrics backend to send agent's own metrics to.
	// If this field is not set then the agent should assume that the settings
	// are unchanged.
	//
	// Once accepted the agent should periodically send to the specified destination
	// its own metrics, i.e. metrics of the agent process and any custom metrics that
	// describe the agent state.
	//
	// The Resource in the OTLP metrics SHOULD describe the agent:
	// - service.instance.id SHOULD be set to Agent's instance uid that is used in
	//   the OpAMP messages.
	// - service.name SHOULD be set to Agent's type, matching the value of
	//   agent_type field in AgentDescription message.
	// - service.version SHOULD be set to Agent's version, matching the value of
	//   agent_version field in AgentDescription message.
	// - any other applicable Resource attributes that describe the agent, such as
	//   Operating System on which the Agent runs as described here
	//   https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md
	//
	// Process metrics MUST follow the conventions for processes:
	// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/semantic_conventions/process-metrics.md
	OwnMetrics *ConnectionSettings `protobuf:"bytes,3,opt,name=own_metrics,json=ownMetrics,proto3" json:"own_metrics,omitempty"`
	// Similar to own_metrics, but for traces.
	OwnTraces *ConnectionSettings `protobuf:"bytes,4,opt,name=own_traces,json=ownTraces,proto3" json:"own_traces,omitempty"`
	// Similar to own_metrics, but for logs.
	OwnLogs *ConnectionSettings `protobuf:"bytes,5,opt,name=own_logs,json=ownLogs,proto3" json:"own_logs,omitempty"`
	// Another set of connection settings, with a string name associated with each.
	// How the agent uses these is agent-specific. Typically the name represents
	// the name of the destination to connect to (as it is known to the agent).
	// If this field is not set then the agent should assume that the other_connections
	// settings are unchanged.
	OtherConnections map[string]*ConnectionSettings `protobuf:"bytes,6,rep,name=other_connections,json=otherConnections,proto3" json:"other_connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConnectionSettingsOffers) Reset() {
	*x = ConnectionSettingsOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionSettingsOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettingsOffers) ProtoMessage() {}

func (x *ConnectionSettingsOffers) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettingsOffers.ProtoReflect.Descriptor instead.
func (*ConnectionSettingsOffers) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectionSettingsOffers) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ConnectionSettingsOffers) GetOpamp() *ConnectionSettings {
	if x != nil {
		return x.Opamp
	}
	return nil
}

func (x *ConnectionSettingsOffers) GetOwnMetrics() *ConnectionSettings {
	if x != nil {
		return x.OwnMetrics
	}
	return nil
}

func (x *ConnectionSettingsOffers) GetOwnTraces() *ConnectionSettings {
	if x != nil {
		return x.OwnTraces
	}
	return nil
}

func (x *ConnectionSettingsOffers) GetOwnLogs() *ConnectionSettings {
	if x != nil {
		return x.OwnLogs
	}
	return nil
}

func (x *ConnectionSettingsOffers) GetOtherConnections() map[string]*ConnectionSettings {
	if x != nil {
		return x.OtherConnections
	}
	return nil
}

// List of addons that the server offers to the agent.
type AddonsAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of addons. Keys are addon names, values are the addons available for download.
	Addons map[string]*AddonAvailable `protobuf:"bytes,1,rep,name=addons,proto3" json:"addons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Aggregate hash of all remotely installed addons. The agent SHOULD include this
	// value in subsequent StatusReport messages. This in turn allows the management
	// server to identify that a different set of addons is available for the agent
	// and specify the available addons in the next DataToAgent message.
	//
	// This field MUST be always set if the management server supports addons
	// of agents.
	//
	// The hash is calculated as an aggregate of all addon names and content.
	AllAddonsHash []byte `protobuf:"bytes,2,opt,name=all_addons_hash,json=allAddonsHash,proto3" json:"all_addons_hash,omitempty"`
}

func (x *AddonsAvailable) Reset() {
	*x = AddonsAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonsAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonsAvailable) ProtoMessage() {}

func (x *AddonsAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonsAvailable.ProtoReflect.Descriptor instead.
func (*AddonsAvailable) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{8}
}

func (x *AddonsAvailable) GetAddons() map[string]*AddonAvailable {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *AddonsAvailable) GetAllAddonsHash() []byte {
	if x != nil {
		return x.AllAddonsHash
	}
	return nil
}

// An Addon is a collection of named files. The content of the files, functionality
// provided by the addons, how they are stored and used by the Agent side is agent
// type-specific and is outside the concerns of the OpAMP protocol.
//
// If the agent does not have an installed addon with the specified name then
// it SHOULD download it from the specified URL and install it.
//
// If the agent already has an installed addon with the specified name
// but with a different hash then the agent SHOULD download and
// install the addon again, since it is a different version of the same addon.
//
// If the agent has an installed addon with the specified name and the same
// hash then the agent does not need to do anything, it already
// has the right version of the addon.
type AddonAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The downloadable file of the addon.
	File *DownloadableFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// The hash of the addon. SHOULD be calculated based on addon name and
	// content of the file of the addon.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *AddonAvailable) Reset() {
	*x = AddonAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonAvailable) ProtoMessage() {}

func (x *AddonAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonAvailable.ProtoReflect.Descriptor instead.
func (*AddonAvailable) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{9}
}

func (x *AddonAvailable) GetFile() *DownloadableFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *AddonAvailable) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type DownloadableFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL from which the file can be downloaded using HTTP GET request.
	// The server at the specified URL SHOULD support range requests
	// to allow for resuming downloads.
	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	// The hash of the file content. Can be used by the Agent to verify that the file
	// was downloaded correctly.
	ContentHash []byte `protobuf:"bytes,2,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
}

func (x *DownloadableFile) Reset() {
	*x = DownloadableFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadableFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadableFile) ProtoMessage() {}

func (x *DownloadableFile) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadableFile.ProtoReflect.Descriptor instead.
func (*DownloadableFile) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadableFile) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *DownloadableFile) GetContentHash() []byte {
	if x != nil {
		return x.ContentHash
	}
	return nil
}

type ServerErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ServerErrorResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=opamp.proto.ServerErrorResponse_Type" json:"type,omitempty"`
	// Error message in the string form, typically human readable.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Types that are assignable to Details:
	//	*ServerErrorResponse_RetryInfo
	Details isServerErrorResponse_Details `protobuf_oneof:"Details"`
}

func (x *ServerErrorResponse) Reset() {
	*x = ServerErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerErrorResponse) ProtoMessage() {}

func (x *ServerErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerErrorResponse.ProtoReflect.Descriptor instead.
func (*ServerErrorResponse) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{11}
}

func (x *ServerErrorResponse) GetType() ServerErrorResponse_Type {
	if x != nil {
		return x.Type
	}
	return ServerErrorResponse_Unknown
}

func (x *ServerErrorResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (m *ServerErrorResponse) GetDetails() isServerErrorResponse_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *ServerErrorResponse) GetRetryInfo() *RetryInfo {
	if x, ok := x.GetDetails().(*ServerErrorResponse_RetryInfo); ok {
		return x.RetryInfo
	}
	return nil
}

type isServerErrorResponse_Details interface {
	isServerErrorResponse_Details()
}

type ServerErrorResponse_RetryInfo struct {
	// Additional information about retrying if type==UNAVAILABLE.
	RetryInfo *RetryInfo `protobuf:"bytes,3,opt,name=retry_info,json=retryInfo,proto3,oneof"`
}

func (*ServerErrorResponse_RetryInfo) isServerErrorResponse_Details() {}

type RetryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryAfterNanoseconds uint64 `protobuf:"varint,1,opt,name=retry_after_nanoseconds,json=retryAfterNanoseconds,proto3" json:"retry_after_nanoseconds,omitempty"`
}

func (x *RetryInfo) Reset() {
	*x = RetryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryInfo) ProtoMessage() {}

func (x *RetryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryInfo.ProtoReflect.Descriptor instead.
func (*RetryInfo) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{12}
}

func (x *RetryInfo) GetRetryAfterNanoseconds() uint64 {
	if x != nil {
		return x.RetryAfterNanoseconds
	}
	return 0
}

// AgentPackageAvailable message is sent from the server to the agent to indicate that there
// is an agent package available for the agent to download and self-update. Can be
// used by the server to initiate an agent upgrade or downgrade.
type AgentPackageAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The agent version that is available on the server side. The agent may for
	// example use this information to avoid downloading a package that was previously
	// already downloaded and failed to install.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The downloadable file of the package.
	// Executable files SHOULD be code-signed and the signature SHOULD be verified
	// by the agent after downloading and before installing.
	File *DownloadableFile `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *AgentPackageAvailable) Reset() {
	*x = AgentPackageAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPackageAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPackageAvailable) ProtoMessage() {}

func (x *AgentPackageAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPackageAvailable.ProtoReflect.Descriptor instead.
func (*AgentPackageAvailable) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{13}
}

func (x *AgentPackageAvailable) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentPackageAvailable) GetFile() *DownloadableFile {
	if x != nil {
		return x.File
	}
	return nil
}

type AgentDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reverse FQDN that uniquely identifies the agent type, e.g. "io.opentelemetry.collector"
	AgentType string `protobuf:"bytes,1,opt,name=agent_type,json=agentType,proto3" json:"agent_type,omitempty"`
	// Version number of the agent build. The server can use this information to
	// decide if it wants to offer a package of a different version to the agent
	// via PackageAvailable message.
	AgentVersion string `protobuf:"bytes,2,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// Attributes that describe the agent and the environment it runs in.
	// Keys/values are according to OpenTelemetry semantic conventions, see:
	// https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions
	//
	// The following attributes SHOULD be included:
	// - os.type, os.version - to describe where the agent runs.
	//
	// The following attributes are recommended to be included:
	// - host.* to describe the host the agent runs on.
	// - cloud.* to describe the cloud where the host is located.
	// - other os.* attributes not listed in the previous paragraph.
	// - any other relevant Resource attributes that describe this agent and the
	//   environment it runs in.
	// - any user-defined attributes that the end user would like to associate with
	//   this agent.
	AgentAttributes []*KeyValue `protobuf:"bytes,3,rep,name=agent_attributes,json=agentAttributes,proto3" json:"agent_attributes,omitempty"`
}

func (x *AgentDescription) Reset() {
	*x = AgentDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDescription) ProtoMessage() {}

func (x *AgentDescription) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDescription.ProtoReflect.Descriptor instead.
func (*AgentDescription) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{14}
}

func (x *AgentDescription) GetAgentType() string {
	if x != nil {
		return x.AgentType
	}
	return ""
}

func (x *AgentDescription) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *AgentDescription) GetAgentAttributes() []*KeyValue {
	if x != nil {
		return x.AgentAttributes
	}
	return nil
}

type StatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data that describes the agent, its type, where it runs, etc.
	// May be omitted if nothing changed since last StatusReport.
	AgentDescription *AgentDescription `protobuf:"bytes,1,opt,name=agent_description,json=agentDescription,proto3" json:"agent_description,omitempty"`
	// Current effective config of the agent. May be different from the remote config
	// received from the management server, e.g. because the agent uses a local
	// config instead (or in addition).
	//
	// This field SHOULD be unset if the effective config is unchanged since the last
	// StatusReport message.
	EffectiveConfig *EffectiveConfig `protobuf:"bytes,2,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// The status of the remote config that was previously received from the server.
	// This field SHOULD be unset if the remote config status is unchanged since the
	// last StatusReport message.
	RemoteConfigStatus *RemoteConfigStatus `protobuf:"bytes,3,opt,name=remote_config_status,json=remoteConfigStatus,proto3" json:"remote_config_status,omitempty"`
	// Bitmask of flags defined by AgentCapabilities enum.
	// All bits that are not defined in AgentCapabilities enum MUST be set to 0 by
	// the Agent. This allows extending the protocol and the AgentCapabilities enum
	// in the future such that old Agents automatically report that they don't
	// support the new capability.
	// This field MUST be set in the first StatusReport sent by the Agent and MAY
	// be omitted in subsequent StatusReport messages by setting it to
	// UnspecifiedAgentCapability value.
	Capabilities AgentCapabilities `protobuf:"varint,4,opt,name=capabilities,proto3,enum=opamp.proto.AgentCapabilities" json:"capabilities,omitempty"`
}

func (x *StatusReport) Reset() {
	*x = StatusReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport) ProtoMessage() {}

func (x *StatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport.ProtoReflect.Descriptor instead.
func (*StatusReport) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{15}
}

func (x *StatusReport) GetAgentDescription() *AgentDescription {
	if x != nil {
		return x.AgentDescription
	}
	return nil
}

func (x *StatusReport) GetEffectiveConfig() *EffectiveConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *StatusReport) GetRemoteConfigStatus() *RemoteConfigStatus {
	if x != nil {
		return x.RemoteConfigStatus
	}
	return nil
}

func (x *StatusReport) GetCapabilities() AgentCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return AgentCapabilities_UnspecifiedAgentCapability
}

type EffectiveConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the effective config. After establishing OpAMP connection if the
	// effective config did not change since it was last reported during the previous
	// connection sessions the Agent is recommended to include only the hash and omit the
	// config_map field to save bandwidth.
	// The Server SHOULD compare this hash with the last hash of effective config
	// it received from the Agent and if the hashes are different the Server SHOULD
	// ask the Agent to report its full effective config by sending a DataForAgent
	// message with ReportEffectiveConfig flag set.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The effective config of the Agent. SHOULD be omitted if unchanged since last
	// reported.
	// MUST be set if the Agent has received the ReportEffectiveConfig flag in the
	// DataForAgent message.
	ConfigMap *AgentConfigMap `protobuf:"bytes,2,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty"`
}

func (x *EffectiveConfig) Reset() {
	*x = EffectiveConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectiveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectiveConfig) ProtoMessage() {}

func (x *EffectiveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectiveConfig.ProtoReflect.Descriptor instead.
func (*EffectiveConfig) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{16}
}

func (x *EffectiveConfig) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *EffectiveConfig) GetConfigMap() *AgentConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

type RemoteConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the remote config that was last received by this agent from the
	// management server. The server SHOULD compare this hash with the config hash it has
	// for the agent and if the hashes are different the server MUST include
	// the remote_config field in the response in the DataForAgent message.
	LastRemoteConfigHash []byte                    `protobuf:"bytes,1,opt,name=last_remote_config_hash,json=lastRemoteConfigHash,proto3" json:"last_remote_config_hash,omitempty"`
	Status               RemoteConfigStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=opamp.proto.RemoteConfigStatus_Status" json:"status,omitempty"`
	ErrorMessage         string                    `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RemoteConfigStatus) Reset() {
	*x = RemoteConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigStatus) ProtoMessage() {}

func (x *RemoteConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigStatus.ProtoReflect.Descriptor instead.
func (*RemoteConfigStatus) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{17}
}

func (x *RemoteConfigStatus) GetLastRemoteConfigHash() []byte {
	if x != nil {
		return x.LastRemoteConfigHash
	}
	return nil
}

func (x *RemoteConfigStatus) GetStatus() RemoteConfigStatus_Status {
	if x != nil {
		return x.Status
	}
	return RemoteConfigStatus_Applied
}

func (x *RemoteConfigStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// The status of all addons that the agent has or was offered.
type AgentAddonStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of addons. Keys are addon names, and MUST match the name field of AgentAddonStatus.
	Addons map[string]*AgentAddonStatus `protobuf:"bytes,1,rep,name=addons,proto3" json:"addons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The aggregate hash of all addons that this Agent previously received from
	// the server via AddonsAvailable message.
	// The server SHOULD compare this hash to the aggregate hash of all addons that
	// it has for this Agent and if the hashes are different the server SHOULD send
	// an AddonsAvailable message to the agent.
	ServerProvidedAllAddonsHash []byte `protobuf:"bytes,2,opt,name=server_provided_all_addons_hash,json=serverProvidedAllAddonsHash,proto3" json:"server_provided_all_addons_hash,omitempty"`
}

func (x *AgentAddonStatuses) Reset() {
	*x = AgentAddonStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAddonStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAddonStatuses) ProtoMessage() {}

func (x *AgentAddonStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAddonStatuses.ProtoReflect.Descriptor instead.
func (*AgentAddonStatuses) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{18}
}

func (x *AgentAddonStatuses) GetAddons() map[string]*AgentAddonStatus {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *AgentAddonStatuses) GetServerProvidedAllAddonsHash() []byte {
	if x != nil {
		return x.ServerProvidedAllAddonsHash
	}
	return nil
}

// The status of a single addon.
type AgentAddonStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Addon name. MUST be always set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The hash of the addon that the agent has.
	// MUST be set if the agent has this addon.
	// MUST be empty if the agent does not have this addon. This may be the case for
	// example if the addon was offered by server but failed to install and the agent
	// did not have this addon previously.
	AgentHasHash []byte `protobuf:"bytes,2,opt,name=agent_has_hash,json=agentHasHash,proto3" json:"agent_has_hash,omitempty"`
	// The hash of the addon that the server offered to the agent.
	// MUST be set if the installation is initiated by an
	// earlier offer from the server to install this addon.
	//
	// MUST be empty if the Agent has this addon but it was installed locally and
	// was not offered by the server.
	//
	// Note that it is possible for both has_hash and
	// server_offered_hash fields to be set and to have different values.
	// This is for example possible if the agent already has a version of the addon
	// successfully installed, the server offers a different version, but the agent
	// fails to install that version.
	ServerOfferedHash []byte                  `protobuf:"bytes,3,opt,name=server_offered_hash,json=serverOfferedHash,proto3" json:"server_offered_hash,omitempty"`
	Status            AgentAddonStatus_Status `protobuf:"varint,4,opt,name=status,proto3,enum=opamp.proto.AgentAddonStatus_Status" json:"status,omitempty"`
	// Error message if the status is erroneous.
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AgentAddonStatus) Reset() {
	*x = AgentAddonStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAddonStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAddonStatus) ProtoMessage() {}

func (x *AgentAddonStatus) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAddonStatus.ProtoReflect.Descriptor instead.
func (*AgentAddonStatus) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{19}
}

func (x *AgentAddonStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentAddonStatus) GetAgentHasHash() []byte {
	if x != nil {
		return x.AgentHasHash
	}
	return nil
}

func (x *AgentAddonStatus) GetServerOfferedHash() []byte {
	if x != nil {
		return x.ServerOfferedHash
	}
	return nil
}

func (x *AgentAddonStatus) GetStatus() AgentAddonStatus_Status {
	if x != nil {
		return x.Status
	}
	return AgentAddonStatus_Installed
}

func (x *AgentAddonStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// The status of the last install status performed by the agent.
type AgentInstallStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version field from the AgentPackageAvailable that the server offered
	// to the agent. MUST be set if the agent previously received an offer from
	// the server to install this agent.
	ServerOfferedVersion string `protobuf:"bytes,1,opt,name=server_offered_version,json=serverOfferedVersion,proto3" json:"server_offered_version,omitempty"`
	// The hash of the DownloadableFileList of agent package that the server
	// offered to the agent.
	ServerOfferedHash []byte                    `protobuf:"bytes,2,opt,name=server_offered_hash,json=serverOfferedHash,proto3" json:"server_offered_hash,omitempty"`
	Status            AgentInstallStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=opamp.proto.AgentInstallStatus_Status" json:"status,omitempty"`
	// Optional human readable error message if the status is erroneous.
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AgentInstallStatus) Reset() {
	*x = AgentInstallStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInstallStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInstallStatus) ProtoMessage() {}

func (x *AgentInstallStatus) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInstallStatus.ProtoReflect.Descriptor instead.
func (*AgentInstallStatus) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{20}
}

func (x *AgentInstallStatus) GetServerOfferedVersion() string {
	if x != nil {
		return x.ServerOfferedVersion
	}
	return ""
}

func (x *AgentInstallStatus) GetServerOfferedHash() []byte {
	if x != nil {
		return x.ServerOfferedHash
	}
	return nil
}

func (x *AgentInstallStatus) GetStatus() AgentInstallStatus_Status {
	if x != nil {
		return x.Status
	}
	return AgentInstallStatus_Installed
}

func (x *AgentInstallStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type AgentRemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent config offered by the management server to the agent instance. SHOULD NOT be
	// set if the config for this agent has not changed since it was last requested (i.e.
	// AgentConfigRequest.last_remote_config_hash field is equal to
	// AgentConfigResponse.config_hash field).
	Config *AgentConfigMap `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Hash of "config". The agent SHOULD include this value in subsequent StatusReport
	// messages. This in turn allows the management server to identify that a new config is
	// available for the agent.
	//
	// This field MUST be always set if the management server supports remote configuration
	// of agents.
	//
	// Management server must choose a hashing function that guarantees lack of hash
	// collisions in practice.
	ConfigHash []byte `protobuf:"bytes,2,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
}

func (x *AgentRemoteConfig) Reset() {
	*x = AgentRemoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRemoteConfig) ProtoMessage() {}

func (x *AgentRemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRemoteConfig.ProtoReflect.Descriptor instead.
func (*AgentRemoteConfig) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{21}
}

func (x *AgentRemoteConfig) GetConfig() *AgentConfigMap {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AgentRemoteConfig) GetConfigHash() []byte {
	if x != nil {
		return x.ConfigHash
	}
	return nil
}

type AgentConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of configs. Keys are config file names or config section names.
	// The configuration is assumed to be a collection of one or more named config files
	// or sections.
	// For agents that use a single config file or section the map SHOULD contain a single
	// entry and the key may be an empty string.
	ConfigMap map[string]*AgentConfigFile `protobuf:"bytes,1,rep,name=config_map,json=configMap,proto3" json:"config_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgentConfigMap) Reset() {
	*x = AgentConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfigMap) ProtoMessage() {}

func (x *AgentConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfigMap.ProtoReflect.Descriptor instead.
func (*AgentConfigMap) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{22}
}

func (x *AgentConfigMap) GetConfigMap() map[string]*AgentConfigFile {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

type AgentConfigFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Config file or section body. The content, format and encoding depends on the agent
	// type. The content_type field may optionally describe the MIME type of the body.
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Optional MIME Content-Type that describes what's in the body field, for
	// example "text/yaml".
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *AgentConfigFile) Reset() {
	*x = AgentConfigFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opamp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfigFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfigFile) ProtoMessage() {}

func (x *AgentConfigFile) ProtoReflect() protoreflect.Message {
	mi := &file_opamp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfigFile.ProtoReflect.Descriptor instead.
func (*AgentConfigFile) Descriptor() ([]byte, []int) {
	return file_opamp_proto_rawDescGZIP(), []int{23}
}

func (x *AgentConfigFile) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AgentConfigFile) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

var File_opamp_proto protoreflect.FileDescriptor

var file_opamp_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f,
	0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x61, 0x6e, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x02, 0x0a, 0x0d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x46, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x8b, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x43,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x02, 0x22, 0x97, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x40, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x10, 0x02, 0x22, 0x38,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x0e, 0x54, 0x4c,
	0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0xf3, 0x03, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x05, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a,
	0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x64, 0x0a, 0x15, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x56, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x58, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xef, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x43, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x42, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xf9, 0x01, 0x0a, 0x12,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x41, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x58, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0xb4, 0x02, 0x0a, 0x12, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x22, 0x69, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb7, 0x01, 0x0a, 0x0e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x49,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a,
	0xfd, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10,
	0x20, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x40,
	0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x80, 0x01, 0x2a,
	0xed, 0x02, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x40, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x77, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x10, 0x80, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x4f, 0x77, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x80, 0x02,
	0x12, 0x13, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x77, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x10, 0x80, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x4f, 0x70, 0x41, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x80, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x80, 0x10, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x61,
	0x6d, 0x70, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opamp_proto_rawDescOnce sync.Once
	file_opamp_proto_rawDescData = file_opamp_proto_rawDesc
)

func file_opamp_proto_rawDescGZIP() []byte {
	file_opamp_proto_rawDescOnce.Do(func() {
		file_opamp_proto_rawDescData = protoimpl.X.CompressGZIP(file_opamp_proto_rawDescData)
	})
	return file_opamp_proto_rawDescData
}

var file_opamp_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_opamp_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_opamp_proto_goTypes = []interface{}{
	(ServerCapabilities)(0),          // 0: opamp.proto.ServerCapabilities
	(AgentCapabilities)(0),           // 1: opamp.proto.AgentCapabilities
	(ServerToAgent_Flags)(0),         // 2: opamp.proto.ServerToAgent.Flags
	(ConnectionSettings_Flags)(0),    // 3: opamp.proto.ConnectionSettings.Flags
	(ServerErrorResponse_Type)(0),    // 4: opamp.proto.ServerErrorResponse.Type
	(RemoteConfigStatus_Status)(0),   // 5: opamp.proto.RemoteConfigStatus.Status
	(AgentAddonStatus_Status)(0),     // 6: opamp.proto.AgentAddonStatus.Status
	(AgentInstallStatus_Status)(0),   // 7: opamp.proto.AgentInstallStatus.Status
	(*AgentToServer)(nil),            // 8: opamp.proto.AgentToServer
	(*AgentDisconnect)(nil),          // 9: opamp.proto.AgentDisconnect
	(*ServerToAgent)(nil),            // 10: opamp.proto.ServerToAgent
	(*ConnectionSettings)(nil),       // 11: opamp.proto.ConnectionSettings
	(*Headers)(nil),                  // 12: opamp.proto.Headers
	(*Header)(nil),                   // 13: opamp.proto.Header
	(*TLSCertificate)(nil),           // 14: opamp.proto.TLSCertificate
	(*ConnectionSettingsOffers)(nil), // 15: opamp.proto.ConnectionSettingsOffers
	(*AddonsAvailable)(nil),          // 16: opamp.proto.AddonsAvailable
	(*AddonAvailable)(nil),           // 17: opamp.proto.AddonAvailable
	(*DownloadableFile)(nil),         // 18: opamp.proto.DownloadableFile
	(*ServerErrorResponse)(nil),      // 19: opamp.proto.ServerErrorResponse
	(*RetryInfo)(nil),                // 20: opamp.proto.RetryInfo
	(*AgentPackageAvailable)(nil),    // 21: opamp.proto.AgentPackageAvailable
	(*AgentDescription)(nil),         // 22: opamp.proto.AgentDescription
	(*StatusReport)(nil),             // 23: opamp.proto.StatusReport
	(*EffectiveConfig)(nil),          // 24: opamp.proto.EffectiveConfig
	(*RemoteConfigStatus)(nil),       // 25: opamp.proto.RemoteConfigStatus
	(*AgentAddonStatuses)(nil),       // 26: opamp.proto.AgentAddonStatuses
	(*AgentAddonStatus)(nil),         // 27: opamp.proto.AgentAddonStatus
	(*AgentInstallStatus)(nil),       // 28: opamp.proto.AgentInstallStatus
	(*AgentRemoteConfig)(nil),        // 29: opamp.proto.AgentRemoteConfig
	(*AgentConfigMap)(nil),           // 30: opamp.proto.AgentConfigMap
	(*AgentConfigFile)(nil),          // 31: opamp.proto.AgentConfigFile
	nil,                              // 32: opamp.proto.ConnectionSettingsOffers.OtherConnectionsEntry
	nil,                              // 33: opamp.proto.AddonsAvailable.AddonsEntry
	nil,                              // 34: opamp.proto.AgentAddonStatuses.AddonsEntry
	nil,                              // 35: opamp.proto.AgentConfigMap.ConfigMapEntry
	(*KeyValue)(nil),                 // 36: opamp.proto.KeyValue
}
var file_opamp_proto_depIdxs = []int32{
	23, // 0: opamp.proto.AgentToServer.status_report:type_name -> opamp.proto.StatusReport
	26, // 1: opamp.proto.AgentToServer.addon_statuses:type_name -> opamp.proto.AgentAddonStatuses
	28, // 2: opamp.proto.AgentToServer.agent_install_status:type_name -> opamp.proto.AgentInstallStatus
	9,  // 3: opamp.proto.AgentToServer.agent_disconnect:type_name -> opamp.proto.AgentDisconnect
	19, // 4: opamp.proto.ServerToAgent.error_response:type_name -> opamp.proto.ServerErrorResponse
	29, // 5: opamp.proto.ServerToAgent.remote_config:type_name -> opamp.proto.AgentRemoteConfig
	15, // 6: opamp.proto.ServerToAgent.connection_settings:type_name -> opamp.proto.ConnectionSettingsOffers
	16, // 7: opamp.proto.ServerToAgent.addons_available:type_name -> opamp.proto.AddonsAvailable
	21, // 8: opamp.proto.ServerToAgent.agent_package_available:type_name -> opamp.proto.AgentPackageAvailable
	2,  // 9: opamp.proto.ServerToAgent.flags:type_name -> opamp.proto.ServerToAgent.Flags
	0,  // 10: opamp.proto.ServerToAgent.capabilities:type_name -> opamp.proto.ServerCapabilities
	12, // 11: opamp.proto.ConnectionSettings.headers:type_name -> opamp.proto.Headers
	12, // 12: opamp.proto.ConnectionSettings.proxy_headers:type_name -> opamp.proto.Headers
	14, // 13: opamp.proto.ConnectionSettings.certificate:type_name -> opamp.proto.TLSCertificate
	3,  // 14: opamp.proto.ConnectionSettings.flags:type_name -> opamp.proto.ConnectionSettings.Flags
	13, // 15: opamp.proto.Headers.headers:type_name -> opamp.proto.Header
	11, // 16: opamp.proto.ConnectionSettingsOffers.opamp:type_name -> opamp.proto.ConnectionSettings
	11, // 17: opamp.proto.ConnectionSettingsOffers.own_metrics:type_name -> opamp.proto.ConnectionSettings
	11, // 18: opamp.proto.ConnectionSettingsOffers.own_traces:type_name -> opamp.proto.ConnectionSettings
	11, // 19: opamp.proto.ConnectionSettingsOffers.own_logs:type_name -> opamp.proto.ConnectionSettings
	32, // 20: opamp.proto.ConnectionSettingsOffers.other_connections:type_name -> opamp.proto.ConnectionSettingsOffers.OtherConnectionsEntry
	33, // 21: opamp.proto.AddonsAvailable.addons:type_name -> opamp.proto.AddonsAvailable.AddonsEntry
	18, // 22: opamp.proto.AddonAvailable.file:type_name -> opamp.proto.DownloadableFile
	4,  // 23: opamp.proto.ServerErrorResponse.type:type_name -> opamp.proto.ServerErrorResponse.Type
	20, // 24: opamp.proto.ServerErrorResponse.retry_info:type_name -> opamp.proto.RetryInfo
	18, // 25: opamp.proto.AgentPackageAvailable.file:type_name -> opamp.proto.DownloadableFile
	36, // 26: opamp.proto.AgentDescription.agent_attributes:type_name -> opamp.proto.KeyValue
	22, // 27: opamp.proto.StatusReport.agent_description:type_name -> opamp.proto.AgentDescription
	24, // 28: opamp.proto.StatusReport.effective_config:type_name -> opamp.proto.EffectiveConfig
	25, // 29: opamp.proto.StatusReport.remote_config_status:type_name -> opamp.proto.RemoteConfigStatus
	1,  // 30: opamp.proto.StatusReport.capabilities:type_name -> opamp.proto.AgentCapabilities
	30, // 31: opamp.proto.EffectiveConfig.config_map:type_name -> opamp.proto.AgentConfigMap
	5,  // 32: opamp.proto.RemoteConfigStatus.status:type_name -> opamp.proto.RemoteConfigStatus.Status
	34, // 33: opamp.proto.AgentAddonStatuses.addons:type_name -> opamp.proto.AgentAddonStatuses.AddonsEntry
	6,  // 34: opamp.proto.AgentAddonStatus.status:type_name -> opamp.proto.AgentAddonStatus.Status
	7,  // 35: opamp.proto.AgentInstallStatus.status:type_name -> opamp.proto.AgentInstallStatus.Status
	30, // 36: opamp.proto.AgentRemoteConfig.config:type_name -> opamp.proto.AgentConfigMap
	35, // 37: opamp.proto.AgentConfigMap.config_map:type_name -> opamp.proto.AgentConfigMap.ConfigMapEntry
	11, // 38: opamp.proto.ConnectionSettingsOffers.OtherConnectionsEntry.value:type_name -> opamp.proto.ConnectionSettings
	17, // 39: opamp.proto.AddonsAvailable.AddonsEntry.value:type_name -> opamp.proto.AddonAvailable
	27, // 40: opamp.proto.AgentAddonStatuses.AddonsEntry.value:type_name -> opamp.proto.AgentAddonStatus
	31, // 41: opamp.proto.AgentConfigMap.ConfigMapEntry.value:type_name -> opamp.proto.AgentConfigFile
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_opamp_proto_init() }
func file_opamp_proto_init() {
	if File_opamp_proto != nil {
		return
	}
	file_anyvalue_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_opamp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDisconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionSettingsOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonsAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadableFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPackageAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectiveConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAddonStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAddonStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInstallStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRemoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opamp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfigFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_opamp_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ServerErrorResponse_RetryInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opamp_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opamp_proto_goTypes,
		DependencyIndexes: file_opamp_proto_depIdxs,
		EnumInfos:         file_opamp_proto_enumTypes,
		MessageInfos:      file_opamp_proto_msgTypes,
	}.Build()
	File_opamp_proto = out.File
	file_opamp_proto_rawDesc = nil
	file_opamp_proto_goTypes = nil
	file_opamp_proto_depIdxs = nil
}
