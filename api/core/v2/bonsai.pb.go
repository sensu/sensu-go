// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bonsai.proto

package v2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BonsaiAsset stores information about an asset (metadata, versions, etc.) from Bonsai
type BonsaiAsset struct {
	// Name is the full name (including namespace) of the asset
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description is the description for the asset
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// URL is the API URL for the asset
	URL string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// GithubURL is the Github URL for the asset
	GithubURL string `protobuf:"bytes,5,opt,name=github_url,json=githubUrl,proto3" json:"github_url,omitempty"`
	// DownloadURL is the URL to download the asset source code
	DownloadURL string `protobuf:"bytes,6,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	// Versions is a list of asset versions
	Versions             []*BonsaiAssetVersionGrouping `protobuf:"bytes,7,rep,name=versions,proto3" json:"versions"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *BonsaiAsset) Reset()         { *m = BonsaiAsset{} }
func (m *BonsaiAsset) String() string { return proto.CompactTextString(m) }
func (*BonsaiAsset) ProtoMessage()    {}
func (*BonsaiAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ac055deb26f46, []int{0}
}
func (m *BonsaiAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BonsaiAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BonsaiAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BonsaiAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BonsaiAsset.Merge(m, src)
}
func (m *BonsaiAsset) XXX_Size() int {
	return m.Size()
}
func (m *BonsaiAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_BonsaiAsset.DiscardUnknown(m)
}

var xxx_messageInfo_BonsaiAsset proto.InternalMessageInfo

type BonsaiAssetVersionGrouping struct {
	// Version is a single version for an asset
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BonsaiAssetVersionGrouping) Reset()         { *m = BonsaiAssetVersionGrouping{} }
func (m *BonsaiAssetVersionGrouping) String() string { return proto.CompactTextString(m) }
func (*BonsaiAssetVersionGrouping) ProtoMessage()    {}
func (*BonsaiAssetVersionGrouping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ac055deb26f46, []int{1}
}
func (m *BonsaiAssetVersionGrouping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BonsaiAssetVersionGrouping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BonsaiAssetVersionGrouping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BonsaiAssetVersionGrouping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BonsaiAssetVersionGrouping.Merge(m, src)
}
func (m *BonsaiAssetVersionGrouping) XXX_Size() int {
	return m.Size()
}
func (m *BonsaiAssetVersionGrouping) XXX_DiscardUnknown() {
	xxx_messageInfo_BonsaiAssetVersionGrouping.DiscardUnknown(m)
}

var xxx_messageInfo_BonsaiAssetVersionGrouping proto.InternalMessageInfo

type BonsaiBaseAsset struct {
	// Namespace is the Bonsai asset namespace (username)
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name is the Bonsai asset name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version is a single version for an asset
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BonsaiBaseAsset) Reset()         { *m = BonsaiBaseAsset{} }
func (m *BonsaiBaseAsset) String() string { return proto.CompactTextString(m) }
func (*BonsaiBaseAsset) ProtoMessage()    {}
func (*BonsaiBaseAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ac055deb26f46, []int{2}
}
func (m *BonsaiBaseAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BonsaiBaseAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BonsaiBaseAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BonsaiBaseAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BonsaiBaseAsset.Merge(m, src)
}
func (m *BonsaiBaseAsset) XXX_Size() int {
	return m.Size()
}
func (m *BonsaiBaseAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_BonsaiBaseAsset.DiscardUnknown(m)
}

var xxx_messageInfo_BonsaiBaseAsset proto.InternalMessageInfo

type OutdatedBonsaiAsset struct {
	// BonsaiName is the name of the Bonsai asset
	BonsaiName string `protobuf:"bytes,2,opt,name=bonsai_name,json=bonsaiName,proto3" json:"bonsai_name,omitempty"`
	// BonsaiNamespace is the Bonsai namespace (aka username)
	BonsaiNamespace string `protobuf:"bytes,3,opt,name=bonsai_namespace,json=bonsaiNamespace,proto3" json:"bonsai_namespace,omitempty"`
	// AssetName is the name of the Sensu asset
	AssetName string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// CurrentVersion is the version of the Sensu asset currently installed
	CurrentVersion string `protobuf:"bytes,5,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// LatestVersion is the latest version of the asset in Bonsai
	LatestVersion        string   `protobuf:"bytes,6,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutdatedBonsaiAsset) Reset()         { *m = OutdatedBonsaiAsset{} }
func (m *OutdatedBonsaiAsset) String() string { return proto.CompactTextString(m) }
func (*OutdatedBonsaiAsset) ProtoMessage()    {}
func (*OutdatedBonsaiAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f22ac055deb26f46, []int{3}
}
func (m *OutdatedBonsaiAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutdatedBonsaiAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutdatedBonsaiAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutdatedBonsaiAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutdatedBonsaiAsset.Merge(m, src)
}
func (m *OutdatedBonsaiAsset) XXX_Size() int {
	return m.Size()
}
func (m *OutdatedBonsaiAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_OutdatedBonsaiAsset.DiscardUnknown(m)
}

var xxx_messageInfo_OutdatedBonsaiAsset proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BonsaiAsset)(nil), "sensu.core.v2.BonsaiAsset")
	proto.RegisterType((*BonsaiAssetVersionGrouping)(nil), "sensu.core.v2.BonsaiAssetVersionGrouping")
	proto.RegisterType((*BonsaiBaseAsset)(nil), "sensu.core.v2.BonsaiBaseAsset")
	proto.RegisterType((*OutdatedBonsaiAsset)(nil), "sensu.core.v2.OutdatedBonsaiAsset")
}

func init() { proto.RegisterFile("bonsai.proto", fileDescriptor_f22ac055deb26f46) }

var fileDescriptor_f22ac055deb26f46 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe7, 0xa6, 0xac, 0xcb, 0x4b, 0xbb, 0x22, 0x73, 0x09, 0x15, 0x24, 0xd5, 0x24, 0xc4,
	0x26, 0xa1, 0x4c, 0x0b, 0x9c, 0x38, 0x8d, 0x08, 0x69, 0x17, 0x04, 0x52, 0xd0, 0x76, 0xe0, 0x52,
	0xb9, 0x89, 0x09, 0x91, 0xda, 0xb8, 0xb2, 0x9d, 0xf2, 0x15, 0xf8, 0x08, 0xdc, 0xd8, 0x71, 0x1f,
	0x81, 0x8f, 0xc0, 0x91, 0x33, 0x87, 0x0a, 0xc2, 0x8d, 0x4f, 0xc0, 0x11, 0xd9, 0x4e, 0x5b, 0x33,
	0xa9, 0xb7, 0xe7, 0xbf, 0x7f, 0xef, 0xff, 0x9e, 0xdf, 0x33, 0xf4, 0xa7, 0xac, 0x12, 0xa4, 0x8c,
	0x16, 0x9c, 0x49, 0x86, 0x07, 0x82, 0x56, 0xa2, 0x8e, 0x32, 0xc6, 0x69, 0xb4, 0x8c, 0x47, 0xcf,
	0x8a, 0x52, 0x7e, 0xa8, 0xa7, 0x51, 0xc6, 0xe6, 0xa7, 0x05, 0x2b, 0xd8, 0xa9, 0xa6, 0xa6, 0xf5,
	0xfb, 0xf3, 0xe5, 0x59, 0x14, 0x47, 0x67, 0x5a, 0xd4, 0x9a, 0x8e, 0x8c, 0xc9, 0x08, 0xe6, 0x54,
	0x12, 0x13, 0x1f, 0x7d, 0xe9, 0x80, 0x97, 0xe8, 0x0a, 0x2f, 0x84, 0xa0, 0x12, 0x63, 0xe8, 0x56,
	0x64, 0x4e, 0xfd, 0xce, 0x18, 0x1d, 0xbb, 0xa9, 0x8e, 0xf1, 0x18, 0xbc, 0x9c, 0x8a, 0x8c, 0x97,
	0x0b, 0x59, 0xb2, 0xca, 0x77, 0xf4, 0x95, 0x2d, 0xe1, 0xfb, 0xe0, 0xd4, 0x7c, 0xe6, 0x77, 0xd5,
	0x4d, 0xd2, 0x6b, 0x56, 0xa1, 0x73, 0x99, 0xbe, 0x4a, 0x95, 0x86, 0x9f, 0x00, 0x98, 0x26, 0x27,
	0x8a, 0xb8, 0xa3, 0x89, 0x41, 0xb3, 0x0a, 0xdd, 0x0b, 0xad, 0x2a, 0xce, 0x35, 0xc0, 0x25, 0x9f,
	0xe1, 0x18, 0xfa, 0x39, 0xfb, 0x58, 0xcd, 0x18, 0xc9, 0x35, 0xbf, 0xaf, 0xf9, 0x61, 0xb3, 0x0a,
	0xbd, 0x97, 0xad, 0xae, 0x32, 0xbc, 0x35, 0xa4, 0x72, 0xde, 0xc2, 0xc1, 0x92, 0x72, 0x51, 0xb2,
	0x4a, 0xf8, 0xbd, 0xb1, 0x73, 0xec, 0xc5, 0x27, 0xd1, 0x7f, 0x63, 0x8a, 0xac, 0x07, 0x5e, 0x19,
	0xf2, 0x82, 0xb3, 0x7a, 0x51, 0x56, 0x45, 0xd2, 0xff, 0xb3, 0x0a, 0x37, 0xe9, 0xe9, 0x26, 0x7a,
	0x7e, 0xf0, 0xe9, 0x3a, 0xdc, 0xbb, 0xb9, 0x0e, 0xd1, 0xd1, 0x39, 0x8c, 0x76, 0xe7, 0x63, 0x1f,
	0x7a, 0x6d, 0x4e, 0x3b, 0xb2, 0xf5, 0xd1, 0x72, 0x28, 0x60, 0x68, 0x1c, 0x12, 0x22, 0xa8, 0x19,
	0xf3, 0x03, 0x70, 0xd5, 0x68, 0xc5, 0x82, 0x64, 0xeb, 0x59, 0x6f, 0x85, 0xcd, 0x12, 0x1c, 0x6b,
	0x09, 0x56, 0xa1, 0xee, 0xae, 0x42, 0x3f, 0x10, 0xdc, 0x7b, 0x53, 0xcb, 0x9c, 0x48, 0x9a, 0xdb,
	0x4b, 0x0d, 0xc1, 0x33, 0xbf, 0x68, 0x62, 0xed, 0x16, 0x8c, 0xf4, 0x5a, 0x99, 0x9f, 0xc0, 0x5d,
	0x0b, 0x30, 0x5d, 0x99, 0xe2, 0xc3, 0x2d, 0x65, 0x7a, 0x7b, 0x08, 0x40, 0x94, 0xa9, 0xb1, 0x32,
	0xad, 0xb8, 0x5a, 0xd1, 0x4e, 0x8f, 0x61, 0x98, 0xd5, 0x9c, 0xd3, 0x4a, 0x4e, 0xd6, 0xed, 0xea,
	0x9d, 0xa7, 0x87, 0xad, 0xdc, 0x0e, 0x10, 0x3f, 0x82, 0xc3, 0x19, 0x91, 0x54, 0x6c, 0x39, 0xbd,
	0xeb, 0x74, 0x60, 0xd4, 0xab, 0xdb, 0x8f, 0x4b, 0xc6, 0x7f, 0x7f, 0x05, 0xe8, 0xa6, 0x09, 0xd0,
	0xd7, 0x26, 0x40, 0xdf, 0x9a, 0x00, 0x7d, 0x6f, 0x02, 0xf4, 0xb3, 0x09, 0xd0, 0xe7, 0xdf, 0xc1,
	0xde, 0xbb, 0xce, 0x32, 0x9e, 0xee, 0xeb, 0x2f, 0xfd, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x2f, 0x55, 0xb0, 0x87, 0x33, 0x03, 0x00, 0x00,
}

func (this *BonsaiAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BonsaiAsset)
	if !ok {
		that2, ok := that.(BonsaiAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.GithubURL != that1.GithubURL {
		return false
	}
	if this.DownloadURL != that1.DownloadURL {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if !this.Versions[i].Equal(that1.Versions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BonsaiAssetVersionGrouping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BonsaiAssetVersionGrouping)
	if !ok {
		that2, ok := that.(BonsaiAssetVersionGrouping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BonsaiBaseAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BonsaiBaseAsset)
	if !ok {
		that2, ok := that.(BonsaiBaseAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OutdatedBonsaiAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutdatedBonsaiAsset)
	if !ok {
		that2, ok := that.(OutdatedBonsaiAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BonsaiName != that1.BonsaiName {
		return false
	}
	if this.BonsaiNamespace != that1.BonsaiNamespace {
		return false
	}
	if this.AssetName != that1.AssetName {
		return false
	}
	if this.CurrentVersion != that1.CurrentVersion {
		return false
	}
	if this.LatestVersion != that1.LatestVersion {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type BonsaiAssetFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetName() string
	GetDescription() string
	GetURL() string
	GetGithubURL() string
	GetDownloadURL() string
	GetVersions() []*BonsaiAssetVersionGrouping
}

func (this *BonsaiAsset) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *BonsaiAsset) TestProto() github_com_golang_protobuf_proto.Message {
	return NewBonsaiAssetFromFace(this)
}

func (this *BonsaiAsset) GetName() string {
	return this.Name
}

func (this *BonsaiAsset) GetDescription() string {
	return this.Description
}

func (this *BonsaiAsset) GetURL() string {
	return this.URL
}

func (this *BonsaiAsset) GetGithubURL() string {
	return this.GithubURL
}

func (this *BonsaiAsset) GetDownloadURL() string {
	return this.DownloadURL
}

func (this *BonsaiAsset) GetVersions() []*BonsaiAssetVersionGrouping {
	return this.Versions
}

func NewBonsaiAssetFromFace(that BonsaiAssetFace) *BonsaiAsset {
	this := &BonsaiAsset{}
	this.Name = that.GetName()
	this.Description = that.GetDescription()
	this.URL = that.GetURL()
	this.GithubURL = that.GetGithubURL()
	this.DownloadURL = that.GetDownloadURL()
	this.Versions = that.GetVersions()
	return this
}

type BonsaiAssetVersionGroupingFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetVersion() string
}

func (this *BonsaiAssetVersionGrouping) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *BonsaiAssetVersionGrouping) TestProto() github_com_golang_protobuf_proto.Message {
	return NewBonsaiAssetVersionGroupingFromFace(this)
}

func (this *BonsaiAssetVersionGrouping) GetVersion() string {
	return this.Version
}

func NewBonsaiAssetVersionGroupingFromFace(that BonsaiAssetVersionGroupingFace) *BonsaiAssetVersionGrouping {
	this := &BonsaiAssetVersionGrouping{}
	this.Version = that.GetVersion()
	return this
}

type BonsaiBaseAssetFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetNamespace() string
	GetName() string
	GetVersion() string
}

func (this *BonsaiBaseAsset) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *BonsaiBaseAsset) TestProto() github_com_golang_protobuf_proto.Message {
	return NewBonsaiBaseAssetFromFace(this)
}

func (this *BonsaiBaseAsset) GetNamespace() string {
	return this.Namespace
}

func (this *BonsaiBaseAsset) GetName() string {
	return this.Name
}

func (this *BonsaiBaseAsset) GetVersion() string {
	return this.Version
}

func NewBonsaiBaseAssetFromFace(that BonsaiBaseAssetFace) *BonsaiBaseAsset {
	this := &BonsaiBaseAsset{}
	this.Namespace = that.GetNamespace()
	this.Name = that.GetName()
	this.Version = that.GetVersion()
	return this
}

type OutdatedBonsaiAssetFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetBonsaiName() string
	GetBonsaiNamespace() string
	GetAssetName() string
	GetCurrentVersion() string
	GetLatestVersion() string
}

func (this *OutdatedBonsaiAsset) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *OutdatedBonsaiAsset) TestProto() github_com_golang_protobuf_proto.Message {
	return NewOutdatedBonsaiAssetFromFace(this)
}

func (this *OutdatedBonsaiAsset) GetBonsaiName() string {
	return this.BonsaiName
}

func (this *OutdatedBonsaiAsset) GetBonsaiNamespace() string {
	return this.BonsaiNamespace
}

func (this *OutdatedBonsaiAsset) GetAssetName() string {
	return this.AssetName
}

func (this *OutdatedBonsaiAsset) GetCurrentVersion() string {
	return this.CurrentVersion
}

func (this *OutdatedBonsaiAsset) GetLatestVersion() string {
	return this.LatestVersion
}

func NewOutdatedBonsaiAssetFromFace(that OutdatedBonsaiAssetFace) *OutdatedBonsaiAsset {
	this := &OutdatedBonsaiAsset{}
	this.BonsaiName = that.GetBonsaiName()
	this.BonsaiNamespace = that.GetBonsaiNamespace()
	this.AssetName = that.GetAssetName()
	this.CurrentVersion = that.GetCurrentVersion()
	this.LatestVersion = that.GetLatestVersion()
	return this
}

func (m *BonsaiAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BonsaiAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.GithubURL) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.GithubURL)))
		i += copy(dAtA[i:], m.GithubURL)
	}
	if len(m.DownloadURL) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.DownloadURL)))
		i += copy(dAtA[i:], m.DownloadURL)
	}
	if len(m.Versions) > 0 {
		for _, msg := range m.Versions {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintBonsai(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BonsaiAssetVersionGrouping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BonsaiAssetVersionGrouping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BonsaiBaseAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BonsaiBaseAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OutdatedBonsaiAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutdatedBonsaiAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BonsaiName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.BonsaiName)))
		i += copy(dAtA[i:], m.BonsaiName)
	}
	if len(m.BonsaiNamespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.BonsaiNamespace)))
		i += copy(dAtA[i:], m.BonsaiNamespace)
	}
	if len(m.AssetName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.AssetName)))
		i += copy(dAtA[i:], m.AssetName)
	}
	if len(m.CurrentVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.CurrentVersion)))
		i += copy(dAtA[i:], m.CurrentVersion)
	}
	if len(m.LatestVersion) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBonsai(dAtA, i, uint64(len(m.LatestVersion)))
		i += copy(dAtA[i:], m.LatestVersion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBonsai(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedBonsaiAsset(r randyBonsai, easy bool) *BonsaiAsset {
	this := &BonsaiAsset{}
	this.Name = string(randStringBonsai(r))
	this.Description = string(randStringBonsai(r))
	this.URL = string(randStringBonsai(r))
	this.GithubURL = string(randStringBonsai(r))
	this.DownloadURL = string(randStringBonsai(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Versions = make([]*BonsaiAssetVersionGrouping, v1)
		for i := 0; i < v1; i++ {
			this.Versions[i] = NewPopulatedBonsaiAssetVersionGrouping(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBonsai(r, 8)
	}
	return this
}

func NewPopulatedBonsaiAssetVersionGrouping(r randyBonsai, easy bool) *BonsaiAssetVersionGrouping {
	this := &BonsaiAssetVersionGrouping{}
	this.Version = string(randStringBonsai(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBonsai(r, 3)
	}
	return this
}

func NewPopulatedBonsaiBaseAsset(r randyBonsai, easy bool) *BonsaiBaseAsset {
	this := &BonsaiBaseAsset{}
	this.Namespace = string(randStringBonsai(r))
	this.Name = string(randStringBonsai(r))
	this.Version = string(randStringBonsai(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBonsai(r, 5)
	}
	return this
}

func NewPopulatedOutdatedBonsaiAsset(r randyBonsai, easy bool) *OutdatedBonsaiAsset {
	this := &OutdatedBonsaiAsset{}
	this.BonsaiName = string(randStringBonsai(r))
	this.BonsaiNamespace = string(randStringBonsai(r))
	this.AssetName = string(randStringBonsai(r))
	this.CurrentVersion = string(randStringBonsai(r))
	this.LatestVersion = string(randStringBonsai(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBonsai(r, 7)
	}
	return this
}

type randyBonsai interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBonsai(r randyBonsai) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBonsai(r randyBonsai) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneBonsai(r)
	}
	return string(tmps)
}
func randUnrecognizedBonsai(r randyBonsai, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBonsai(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBonsai(dAtA []byte, r randyBonsai, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBonsai(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateBonsai(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateBonsai(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBonsai(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBonsai(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBonsai(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBonsai(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *BonsaiAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.GithubURL)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.DownloadURL)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovBonsai(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BonsaiAssetVersionGrouping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BonsaiBaseAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutdatedBonsaiAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BonsaiName)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.BonsaiNamespace)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.AssetName)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.CurrentVersion)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	l = len(m.LatestVersion)
	if l > 0 {
		n += 1 + l + sovBonsai(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBonsai(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBonsai(x uint64) (n int) {
	return sovBonsai(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BonsaiAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonsai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BonsaiAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BonsaiAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GithubURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GithubURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &BonsaiAssetVersionGrouping{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonsai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BonsaiAssetVersionGrouping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonsai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BonsaiAssetVersionGrouping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BonsaiAssetVersionGrouping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonsai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BonsaiBaseAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonsai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BonsaiBaseAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BonsaiBaseAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonsai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutdatedBonsaiAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonsai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutdatedBonsaiAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutdatedBonsaiAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonsaiName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BonsaiName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonsaiNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BonsaiNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonsai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonsai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonsai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBonsai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBonsai(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBonsai
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBonsai
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBonsai
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBonsai
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBonsai
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBonsai(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBonsai
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBonsai = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBonsai   = fmt.Errorf("proto: integer overflow")
)
