// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mutator.proto

package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A Mutator is a mutator specification.
type Mutator struct {
	// Metadata contains the name, namespace, labels and annotations of the mutator
	ObjectMeta `protobuf:"bytes,1,opt,name=metadata,embedded=metadata" json:"metadata,omitempty"`
	// Command is the command to be executed.
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Timeout is the command execution timeout in seconds.
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout"`
	// Env is a list of environment variables to use with command execution
	EnvVars []string `protobuf:"bytes,4,rep,name=env_vars,json=envVars" json:"env_vars"`
	// RuntimeAssets are a list of assets required to execute a mutator.
	RuntimeAssets        []string `protobuf:"bytes,8,rep,name=runtime_assets,json=runtimeAssets" json:"runtime_assets"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mutator) Reset()         { *m = Mutator{} }
func (m *Mutator) String() string { return proto.CompactTextString(m) }
func (*Mutator) ProtoMessage()    {}
func (*Mutator) Descriptor() ([]byte, []int) {
	return fileDescriptor_mutator_467a248dade04151, []int{0}
}
func (m *Mutator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mutator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mutator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Mutator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mutator.Merge(dst, src)
}
func (m *Mutator) XXX_Size() int {
	return m.Size()
}
func (m *Mutator) XXX_DiscardUnknown() {
	xxx_messageInfo_Mutator.DiscardUnknown(m)
}

var xxx_messageInfo_Mutator proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Mutator)(nil), "sensu.core.v2.Mutator")
}
func (this *Mutator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mutator)
	if !ok {
		that2, ok := that.(Mutator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObjectMeta.Equal(&that1.ObjectMeta) {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if len(this.EnvVars) != len(that1.EnvVars) {
		return false
	}
	for i := range this.EnvVars {
		if this.EnvVars[i] != that1.EnvVars[i] {
			return false
		}
	}
	if len(this.RuntimeAssets) != len(that1.RuntimeAssets) {
		return false
	}
	for i := range this.RuntimeAssets {
		if this.RuntimeAssets[i] != that1.RuntimeAssets[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type MutatorFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetObjectMeta() ObjectMeta
	GetCommand() string
	GetTimeout() uint32
	GetEnvVars() []string
	GetRuntimeAssets() []string
}

func (this *Mutator) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *Mutator) TestProto() github_com_golang_protobuf_proto.Message {
	return NewMutatorFromFace(this)
}

func (this *Mutator) GetObjectMeta() ObjectMeta {
	return this.ObjectMeta
}

func (this *Mutator) GetCommand() string {
	return this.Command
}

func (this *Mutator) GetTimeout() uint32 {
	return this.Timeout
}

func (this *Mutator) GetEnvVars() []string {
	return this.EnvVars
}

func (this *Mutator) GetRuntimeAssets() []string {
	return this.RuntimeAssets
}

func NewMutatorFromFace(that MutatorFace) *Mutator {
	this := &Mutator{}
	this.ObjectMeta = that.GetObjectMeta()
	this.Command = that.GetCommand()
	this.Timeout = that.GetTimeout()
	this.EnvVars = that.GetEnvVars()
	this.RuntimeAssets = that.GetRuntimeAssets()
	return this
}

func (m *Mutator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mutator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMutator(dAtA, i, uint64(m.ObjectMeta.Size()))
	n1, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Command) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMutator(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMutator(dAtA, i, uint64(m.Timeout))
	}
	if len(m.EnvVars) > 0 {
		for _, s := range m.EnvVars {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RuntimeAssets) > 0 {
		for _, s := range m.RuntimeAssets {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMutator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMutator(r randyMutator, easy bool) *Mutator {
	this := &Mutator{}
	v1 := NewPopulatedObjectMeta(r, easy)
	this.ObjectMeta = *v1
	this.Command = string(randStringMutator(r))
	this.Timeout = uint32(r.Uint32())
	v2 := r.Intn(10)
	this.EnvVars = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.EnvVars[i] = string(randStringMutator(r))
	}
	v3 := r.Intn(10)
	this.RuntimeAssets = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.RuntimeAssets[i] = string(randStringMutator(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMutator(r, 9)
	}
	return this
}

type randyMutator interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMutator(r randyMutator) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMutator(r randyMutator) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneMutator(r)
	}
	return string(tmps)
}
func randUnrecognizedMutator(r randyMutator, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMutator(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMutator(dAtA []byte, r randyMutator, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMutator(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Mutator) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMutator(uint64(l))
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovMutator(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovMutator(uint64(m.Timeout))
	}
	if len(m.EnvVars) > 0 {
		for _, s := range m.EnvVars {
			l = len(s)
			n += 1 + l + sovMutator(uint64(l))
		}
	}
	if len(m.RuntimeAssets) > 0 {
		for _, s := range m.RuntimeAssets {
			l = len(s)
			n += 1 + l + sovMutator(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMutator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMutator(x uint64) (n int) {
	return sovMutator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mutator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMutator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mutator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mutator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvVars = append(m.EnvVars, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeAssets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeAssets = append(m.RuntimeAssets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMutator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMutator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMutator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMutator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMutator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMutator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMutator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMutator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMutator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mutator.proto", fileDescriptor_mutator_467a248dade04151) }

var fileDescriptor_mutator_467a248dade04151 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4a, 0xc3, 0x40,
	0x1c, 0xc7, 0x7b, 0xad, 0x98, 0xf4, 0x6a, 0x1c, 0x6e, 0x8a, 0x1d, 0xee, 0x82, 0x20, 0x66, 0xd0,
	0x14, 0xea, 0xa4, 0x9b, 0xd9, 0x8b, 0x10, 0xd0, 0xc1, 0xa5, 0x5c, 0xd2, 0xb3, 0x56, 0xb8, 0x5c,
	0xc9, 0xfd, 0x12, 0xf0, 0x0d, 0xdc, 0x5c, 0x1d, 0x3b, 0xf6, 0x11, 0x7c, 0x84, 0x8e, 0x7d, 0x82,
	0xa0, 0x71, 0xcb, 0x13, 0x38, 0x4a, 0xaf, 0xa6, 0xa0, 0xdb, 0xf7, 0xf3, 0xfb, 0xfe, 0x39, 0x38,
	0xec, 0xc8, 0x1c, 0x38, 0xa8, 0x2c, 0x98, 0x67, 0x0a, 0x14, 0x71, 0xb4, 0x48, 0x75, 0x1e, 0x24,
	0x2a, 0x13, 0x41, 0x31, 0xec, 0x9f, 0x4f, 0x67, 0xf0, 0x98, 0xc7, 0x41, 0xa2, 0xe4, 0x60, 0xaa,
	0xa6, 0x6a, 0x60, 0x52, 0x71, 0xfe, 0x60, 0xc8, 0x80, 0x51, 0xdb, 0x76, 0x1f, 0x4b, 0x01, 0x7c,
	0xab, 0x8f, 0x5f, 0xdb, 0xd8, 0x1a, 0x6d, 0xb7, 0xc9, 0x2d, 0xb6, 0x37, 0xce, 0x84, 0x03, 0x77,
	0x91, 0x87, 0xfc, 0xde, 0xf0, 0x28, 0xf8, 0xf3, 0x50, 0x70, 0x13, 0x3f, 0x89, 0x04, 0x46, 0x02,
	0x78, 0x48, 0x57, 0x25, 0x6b, 0xad, 0x4b, 0x86, 0xea, 0x92, 0x91, 0xa6, 0x76, 0xa6, 0xe4, 0x0c,
	0x84, 0x9c, 0xc3, 0x73, 0xb4, 0x9b, 0x22, 0x2e, 0xb6, 0x12, 0x25, 0x25, 0x4f, 0x27, 0x6e, 0xdb,
	0x43, 0x7e, 0x37, 0x6a, 0x90, 0x9c, 0x60, 0x0b, 0x66, 0x52, 0xa8, 0x1c, 0xdc, 0x8e, 0x87, 0x7c,
	0x27, 0xec, 0xd5, 0x25, 0x6b, 0x4e, 0x51, 0x23, 0xc8, 0x29, 0xb6, 0x45, 0x5a, 0x8c, 0x0b, 0x9e,
	0x69, 0x77, 0xcf, 0xeb, 0xf8, 0xdd, 0xf0, 0xa0, 0x2e, 0xd9, 0xee, 0x16, 0x59, 0x22, 0x2d, 0xee,
	0x78, 0xa6, 0xc9, 0x25, 0x3e, 0xcc, 0xf2, 0x74, 0x53, 0x1b, 0x73, 0xad, 0x05, 0x68, 0xd7, 0x36,
	0x71, 0x52, 0x97, 0xec, 0x9f, 0x13, 0x39, 0xbf, 0x7c, 0x6d, 0xf0, 0xca, 0x7e, 0x59, 0xb0, 0xd6,
	0x72, 0xc1, 0x50, 0xe8, 0x7d, 0x7f, 0x52, 0xb4, 0xac, 0x28, 0x7a, 0xaf, 0x28, 0x5a, 0x55, 0x14,
	0xad, 0x2b, 0x8a, 0x3e, 0x2a, 0x8a, 0xde, 0xbe, 0x68, 0xeb, 0xbe, 0x5d, 0x0c, 0xe3, 0x7d, 0xf3,
	0x75, 0x17, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xf0, 0x21, 0xe6, 0x95, 0x01, 0x00, 0x00,
}
