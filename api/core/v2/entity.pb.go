// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity.proto

package v2

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Entity is the Entity supplying the event. The default Entity for any
// Event is the running Agent process--if the Event is sent by an Agent.
type Entity struct {
	EntityClass    string         `protobuf:"bytes,1,opt,name=entity_class,json=entityClass,proto3" json:"entity_class"`
	System         System         `protobuf:"bytes,3,opt,name=system,proto3" json:"system"`
	Subscriptions  []string       `protobuf:"bytes,4,rep,name=subscriptions,proto3" json:"subscriptions"`
	LastSeen       int64          `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen"`
	Deregister     bool           `protobuf:"varint,6,opt,name=deregister,proto3" json:"deregister"`
	Deregistration Deregistration `protobuf:"bytes,7,opt,name=deregistration,proto3" json:"deregistration"`
	User           string         `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	// ExtendedAttributes store serialized arbitrary JSON-encoded data
	ExtendedAttributes []byte `protobuf:"bytes,12,opt,name=extended_attributes,json=extendedAttributes,proto3" json:"-"`
	// Redact contains the fields to redact on the agent
	Redact []string `protobuf:"bytes,13,rep,name=redact,proto3" json:"redact,omitempty"`
	// Metadata contains the name, namespace, labels and annotations of the entity
	ObjectMeta `protobuf:"bytes,14,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	// SensuAgentVersion is the sensu-agent version.
	SensuAgentVersion    string   `protobuf:"bytes,15,opt,name=sensu_agent_version,json=sensuAgentVersion,proto3" json:"sensu_agent_version"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{0}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

// System contains information about the system that the Agent process
// is running on, used for additional Entity context.
type System struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	OS                   string   `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Platform             string   `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformFamily       string   `protobuf:"bytes,4,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	PlatformVersion      string   `protobuf:"bytes,5,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	Network              Network  `protobuf:"bytes,6,opt,name=network,proto3" json:"network"`
	Arch                 string   `protobuf:"bytes,7,opt,name=arch,proto3" json:"arch,omitempty"`
	ARMVersion           int32    `protobuf:"varint,8,opt,name=arm_version,json=armVersion,proto3" json:"arm_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *System) Reset()         { *m = System{} }
func (m *System) String() string { return proto.CompactTextString(m) }
func (*System) ProtoMessage()    {}
func (*System) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{1}
}
func (m *System) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *System) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_System.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *System) XXX_Merge(src proto.Message) {
	xxx_messageInfo_System.Merge(m, src)
}
func (m *System) XXX_Size() int {
	return m.Size()
}
func (m *System) XXX_DiscardUnknown() {
	xxx_messageInfo_System.DiscardUnknown(m)
}

var xxx_messageInfo_System proto.InternalMessageInfo

func (m *System) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *System) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *System) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *System) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *System) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *System) GetNetwork() Network {
	if m != nil {
		return m.Network
	}
	return Network{}
}

func (m *System) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *System) GetARMVersion() int32 {
	if m != nil {
		return m.ARMVersion
	}
	return 0
}

// Network contains information about the system network interfaces
// that the Agent process is running on, used for additional Entity
// context.
type Network struct {
	Interfaces           []NetworkInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Network) Reset()         { *m = Network{} }
func (m *Network) String() string { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()    {}
func (*Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{2}
}
func (m *Network) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Network.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Network.Merge(m, src)
}
func (m *Network) XXX_Size() int {
	return m.Size()
}
func (m *Network) XXX_DiscardUnknown() {
	xxx_messageInfo_Network.DiscardUnknown(m)
}

var xxx_messageInfo_Network proto.InternalMessageInfo

func (m *Network) GetInterfaces() []NetworkInterface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// NetworkInterface contains information about a system network
// interface.
type NetworkInterface struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MAC                  string   `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Addresses            []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInterface) Reset()         { *m = NetworkInterface{} }
func (m *NetworkInterface) String() string { return proto.CompactTextString(m) }
func (*NetworkInterface) ProtoMessage()    {}
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{3}
}
func (m *NetworkInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInterface.Merge(m, src)
}
func (m *NetworkInterface) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInterface proto.InternalMessageInfo

func (m *NetworkInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkInterface) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *NetworkInterface) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Deregistration contains configuration for Sensu entity de-registration.
type Deregistration struct {
	Handler              string   `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deregistration) Reset()         { *m = Deregistration{} }
func (m *Deregistration) String() string { return proto.CompactTextString(m) }
func (*Deregistration) ProtoMessage()    {}
func (*Deregistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{4}
}
func (m *Deregistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deregistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deregistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deregistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deregistration.Merge(m, src)
}
func (m *Deregistration) XXX_Size() int {
	return m.Size()
}
func (m *Deregistration) XXX_DiscardUnknown() {
	xxx_messageInfo_Deregistration.DiscardUnknown(m)
}

var xxx_messageInfo_Deregistration proto.InternalMessageInfo

func (m *Deregistration) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func init() {
	proto.RegisterType((*Entity)(nil), "sensu.core.v2.Entity")
	proto.RegisterType((*System)(nil), "sensu.core.v2.System")
	proto.RegisterType((*Network)(nil), "sensu.core.v2.Network")
	proto.RegisterType((*NetworkInterface)(nil), "sensu.core.v2.NetworkInterface")
	proto.RegisterType((*Deregistration)(nil), "sensu.core.v2.Deregistration")
}

func init() { proto.RegisterFile("entity.proto", fileDescriptor_cf50d946d740d100) }

var fileDescriptor_cf50d946d740d100 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcb, 0x6e, 0xe3, 0x36,
	0x14, 0x0d, 0xfd, 0x36, 0x1d, 0x3b, 0x09, 0x83, 0xa6, 0x4a, 0x80, 0x4a, 0x82, 0x37, 0x55, 0xd3,
	0x56, 0x41, 0x9c, 0x22, 0x05, 0xba, 0xaa, 0x95, 0x3e, 0x50, 0x14, 0x69, 0x00, 0x1a, 0xed, 0xa2,
	0x8b, 0x1a, 0xb4, 0x44, 0xdb, 0x6a, 0x2d, 0xc9, 0x20, 0x69, 0xb7, 0xfe, 0x83, 0x7e, 0xc2, 0x2c,
	0xb3, 0xcc, 0xfc, 0xc1, 0x7c, 0x42, 0x96, 0xf9, 0x02, 0x61, 0x46, 0xb3, 0xf3, 0x17, 0xcc, 0x72,
	0x40, 0xea, 0x11, 0xdb, 0xc8, 0xee, 0xdc, 0xc3, 0x73, 0x1f, 0xe4, 0xbd, 0x97, 0x70, 0x9f, 0x86,
	0xc2, 0x17, 0x2b, 0x7b, 0xce, 0x22, 0x11, 0xa1, 0x36, 0xa7, 0x21, 0x5f, 0xd8, 0x6e, 0xc4, 0xa8,
	0xbd, 0xec, 0x9d, 0x7d, 0x33, 0xf1, 0xc5, 0x74, 0x31, 0xb2, 0xdd, 0x28, 0xb8, 0x98, 0x44, 0x93,
	0xe8, 0x42, 0xa9, 0x46, 0x8b, 0xf1, 0xf7, 0xcb, 0x4b, 0xbb, 0x67, 0x5f, 0x2a, 0x52, 0x71, 0x0a,
	0xa5, 0x41, 0xce, 0x60, 0x40, 0x05, 0x49, 0x71, 0x37, 0xa9, 0xc0, 0xda, 0x8f, 0x2a, 0x03, 0xba,
	0xca, 0x73, 0x0d, 0xdd, 0x19, 0xe1, 0x5c, 0x03, 0x26, 0xb0, 0x9a, 0xce, 0xe1, 0x3a, 0x36, 0xb6,
	0x78, 0xdc, 0x4a, 0xad, 0x1b, 0x69, 0xa0, 0x2b, 0x58, 0xe3, 0x2b, 0x2e, 0x68, 0xa0, 0x95, 0x4d,
	0x60, 0xb5, 0x7a, 0x9f, 0xd8, 0x5b, 0x15, 0xda, 0x03, 0x75, 0xe8, 0x54, 0x1e, 0x63, 0x63, 0x0f,
	0x67, 0x52, 0xf4, 0x2d, 0x6c, 0xf3, 0xc5, 0x88, 0xbb, 0xcc, 0x9f, 0x0b, 0x3f, 0x0a, 0xb9, 0x56,
	0x31, 0xcb, 0x56, 0xd3, 0x39, 0x5a, 0xc7, 0xc6, 0xf6, 0x01, 0xde, 0x36, 0xd1, 0x39, 0x6c, 0xce,
	0x08, 0x17, 0x43, 0x4e, 0x69, 0xa8, 0x55, 0x4d, 0x60, 0x95, 0x9d, 0xf6, 0x3a, 0x36, 0x9e, 0x49,
	0xdc, 0x90, 0x70, 0x40, 0x69, 0x88, 0x6c, 0x08, 0x3d, 0xca, 0xe8, 0xc4, 0xe7, 0x82, 0x32, 0xad,
	0x66, 0x02, 0xab, 0xe1, 0x74, 0xd6, 0xb1, 0xb1, 0xc1, 0xe2, 0x0d, 0x8c, 0x7e, 0x85, 0x9d, 0xdc,
	0x62, 0x44, 0xa6, 0xd3, 0xea, 0xea, 0x46, 0x9f, 0xed, 0xdc, 0xe8, 0x87, 0x2d, 0x51, 0x76, 0xb3,
	0x1d, 0x57, 0x84, 0x60, 0x65, 0xc1, 0x29, 0xd3, 0x5a, 0xf2, 0x0d, 0xb1, 0xc2, 0xe8, 0x1a, 0x1e,
	0xd3, 0xff, 0x04, 0x0d, 0x3d, 0xea, 0x0d, 0x89, 0x10, 0xcc, 0x1f, 0x2d, 0x04, 0xe5, 0xda, 0xbe,
	0x09, 0xac, 0x7d, 0xa7, 0xba, 0x8e, 0x0d, 0xf0, 0x35, 0x46, 0xb9, 0xa2, 0x5f, 0x08, 0xd0, 0x09,
	0xac, 0x31, 0xea, 0x11, 0x57, 0x68, 0x6d, 0xf9, 0x4c, 0x38, 0xb3, 0xd0, 0xef, 0xb0, 0x21, 0x1b,
	0xe9, 0x11, 0x41, 0xb4, 0x8e, 0x2a, 0xf5, 0x74, 0xa7, 0xd4, 0xbb, 0xd1, 0xdf, 0xd4, 0x15, 0xb7,
	0x54, 0x10, 0x47, 0x97, 0x65, 0x3e, 0xc5, 0x06, 0x58, 0xc7, 0x06, 0xca, 0xdd, 0xbe, 0x8a, 0x02,
	0x5f, 0xd0, 0x60, 0x2e, 0x56, 0xb8, 0x08, 0x85, 0x7e, 0x86, 0xc7, 0x2a, 0xca, 0x90, 0x4c, 0x68,
	0x28, 0x86, 0x4b, 0xca, 0xb8, 0x7c, 0x8c, 0x03, 0x35, 0x0d, 0x9f, 0xae, 0x63, 0xe3, 0xa5, 0x63,
	0x7c, 0xa4, 0xc8, 0xbe, 0xe4, 0xfe, 0x48, 0xa9, 0xef, 0x1a, 0xff, 0xdf, 0x1b, 0x7b, 0x0f, 0xf7,
	0x06, 0xe8, 0xbe, 0x2e, 0xc1, 0x5a, 0x3a, 0x08, 0xe8, 0x0c, 0x36, 0xa6, 0x11, 0x17, 0x21, 0x09,
	0x68, 0x3a, 0x60, 0xb8, 0xb0, 0xd1, 0x09, 0x2c, 0x45, 0x5c, 0x2b, 0xa9, 0x44, 0xb5, 0x24, 0x36,
	0x4a, 0x77, 0x03, 0x5c, 0x8a, 0xb8, 0xf4, 0x99, 0xcf, 0x88, 0x18, 0x47, 0x2c, 0x9d, 0xb2, 0x26,
	0x2e, 0x6c, 0xf4, 0x39, 0x3c, 0xc8, 0xf1, 0x70, 0x4c, 0x02, 0x7f, 0xb6, 0xd2, 0x2a, 0x4a, 0xd2,
	0xc9, 0xe9, 0x9f, 0x14, 0x8b, 0xbe, 0x80, 0x87, 0x85, 0x30, 0xbf, 0x53, 0x55, 0x29, 0x8b, 0x00,
	0x59, 0xe1, 0xe8, 0x1a, 0xd6, 0x43, 0x2a, 0xfe, 0x8d, 0xd8, 0x3f, 0x6a, 0x6c, 0x5a, 0xbd, 0x93,
	0x9d, 0x77, 0xfd, 0x2d, 0x3d, 0xcd, 0x7a, 0x9f, 0x8b, 0x65, 0xd3, 0x09, 0x73, 0xa7, 0x6a, 0x6e,
	0x9a, 0x58, 0x61, 0x74, 0x01, 0x5b, 0x64, 0x23, 0x63, 0xc3, 0x04, 0x56, 0xd5, 0xe9, 0x24, 0xb1,
	0x01, 0xfb, 0xf8, 0x36, 0x4b, 0x88, 0x21, 0x29, 0x92, 0x77, 0xff, 0x82, 0xf5, 0x2c, 0x3c, 0x1a,
	0x40, 0xe8, 0x87, 0x82, 0xb2, 0x31, 0x71, 0xa9, 0x5c, 0xc7, 0xb2, 0xd5, 0xea, 0x19, 0x2f, 0x97,
	0xf2, 0x4b, 0xae, 0x73, 0x90, 0xac, 0x49, 0x8e, 0xf9, 0xb3, 0x2b, 0xde, 0xc0, 0xdd, 0x10, 0x1e,
	0xee, 0xfa, 0xc8, 0xc2, 0x37, 0x1a, 0xa2, 0x30, 0x3a, 0x85, 0xe5, 0x80, 0xb8, 0x59, 0x37, 0xea,
	0x49, 0x6c, 0x94, 0x6f, 0xfb, 0x37, 0x58, 0x72, 0xe8, 0x4b, 0xd8, 0x24, 0x9e, 0xc7, 0x28, 0xe7,
	0x94, 0x6b, 0x65, 0xb5, 0xba, 0x6a, 0x0b, 0x0b, 0x12, 0x3f, 0xc3, 0xee, 0x39, 0xec, 0x6c, 0x6f,
	0x0c, 0xd2, 0x60, 0x7d, 0x4a, 0x42, 0x6f, 0x46, 0x59, 0x96, 0x30, 0x37, 0x1d, 0xf3, 0xc3, 0x3b,
	0x1d, 0x3c, 0x24, 0x3a, 0x78, 0x93, 0xe8, 0xe0, 0x31, 0xd1, 0xc1, 0x53, 0xa2, 0x83, 0xb7, 0x89,
	0x0e, 0x5e, 0xbd, 0xd7, 0xf7, 0xfe, 0x2c, 0x2d, 0x7b, 0xa3, 0x9a, 0xfa, 0xb5, 0xae, 0x3e, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0xfd, 0x4b, 0x84, 0x16, 0x05, 0x00, 0x00,
}

func (this *Entity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Entity)
	if !ok {
		that2, ok := that.(Entity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EntityClass != that1.EntityClass {
		return false
	}
	if !this.System.Equal(&that1.System) {
		return false
	}
	if len(this.Subscriptions) != len(that1.Subscriptions) {
		return false
	}
	for i := range this.Subscriptions {
		if this.Subscriptions[i] != that1.Subscriptions[i] {
			return false
		}
	}
	if this.LastSeen != that1.LastSeen {
		return false
	}
	if this.Deregister != that1.Deregister {
		return false
	}
	if !this.Deregistration.Equal(&that1.Deregistration) {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if !bytes.Equal(this.ExtendedAttributes, that1.ExtendedAttributes) {
		return false
	}
	if len(this.Redact) != len(that1.Redact) {
		return false
	}
	for i := range this.Redact {
		if this.Redact[i] != that1.Redact[i] {
			return false
		}
	}
	if !this.ObjectMeta.Equal(&that1.ObjectMeta) {
		return false
	}
	if this.SensuAgentVersion != that1.SensuAgentVersion {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *System) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*System)
	if !ok {
		that2, ok := that.(System)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.OS != that1.OS {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.PlatformFamily != that1.PlatformFamily {
		return false
	}
	if this.PlatformVersion != that1.PlatformVersion {
		return false
	}
	if !this.Network.Equal(&that1.Network) {
		return false
	}
	if this.Arch != that1.Arch {
		return false
	}
	if this.ARMVersion != that1.ARMVersion {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Network)
	if !ok {
		that2, ok := that.(Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(&that1.Interfaces[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NetworkInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkInterface)
	if !ok {
		that2, ok := that.(NetworkInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MAC != that1.MAC {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Deregistration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Deregistration)
	if !ok {
		that2, ok := that.(Deregistration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Handler != that1.Handler {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type EntityFace interface {
	Proto() github_com_golang_protobuf_proto.Message
	GetEntityClass() string
	GetSystem() System
	GetSubscriptions() []string
	GetLastSeen() int64
	GetDeregister() bool
	GetDeregistration() Deregistration
	GetUser() string
	GetExtendedAttributes() []byte
	GetRedact() []string
	GetObjectMeta() ObjectMeta
	GetSensuAgentVersion() string
}

func (this *Entity) Proto() github_com_golang_protobuf_proto.Message {
	return this
}

func (this *Entity) TestProto() github_com_golang_protobuf_proto.Message {
	return NewEntityFromFace(this)
}

func (this *Entity) GetEntityClass() string {
	return this.EntityClass
}

func (this *Entity) GetSystem() System {
	return this.System
}

func (this *Entity) GetSubscriptions() []string {
	return this.Subscriptions
}

func (this *Entity) GetLastSeen() int64 {
	return this.LastSeen
}

func (this *Entity) GetDeregister() bool {
	return this.Deregister
}

func (this *Entity) GetDeregistration() Deregistration {
	return this.Deregistration
}

func (this *Entity) GetUser() string {
	return this.User
}

func (this *Entity) GetExtendedAttributes() []byte {
	return this.ExtendedAttributes
}

func (this *Entity) GetRedact() []string {
	return this.Redact
}

func (this *Entity) GetObjectMeta() ObjectMeta {
	return this.ObjectMeta
}

func (this *Entity) GetSensuAgentVersion() string {
	return this.SensuAgentVersion
}

func NewEntityFromFace(that EntityFace) *Entity {
	this := &Entity{}
	this.EntityClass = that.GetEntityClass()
	this.System = that.GetSystem()
	this.Subscriptions = that.GetSubscriptions()
	this.LastSeen = that.GetLastSeen()
	this.Deregister = that.GetDeregister()
	this.Deregistration = that.GetDeregistration()
	this.User = that.GetUser()
	this.ExtendedAttributes = that.GetExtendedAttributes()
	this.Redact = that.GetRedact()
	this.ObjectMeta = that.GetObjectMeta()
	this.SensuAgentVersion = that.GetSensuAgentVersion()
	return this
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityClass) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.EntityClass)))
		i += copy(dAtA[i:], m.EntityClass)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.System.Size()))
	n1, err := m.System.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LastSeen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.LastSeen))
	}
	if m.Deregister {
		dAtA[i] = 0x30
		i++
		if m.Deregister {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Deregistration.Size()))
	n2, err := m.Deregistration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.User) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.ExtendedAttributes) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ExtendedAttributes)))
		i += copy(dAtA[i:], m.ExtendedAttributes)
	}
	if len(m.Redact) > 0 {
		for _, s := range m.Redact {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x72
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.SensuAgentVersion) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.SensuAgentVersion)))
		i += copy(dAtA[i:], m.SensuAgentVersion)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *System) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *System) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.OS) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.OS)))
		i += copy(dAtA[i:], m.OS)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.PlatformFamily) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PlatformFamily)))
		i += copy(dAtA[i:], m.PlatformFamily)
	}
	if len(m.PlatformVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PlatformVersion)))
		i += copy(dAtA[i:], m.PlatformVersion)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Network.Size()))
	n4, err := m.Network.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Arch) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Arch)))
		i += copy(dAtA[i:], m.Arch)
	}
	if m.ARMVersion != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.ARMVersion))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, msg := range m.Interfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.MAC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.MAC)))
		i += copy(dAtA[i:], m.MAC)
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Deregistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deregistration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handler) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Handler)))
		i += copy(dAtA[i:], m.Handler)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEntity(r randyEntity, easy bool) *Entity {
	this := &Entity{}
	this.EntityClass = string(randStringEntity(r))
	v1 := NewPopulatedSystem(r, easy)
	this.System = *v1
	v2 := r.Intn(10)
	this.Subscriptions = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Subscriptions[i] = string(randStringEntity(r))
	}
	this.LastSeen = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastSeen *= -1
	}
	this.Deregister = bool(bool(r.Intn(2) == 0))
	v3 := NewPopulatedDeregistration(r, easy)
	this.Deregistration = *v3
	this.User = string(randStringEntity(r))
	v4 := r.Intn(100)
	this.ExtendedAttributes = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.ExtendedAttributes[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(10)
	this.Redact = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Redact[i] = string(randStringEntity(r))
	}
	v6 := NewPopulatedObjectMeta(r, easy)
	this.ObjectMeta = *v6
	this.SensuAgentVersion = string(randStringEntity(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntity(r, 16)
	}
	return this
}

func NewPopulatedSystem(r randyEntity, easy bool) *System {
	this := &System{}
	this.Hostname = string(randStringEntity(r))
	this.OS = string(randStringEntity(r))
	this.Platform = string(randStringEntity(r))
	this.PlatformFamily = string(randStringEntity(r))
	this.PlatformVersion = string(randStringEntity(r))
	v7 := NewPopulatedNetwork(r, easy)
	this.Network = *v7
	this.Arch = string(randStringEntity(r))
	this.ARMVersion = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ARMVersion *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntity(r, 9)
	}
	return this
}

func NewPopulatedNetwork(r randyEntity, easy bool) *Network {
	this := &Network{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Interfaces = make([]NetworkInterface, v8)
		for i := 0; i < v8; i++ {
			v9 := NewPopulatedNetworkInterface(r, easy)
			this.Interfaces[i] = *v9
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntity(r, 2)
	}
	return this
}

func NewPopulatedNetworkInterface(r randyEntity, easy bool) *NetworkInterface {
	this := &NetworkInterface{}
	this.Name = string(randStringEntity(r))
	this.MAC = string(randStringEntity(r))
	v10 := r.Intn(10)
	this.Addresses = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.Addresses[i] = string(randStringEntity(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntity(r, 4)
	}
	return this
}

func NewPopulatedDeregistration(r randyEntity, easy bool) *Deregistration {
	this := &Deregistration{}
	this.Handler = string(randStringEntity(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntity(r, 2)
	}
	return this
}

type randyEntity interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEntity(r randyEntity) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEntity(r randyEntity) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneEntity(r)
	}
	return string(tmps)
}
func randUnrecognizedEntity(r randyEntity, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEntity(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEntity(dAtA []byte, r randyEntity, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEntity(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntityClass)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = m.System.Size()
	n += 1 + l + sovEntity(uint64(l))
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.LastSeen != 0 {
		n += 1 + sovEntity(uint64(m.LastSeen))
	}
	if m.Deregister {
		n += 2
	}
	l = m.Deregistration.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.ExtendedAttributes)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Redact) > 0 {
		for _, s := range m.Redact {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.SensuAgentVersion)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *System) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.OS)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.PlatformFamily)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.PlatformVersion)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = m.Network.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.ARMVersion != 0 {
		n += 1 + sovEntity(uint64(m.ARMVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.MAC)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Deregistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEntity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deregister", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deregister = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deregistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deregistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedAttributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedAttributes = append(m.ExtendedAttributes[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtendedAttributes == nil {
				m.ExtendedAttributes = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redact = append(m.Redact, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensuAgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensuAgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *System) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: System: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: System: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFamily", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformFamily = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARMVersion", wireType)
			}
			m.ARMVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ARMVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, NetworkInterface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MAC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MAC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deregistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deregistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deregistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntity
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity   = fmt.Errorf("proto: integer overflow")
)
