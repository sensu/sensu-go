// Code generated by mockery v1.0.0
package mocktransport

import http "net/http"
import mock "github.com/stretchr/testify/mock"
import transport "github.com/sensu/sensu-go/transport"
import types "github.com/sensu/sensu-go/types"

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Transport) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Closed provides a mock function with given fields:
func (_m *Transport) Closed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Receive provides a mock function with given fields:
func (_m *Transport) Receive() (*transport.Message, error) {
	ret := _m.Called()

	var r0 *transport.Message
	if rf, ok := ret.Get(0).(func() *transport.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transport.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reconnect provides a mock function with given fields: _a0, _a1, _a2
func (_m *Transport) Reconnect(_a0 string, _a1 *types.TLSOptions, _a2 http.Header) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.TLSOptions, http.Header) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: _a0
func (_m *Transport) Send(_a0 *transport.Message) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*transport.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
