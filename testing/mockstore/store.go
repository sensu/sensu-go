// Code generated by mockery v1.0.0
package mockstore

import context "context"
import mock "github.com/stretchr/testify/mock"
import store "github.com/sensu/sensu-go/backend/store"
import types "github.com/sensu/sensu-go/types"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AuthenticateUser provides a mock function with given fields: ctx, username, password
func (_m *Store) AuthenticateUser(ctx context.Context, username string, password string) (*types.User, error) {
	ret := _m.Called(ctx, username, password)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateError provides a mock function with given fields: ctx, err
func (_m *Store) CreateError(ctx context.Context, err *types.Error) error {
	ret := _m.Called(ctx, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Error) error); ok {
		r0 = rf(ctx, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJWTSecret provides a mock function with given fields: secret
func (_m *Store) CreateJWTSecret(secret []byte) error {
	ret := _m.Called(secret)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrganization provides a mock function with given fields: ctx, org
func (_m *Store) CreateOrganization(ctx context.Context, org *types.Organization) error {
	ret := _m.Called(ctx, org)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Organization) error); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: claims
func (_m *Store) CreateToken(claims *types.Claims) error {
	ret := _m.Called(claims)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Claims) error); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *Store) CreateUser(user *types.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssetByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteAssetByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCheckConfigByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteCheckConfigByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEntity provides a mock function with given fields: ctx, entity
func (_m *Store) DeleteEntity(ctx context.Context, entity *types.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEntityByID provides a mock function with given fields: ctx, id
func (_m *Store) DeleteEntityByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEnvironment provides a mock function with given fields: ctx, env
func (_m *Store) DeleteEnvironment(ctx context.Context, env *types.Environment) error {
	ret := _m.Called(ctx, env)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Environment) error); ok {
		r0 = rf(ctx, env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteError provides a mock function with given fields: ctx, entity, check, timestamp
func (_m *Store) DeleteError(ctx context.Context, entity string, check string, timestamp string) error {
	ret := _m.Called(ctx, entity, check, timestamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, entity, check, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteErrorsByEntity provides a mock function with given fields: ctx, entity
func (_m *Store) DeleteErrorsByEntity(ctx context.Context, entity string) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteErrorsByEntityCheck provides a mock function with given fields: ctx, entity, check
func (_m *Store) DeleteErrorsByEntityCheck(ctx context.Context, entity string, check string) error {
	ret := _m.Called(ctx, entity, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entity, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEventByEntityCheck provides a mock function with given fields: ctx, entity, check
func (_m *Store) DeleteEventByEntityCheck(ctx context.Context, entity string, check string) error {
	ret := _m.Called(ctx, entity, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entity, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEventFilterByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteEventFilterByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFailingKeepalive provides a mock function with given fields: ctx, entity
func (_m *Store) DeleteFailingKeepalive(ctx context.Context, entity *types.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHandlerByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteHandlerByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHookConfigByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteHookConfigByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMutatorByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteMutatorByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrganizationByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteOrganizationByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoleByName provides a mock function with given fields: ctx, name
func (_m *Store) DeleteRoleByName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSilencedEntryByID provides a mock function with given fields: ctx, id
func (_m *Store) DeleteSilencedEntryByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTokens provides a mock function with given fields: subject, tokens
func (_m *Store) DeleteTokens(subject string, tokens []string) error {
	ret := _m.Called(subject, tokens)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(subject, tokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, user
func (_m *Store) DeleteUser(ctx context.Context, user *types.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeregisterExtension provides a mock function with given fields: ctx, name
func (_m *Store) DeregisterExtension(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *Store) GetAllUsers() ([]*types.User, error) {
	ret := _m.Called()

	var r0 []*types.User
	if rf, ok := ret.Get(0).(func() []*types.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetByName provides a mock function with given fields: ctx, name
func (_m *Store) GetAssetByName(ctx context.Context, name string) (*types.Asset, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Asset
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Asset); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetWatcher provides a mock function with given fields: ctx
func (_m *Store) GetAssetWatcher(ctx context.Context) <-chan store.WatchEventAsset {
	ret := _m.Called(ctx)

	var r0 <-chan store.WatchEventAsset
	if rf, ok := ret.Get(0).(func(context.Context) <-chan store.WatchEventAsset); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan store.WatchEventAsset)
		}
	}

	return r0
}

// GetAssets provides a mock function with given fields: ctx
func (_m *Store) GetAssets(ctx context.Context) ([]*types.Asset, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Asset
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Asset); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckConfigByName provides a mock function with given fields: ctx, name
func (_m *Store) GetCheckConfigByName(ctx context.Context, name string) (*types.CheckConfig, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.CheckConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.CheckConfig); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CheckConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckConfigWatcher provides a mock function with given fields: ctx
func (_m *Store) GetCheckConfigWatcher(ctx context.Context) <-chan store.WatchEventCheckConfig {
	ret := _m.Called(ctx)

	var r0 <-chan store.WatchEventCheckConfig
	if rf, ok := ret.Get(0).(func(context.Context) <-chan store.WatchEventCheckConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan store.WatchEventCheckConfig)
		}
	}

	return r0
}

// GetCheckConfigs provides a mock function with given fields: ctx
func (_m *Store) GetCheckConfigs(ctx context.Context) ([]*types.CheckConfig, error) {
	ret := _m.Called(ctx)

	var r0 []*types.CheckConfig
	if rf, ok := ret.Get(0).(func(context.Context) []*types.CheckConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.CheckConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntities provides a mock function with given fields: ctx
func (_m *Store) GetEntities(ctx context.Context) ([]*types.Entity, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Entity
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Entity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntityByID provides a mock function with given fields: ctx, id
func (_m *Store) GetEntityByID(ctx context.Context, id string) (*types.Entity, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.Entity
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Entity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: ctx, org, env
func (_m *Store) GetEnvironment(ctx context.Context, org string, env string) (*types.Environment, error) {
	ret := _m.Called(ctx, org, env)

	var r0 *types.Environment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Environment); ok {
		r0 = rf(ctx, org, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, org, env)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironments provides a mock function with given fields: ctx, org
func (_m *Store) GetEnvironments(ctx context.Context, org string) ([]*types.Environment, error) {
	ret := _m.Called(ctx, org)

	var r0 []*types.Environment
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Environment); ok {
		r0 = rf(ctx, org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetError provides a mock function with given fields: ctx, entity, check, timestamp
func (_m *Store) GetError(ctx context.Context, entity string, check string, timestamp string) (*types.Error, error) {
	ret := _m.Called(ctx, entity, check, timestamp)

	var r0 *types.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Error); ok {
		r0 = rf(ctx, entity, check, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, entity, check, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrors provides a mock function with given fields: ctx
func (_m *Store) GetErrors(ctx context.Context) ([]*types.Error, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Error
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorsByEntity provides a mock function with given fields: ctx, entity
func (_m *Store) GetErrorsByEntity(ctx context.Context, entity string) ([]*types.Error, error) {
	ret := _m.Called(ctx, entity)

	var r0 []*types.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Error); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorsByEntityCheck provides a mock function with given fields: ctx, entity, check
func (_m *Store) GetErrorsByEntityCheck(ctx context.Context, entity string, check string) ([]*types.Error, error) {
	ret := _m.Called(ctx, entity, check)

	var r0 []*types.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*types.Error); ok {
		r0 = rf(ctx, entity, check)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entity, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByEntityCheck provides a mock function with given fields: ctx, entity, check
func (_m *Store) GetEventByEntityCheck(ctx context.Context, entity string, check string) (*types.Event, error) {
	ret := _m.Called(ctx, entity, check)

	var r0 *types.Event
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Event); ok {
		r0 = rf(ctx, entity, check)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entity, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventFilterByName provides a mock function with given fields: ctx, name
func (_m *Store) GetEventFilterByName(ctx context.Context, name string) (*types.EventFilter, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.EventFilter
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.EventFilter); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EventFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventFilters provides a mock function with given fields: ctx
func (_m *Store) GetEventFilters(ctx context.Context) ([]*types.EventFilter, error) {
	ret := _m.Called(ctx)

	var r0 []*types.EventFilter
	if rf, ok := ret.Get(0).(func(context.Context) []*types.EventFilter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.EventFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: ctx
func (_m *Store) GetEvents(ctx context.Context) ([]*types.Event, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Event
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByEntity provides a mock function with given fields: ctx, entity
func (_m *Store) GetEventsByEntity(ctx context.Context, entity string) ([]*types.Event, error) {
	ret := _m.Called(ctx, entity)

	var r0 []*types.Event
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Event); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtension provides a mock function with given fields: ctx, name
func (_m *Store) GetExtension(ctx context.Context, name string) (*types.Extension, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Extension
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Extension); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Extension)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtensions provides a mock function with given fields: ctx
func (_m *Store) GetExtensions(ctx context.Context) ([]*types.Extension, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Extension
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Extension); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Extension)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFailingKeepalives provides a mock function with given fields: ctx
func (_m *Store) GetFailingKeepalives(ctx context.Context) ([]*types.KeepaliveRecord, error) {
	ret := _m.Called(ctx)

	var r0 []*types.KeepaliveRecord
	if rf, ok := ret.Get(0).(func(context.Context) []*types.KeepaliveRecord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.KeepaliveRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHandlerByName provides a mock function with given fields: ctx, name
func (_m *Store) GetHandlerByName(ctx context.Context, name string) (*types.Handler, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Handler
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Handler); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Handler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHandlers provides a mock function with given fields: ctx
func (_m *Store) GetHandlers(ctx context.Context) ([]*types.Handler, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Handler
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Handler); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Handler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHookConfigByName provides a mock function with given fields: ctx, name
func (_m *Store) GetHookConfigByName(ctx context.Context, name string) (*types.HookConfig, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.HookConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.HookConfig); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.HookConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHookConfigWatcher provides a mock function with given fields: ctx
func (_m *Store) GetHookConfigWatcher(ctx context.Context) <-chan store.WatchEventHookConfig {
	ret := _m.Called(ctx)

	var r0 <-chan store.WatchEventHookConfig
	if rf, ok := ret.Get(0).(func(context.Context) <-chan store.WatchEventHookConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan store.WatchEventHookConfig)
		}
	}

	return r0
}

// GetHookConfigs provides a mock function with given fields: ctx
func (_m *Store) GetHookConfigs(ctx context.Context) ([]*types.HookConfig, error) {
	ret := _m.Called(ctx)

	var r0 []*types.HookConfig
	if rf, ok := ret.Get(0).(func(context.Context) []*types.HookConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.HookConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJWTSecret provides a mock function with given fields:
func (_m *Store) GetJWTSecret() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMutatorByName provides a mock function with given fields: ctx, name
func (_m *Store) GetMutatorByName(ctx context.Context, name string) (*types.Mutator, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Mutator
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Mutator); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Mutator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMutators provides a mock function with given fields: ctx
func (_m *Store) GetMutators(ctx context.Context) ([]*types.Mutator, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Mutator
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Mutator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Mutator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationByName provides a mock function with given fields: ctx, name
func (_m *Store) GetOrganizationByName(ctx context.Context, name string) (*types.Organization, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Organization); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizations provides a mock function with given fields: ctx
func (_m *Store) GetOrganizations(ctx context.Context) ([]*types.Organization, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Organization
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *Store) GetRoleByName(ctx context.Context, name string) (*types.Role, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Role); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoles provides a mock function with given fields: _a0
func (_m *Store) GetRoles(_a0 context.Context) ([]*types.Role, error) {
	ret := _m.Called(_a0)

	var r0 []*types.Role
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Role); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSilencedEntries provides a mock function with given fields: ctx
func (_m *Store) GetSilencedEntries(ctx context.Context) ([]*types.Silenced, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Silenced
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Silenced); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Silenced)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSilencedEntriesByCheckName provides a mock function with given fields: ctx, check
func (_m *Store) GetSilencedEntriesByCheckName(ctx context.Context, check string) ([]*types.Silenced, error) {
	ret := _m.Called(ctx, check)

	var r0 []*types.Silenced
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Silenced); ok {
		r0 = rf(ctx, check)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Silenced)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSilencedEntriesBySubscription provides a mock function with given fields: ctx, subscription
func (_m *Store) GetSilencedEntriesBySubscription(ctx context.Context, subscription string) ([]*types.Silenced, error) {
	ret := _m.Called(ctx, subscription)

	var r0 []*types.Silenced
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Silenced); ok {
		r0 = rf(ctx, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Silenced)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSilencedEntryByID provides a mock function with given fields: ctx, id
func (_m *Store) GetSilencedEntryByID(ctx context.Context, id string) (*types.Silenced, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.Silenced
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Silenced); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Silenced)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: subject, id
func (_m *Store) GetToken(subject string, id string) (*types.Claims, error) {
	ret := _m.Called(subject, id)

	var r0 *types.Claims
	if rf, ok := ret.Get(0).(func(string, string) *types.Claims); ok {
		r0 = rf(subject, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Claims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subject, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *Store) GetUser(ctx context.Context, username string) (*types.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *Store) GetUsers() ([]*types.User, error) {
	ret := _m.Called()

	var r0 []*types.User
	if rf, ok := ret.Get(0).(func() []*types.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInitializer provides a mock function with given fields:
func (_m *Store) NewInitializer() (store.Initializer, error) {
	ret := _m.Called()

	var r0 store.Initializer
	if rf, ok := ret.Get(0).(func() store.Initializer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Initializer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterExtension provides a mock function with given fields: _a0, _a1
func (_m *Store) RegisterExtension(_a0 context.Context, _a1 *types.Extension) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Extension) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAsset provides a mock function with given fields: ctx, asset
func (_m *Store) UpdateAsset(ctx context.Context, asset *types.Asset) error {
	ret := _m.Called(ctx, asset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Asset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCheckConfig provides a mock function with given fields: ctx, check
func (_m *Store) UpdateCheckConfig(ctx context.Context, check *types.CheckConfig) error {
	ret := _m.Called(ctx, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckConfig) error); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEntity provides a mock function with given fields: ctx, entity
func (_m *Store) UpdateEntity(ctx context.Context, entity *types.Entity) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Entity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEnvironment provides a mock function with given fields: ctx, env
func (_m *Store) UpdateEnvironment(ctx context.Context, env *types.Environment) error {
	ret := _m.Called(ctx, env)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Environment) error); ok {
		r0 = rf(ctx, env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *Store) UpdateEvent(ctx context.Context, event *types.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEventFilter provides a mock function with given fields: ctx, filter
func (_m *Store) UpdateEventFilter(ctx context.Context, filter *types.EventFilter) error {
	ret := _m.Called(ctx, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.EventFilter) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFailingKeepalive provides a mock function with given fields: ctx, entity, expiration
func (_m *Store) UpdateFailingKeepalive(ctx context.Context, entity *types.Entity, expiration int64) error {
	ret := _m.Called(ctx, entity, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Entity, int64) error); ok {
		r0 = rf(ctx, entity, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHandler provides a mock function with given fields: ctx, handler
func (_m *Store) UpdateHandler(ctx context.Context, handler *types.Handler) error {
	ret := _m.Called(ctx, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Handler) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHookConfig provides a mock function with given fields: ctx, check
func (_m *Store) UpdateHookConfig(ctx context.Context, check *types.HookConfig) error {
	ret := _m.Called(ctx, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.HookConfig) error); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJWTSecret provides a mock function with given fields: secret
func (_m *Store) UpdateJWTSecret(secret []byte) error {
	ret := _m.Called(secret)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMutator provides a mock function with given fields: ctx, mutator
func (_m *Store) UpdateMutator(ctx context.Context, mutator *types.Mutator) error {
	ret := _m.Called(ctx, mutator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Mutator) error); ok {
		r0 = rf(ctx, mutator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganization provides a mock function with given fields: ctx, org
func (_m *Store) UpdateOrganization(ctx context.Context, org *types.Organization) error {
	ret := _m.Called(ctx, org)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Organization) error); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRole provides a mock function with given fields: ctx, role
func (_m *Store) UpdateRole(ctx context.Context, role *types.Role) error {
	ret := _m.Called(ctx, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSilencedEntry provides a mock function with given fields: ctx, entry
func (_m *Store) UpdateSilencedEntry(ctx context.Context, entry *types.Silenced) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Silenced) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *Store) UpdateUser(user *types.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
