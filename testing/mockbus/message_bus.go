// Code generated by mockery v1.0.0
package mockbus

import messaging "github.com/sensu/sensu-go/backend/messaging"
import mock "github.com/stretchr/testify/mock"

// MessageBus is an autogenerated mock type for the MessageBus type
type MessageBus struct {
	mock.Mock
}

// Err provides a mock function with given fields:
func (_m *MessageBus) Err() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: topic, message
func (_m *MessageBus) Publish(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishDirect provides a mock function with given fields: topic, message
func (_m *MessageBus) PublishDirect(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MessageBus) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *MessageBus) Status() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MessageBus) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: topic, consumer, subscriber
func (_m *MessageBus) Subscribe(topic string, consumer string, subscriber messaging.Subscriber) (messaging.Subscription, error) {
	ret := _m.Called(topic, consumer, subscriber)

	var r0 messaging.Subscription
	if rf, ok := ret.Get(0).(func(string, string, messaging.Subscriber) messaging.Subscription); ok {
		r0 = rf(topic, consumer, subscriber)
	} else {
		r0 = ret.Get(0).(messaging.Subscription)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, messaging.Subscriber) error); ok {
		r1 = rf(topic, consumer, subscriber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
