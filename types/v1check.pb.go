// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1check.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A CheckV1 is a check specification compatible with Sensu 1.x
type CheckV1 struct {
	// Type is the check type (standard or metric).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name is the name of the check.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Command is the command to be executed.
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// Subscribers is the list of client subscriptions that results will be sent to.
	Subscribers []string `protobuf:"bytes,4,rep,name=subscribers" json:"subscribers,omitempty"`
	// Interval is the frequency in seconds a check is exectued.
	Interval int64 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	// Handler is the event handler used for events.
	Handler string `protobuf:"bytes,6,opt,name=handler,proto3" json:"handler,omitempty"`
	// Handlers are the event handlers used for events.
	Handlers []string `protobuf:"bytes,7,rep,name=handlers" json:"handlers,omitempty"`
	// Issued is the issued timestamp in epoch time.
	Issued int64 `protobuf:"varint,8,opt,name=issued,proto3" json:"issued,omitempty"`
	// Output is the output produced by the check.
	Output string `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	// Status is the status exit code produced by the check.
	Status int64 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	// History is history of last 21 exit status codes produced by the check.
	History []int64 `protobuf:"varint,11,rep,packed,name=history" json:"history,omitempty"`
	// Source is the check source.
	Source string `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	// Origin is the name of the client that executed the check (2.x entity)
	Origin string `protobuf:"bytes,13,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *CheckV1) Reset()                    { *m = CheckV1{} }
func (m *CheckV1) String() string            { return proto.CompactTextString(m) }
func (*CheckV1) ProtoMessage()               {}
func (*CheckV1) Descriptor() ([]byte, []int) { return fileDescriptorV1Check, []int{0} }

func (m *CheckV1) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CheckV1) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckV1) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CheckV1) GetSubscribers() []string {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *CheckV1) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *CheckV1) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *CheckV1) GetHandlers() []string {
	if m != nil {
		return m.Handlers
	}
	return nil
}

func (m *CheckV1) GetIssued() int64 {
	if m != nil {
		return m.Issued
	}
	return 0
}

func (m *CheckV1) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *CheckV1) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CheckV1) GetHistory() []int64 {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *CheckV1) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CheckV1) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckV1)(nil), "sensu.types.CheckV1")
}
func (this *CheckV1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckV1)
	if !ok {
		that2, ok := that.(CheckV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if len(this.Subscribers) != len(that1.Subscribers) {
		return false
	}
	for i := range this.Subscribers {
		if this.Subscribers[i] != that1.Subscribers[i] {
			return false
		}
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Handler != that1.Handler {
		return false
	}
	if len(this.Handlers) != len(that1.Handlers) {
		return false
	}
	for i := range this.Handlers {
		if this.Handlers[i] != that1.Handlers[i] {
			return false
		}
	}
	if this.Issued != that1.Issued {
		return false
	}
	if this.Output != that1.Output {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if this.History[i] != that1.History[i] {
			return false
		}
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (m *CheckV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckV1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Subscribers) > 0 {
		for _, s := range m.Subscribers {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Interval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(m.Interval))
	}
	if len(m.Handler) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Handler)))
		i += copy(dAtA[i:], m.Handler)
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Issued != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(m.Issued))
	}
	if len(m.Output) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(m.Status))
	}
	if len(m.History) > 0 {
		dAtA2 := make([]byte, len(m.History)*10)
		var j1 int
		for _, num1 := range m.History {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintV1Check(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	return i, nil
}

func encodeVarintV1Check(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCheckV1(r randyV1Check, easy bool) *CheckV1 {
	this := &CheckV1{}
	this.Type = string(randStringV1Check(r))
	this.Name = string(randStringV1Check(r))
	this.Command = string(randStringV1Check(r))
	v1 := r.Intn(10)
	this.Subscribers = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Subscribers[i] = string(randStringV1Check(r))
	}
	this.Interval = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Interval *= -1
	}
	this.Handler = string(randStringV1Check(r))
	v2 := r.Intn(10)
	this.Handlers = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Handlers[i] = string(randStringV1Check(r))
	}
	this.Issued = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Issued *= -1
	}
	this.Output = string(randStringV1Check(r))
	this.Status = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v3 := r.Intn(10)
	this.History = make([]int64, v3)
	for i := 0; i < v3; i++ {
		this.History[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.History[i] *= -1
		}
	}
	this.Source = string(randStringV1Check(r))
	this.Origin = string(randStringV1Check(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyV1Check interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneV1Check(r randyV1Check) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringV1Check(r randyV1Check) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneV1Check(r)
	}
	return string(tmps)
}
func randUnrecognizedV1Check(r randyV1Check, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldV1Check(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldV1Check(dAtA []byte, r randyV1Check, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateV1Check(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateV1Check(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateV1Check(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateV1Check(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateV1Check(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateV1Check(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateV1Check(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CheckV1) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	if len(m.Subscribers) > 0 {
		for _, s := range m.Subscribers {
			l = len(s)
			n += 1 + l + sovV1Check(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovV1Check(uint64(m.Interval))
	}
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			l = len(s)
			n += 1 + l + sovV1Check(uint64(l))
		}
	}
	if m.Issued != 0 {
		n += 1 + sovV1Check(uint64(m.Issued))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovV1Check(uint64(m.Status))
	}
	if len(m.History) > 0 {
		l = 0
		for _, e := range m.History {
			l += sovV1Check(uint64(e))
		}
		n += 1 + sovV1Check(uint64(l)) + l
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovV1Check(uint64(l))
	}
	return n
}

func sovV1Check(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozV1Check(x uint64) (n int) {
	return sovV1Check(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1Check
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribers = append(m.Subscribers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handlers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handlers = append(m.Handlers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issued", wireType)
			}
			m.Issued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Issued |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowV1Check
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.History = append(m.History, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowV1Check
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthV1Check
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowV1Check
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.History = append(m.History, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Check
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1Check(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1Check
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipV1Check(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowV1Check
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1Check
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthV1Check
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowV1Check
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipV1Check(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthV1Check = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowV1Check   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1check.proto", fileDescriptorV1Check) }

var fileDescriptorV1Check = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x6e, 0xe2, 0x30,
	0x14, 0xc6, 0xc7, 0x04, 0x08, 0x98, 0x61, 0xe3, 0xc5, 0xe8, 0x89, 0x85, 0x27, 0x9a, 0x91, 0xaa,
	0x6c, 0x0a, 0x42, 0xbd, 0x01, 0xbd, 0x01, 0x8b, 0x2e, 0xba, 0x4b, 0x82, 0x9b, 0x58, 0x25, 0x31,
	0xf2, 0x1f, 0x24, 0x6e, 0xd2, 0x23, 0xf4, 0x08, 0x3d, 0x02, 0xcb, 0x9e, 0xa0, 0x6a, 0xc3, 0x25,
	0xba, 0xac, 0xfc, 0x1c, 0x10, 0xbb, 0xef, 0xf7, 0xd9, 0xef, 0xf7, 0x16, 0x8f, 0x4e, 0xf7, 0xcb,
	0xa2, 0x12, 0xc5, 0xf3, 0x7c, 0xa7, 0x95, 0x55, 0x6c, 0x62, 0x44, 0x63, 0xdc, 0xdc, 0x1e, 0x76,
	0xc2, 0xcc, 0x6e, 0x4b, 0x69, 0x2b, 0x97, 0xcf, 0x0b, 0x55, 0x2f, 0x4a, 0x55, 0xaa, 0x05, 0xfe,
	0xc9, 0xdd, 0x13, 0x12, 0x02, 0xa6, 0x30, 0xfb, 0xef, 0xd4, 0xa3, 0xf1, 0xbd, 0x77, 0x3d, 0x2c,
	0x19, 0xa3, 0x7d, 0xef, 0x00, 0x92, 0x90, 0x74, 0xbc, 0xc6, 0xec, 0xbb, 0x26, 0xab, 0x05, 0xf4,
	0x42, 0xe7, 0x33, 0x03, 0x1a, 0x17, 0xaa, 0xae, 0xb3, 0x66, 0x03, 0x11, 0xd6, 0x67, 0x64, 0x37,
	0x74, 0x62, 0x5c, 0x6e, 0x0a, 0x2d, 0x73, 0xa1, 0x0d, 0xf4, 0x93, 0x28, 0x1d, 0xaf, 0xfa, 0xc7,
	0x8f, 0xbf, 0x64, 0x7d, 0xfd, 0xc0, 0x66, 0x74, 0x24, 0x1b, 0x2b, 0xf4, 0x3e, 0xdb, 0xc2, 0x20,
	0x21, 0x69, 0xb4, 0xbe, 0xb0, 0xb7, 0x57, 0x59, 0xb3, 0xd9, 0x0a, 0x0d, 0xc3, 0x60, 0xef, 0x90,
	0x25, 0x74, 0xd4, 0x45, 0x03, 0xf1, 0x95, 0xfa, 0xd2, 0xb2, 0x3f, 0x74, 0x28, 0x8d, 0x71, 0x62,
	0x03, 0x23, 0xb4, 0x76, 0xe4, 0x7b, 0xe5, 0xec, 0xce, 0x59, 0x18, 0xa3, 0xb2, 0x23, 0xdf, 0x1b,
	0x9b, 0x59, 0x67, 0x80, 0x86, 0xff, 0x81, 0x18, 0xa7, 0x71, 0x25, 0x8d, 0x55, 0xfa, 0x00, 0x93,
	0x24, 0x4a, 0xa3, 0x6e, 0xd1, 0xb9, 0xc4, 0x39, 0xe5, 0x74, 0x21, 0xe0, 0x77, 0xf0, 0x05, 0xc2,
	0x3d, 0x5a, 0x96, 0xb2, 0x81, 0x69, 0xb7, 0x07, 0x69, 0xf5, 0xff, 0xfb, 0x8b, 0x93, 0xd7, 0x96,
	0x93, 0xb7, 0x96, 0x93, 0x63, 0xcb, 0xc9, 0x7b, 0xcb, 0xc9, 0x67, 0xcb, 0xc9, 0xcb, 0x89, 0xff,
	0x7a, 0x1c, 0xe0, 0xe5, 0xf2, 0x21, 0x5e, 0xe4, 0xee, 0x27, 0x00, 0x00, 0xff, 0xff, 0xba, 0xde,
	0x61, 0xc2, 0xde, 0x01, 0x00, 0x00,
}
