// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: check.proto

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		check.proto
		event.proto

	It has these top-level messages:
		Check
		Event
		Client
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A CheckV1 is a check specification compatible with Sensu 1.x
type Check struct {
	// Type is the check type (standard or metric).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name is the name of the check.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Command is the command to be executed.
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// Subscribers is the list of client subscriptions that results will be sent to.
	Subscribers []string `protobuf:"bytes,4,rep,name=subscribers" json:"subscribers,omitempty"`
	// Interval is the frequency in seconds a check is exectued.
	Interval int64 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	// Handlers are the event handlers used for events.
	Handlers []string `protobuf:"bytes,6,rep,name=handlers" json:"handlers,omitempty"`
	// Issued is the issued timestamp in epoch time.
	Issued int64 `protobuf:"varint,7,opt,name=issued,proto3" json:"issued,omitempty"`
	// Output is the output produced by the check.
	Output string `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
	// Status is the status exit code produced by the check.
	Status int64 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	// History is history of last 21 exit status codes produced by the check.
	History []int64 `protobuf:"varint,10,rep,packed,name=history" json:"history,omitempty"`
	// Source is the check source.
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	// Origin is the name of the client that executed the check (2.x entity)
	Origin string `protobuf:"bytes,12,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *Check) Reset()                    { *m = Check{} }
func (m *Check) String() string            { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()               {}
func (*Check) Descriptor() ([]byte, []int) { return fileDescriptorCheck, []int{0} }

func (m *Check) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Check) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Check) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Check) GetSubscribers() []string {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *Check) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Check) GetHandlers() []string {
	if m != nil {
		return m.Handlers
	}
	return nil
}

func (m *Check) GetIssued() int64 {
	if m != nil {
		return m.Issued
	}
	return 0
}

func (m *Check) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Check) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Check) GetHistory() []int64 {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Check) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Check) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func init() {
	proto.RegisterType((*Check)(nil), "sensu.types.Check")
}
func (this *Check) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Check)
	if !ok {
		that2, ok := that.(Check)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if len(this.Subscribers) != len(that1.Subscribers) {
		return false
	}
	for i := range this.Subscribers {
		if this.Subscribers[i] != that1.Subscribers[i] {
			return false
		}
	}
	if this.Interval != that1.Interval {
		return false
	}
	if len(this.Handlers) != len(that1.Handlers) {
		return false
	}
	for i := range this.Handlers {
		if this.Handlers[i] != that1.Handlers[i] {
			return false
		}
	}
	if this.Issued != that1.Issued {
		return false
	}
	if this.Output != that1.Output {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if this.History[i] != that1.History[i] {
			return false
		}
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (m *Check) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Check) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Subscribers) > 0 {
		for _, s := range m.Subscribers {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Interval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Interval))
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Issued != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Issued))
	}
	if len(m.Output) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Status))
	}
	if len(m.History) > 0 {
		dAtA2 := make([]byte, len(m.History)*10)
		var j1 int
		for _, num1 := range m.History {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintCheck(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	return i, nil
}

func encodeVarintCheck(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCheck(r randyCheck, easy bool) *Check {
	this := &Check{}
	this.Type = string(randStringCheck(r))
	this.Name = string(randStringCheck(r))
	this.Command = string(randStringCheck(r))
	v1 := r.Intn(10)
	this.Subscribers = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Subscribers[i] = string(randStringCheck(r))
	}
	this.Interval = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Interval *= -1
	}
	v2 := r.Intn(10)
	this.Handlers = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Handlers[i] = string(randStringCheck(r))
	}
	this.Issued = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Issued *= -1
	}
	this.Output = string(randStringCheck(r))
	this.Status = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v3 := r.Intn(10)
	this.History = make([]int64, v3)
	for i := 0; i < v3; i++ {
		this.History[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.History[i] *= -1
		}
	}
	this.Source = string(randStringCheck(r))
	this.Origin = string(randStringCheck(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCheck interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCheck(r randyCheck) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCheck(r randyCheck) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneCheck(r)
	}
	return string(tmps)
}
func randUnrecognizedCheck(r randyCheck, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCheck(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCheck(dAtA []byte, r randyCheck, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCheck(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Check) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	if len(m.Subscribers) > 0 {
		for _, s := range m.Subscribers {
			l = len(s)
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovCheck(uint64(m.Interval))
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			l = len(s)
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	if m.Issued != 0 {
		n += 1 + sovCheck(uint64(m.Issued))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCheck(uint64(m.Status))
	}
	if len(m.History) > 0 {
		l = 0
		for _, e := range m.History {
			l += sovCheck(uint64(e))
		}
		n += 1 + sovCheck(uint64(l)) + l
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	return n
}

func sovCheck(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheck(x uint64) (n int) {
	return sovCheck(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Check) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Check: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Check: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribers = append(m.Subscribers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handlers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handlers = append(m.Handlers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issued", wireType)
			}
			m.Issued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Issued |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheck
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.History = append(m.History, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheck
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCheck
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheck
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.History = append(m.History, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheck(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheck
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheck
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheck(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheck = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheck   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("check.proto", fileDescriptorCheck) }

var fileDescriptorCheck = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4b, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0xd3, 0xa7, 0xc3, 0xca, 0x0b, 0x34, 0xea, 0xc2, 0x44, 0x2c, 0x50, 0x36, 0xb4,
	0x42, 0xdc, 0xa0, 0xdc, 0xa0, 0x4b, 0x76, 0x49, 0x6a, 0x12, 0x8b, 0x26, 0x8e, 0xfc, 0xa8, 0xd4,
	0x9b, 0x70, 0x04, 0x8e, 0xc0, 0x0d, 0xe8, 0x92, 0x13, 0x20, 0x08, 0x97, 0x60, 0x89, 0x3c, 0x4e,
	0xab, 0xee, 0xe6, 0xfb, 0x32, 0xf3, 0xff, 0x91, 0x69, 0x5c, 0x54, 0xa2, 0x78, 0x59, 0xb4, 0x5a,
	0x59, 0xc5, 0x62, 0x23, 0x1a, 0xe3, 0x16, 0x76, 0xdf, 0x0a, 0x33, 0xbf, 0x2b, 0xa5, 0xad, 0x5c,
	0xbe, 0x28, 0x54, 0xbd, 0x2c, 0x55, 0xa9, 0x96, 0xb8, 0x93, 0xbb, 0x67, 0x24, 0x04, 0x9c, 0xc2,
	0xed, 0xcd, 0xc7, 0x80, 0x8e, 0x1e, 0x7d, 0x16, 0x63, 0x74, 0xe8, 0x13, 0x80, 0x24, 0x24, 0x9d,
	0xad, 0x71, 0xf6, 0xae, 0xc9, 0x6a, 0x01, 0x83, 0xe0, 0xfc, 0xcc, 0x80, 0x4e, 0x0a, 0x55, 0xd7,
	0x59, 0xb3, 0x81, 0x08, 0xf5, 0x11, 0xd9, 0x2d, 0x8d, 0x8d, 0xcb, 0x4d, 0xa1, 0x65, 0x2e, 0xb4,
	0x81, 0x61, 0x12, 0xa5, 0xb3, 0xd5, 0xf0, 0xf0, 0x75, 0x4d, 0xd6, 0xe7, 0x1f, 0xd8, 0x9c, 0x4e,
	0x65, 0x63, 0x85, 0xde, 0x65, 0x5b, 0x18, 0x25, 0x24, 0x8d, 0xd6, 0x27, 0x66, 0x09, 0x9d, 0x56,
	0x59, 0xb3, 0xd9, 0xfa, 0x80, 0xf1, 0x59, 0xc0, 0xc9, 0xb2, 0x2b, 0x3a, 0x96, 0xc6, 0x38, 0xb1,
	0x81, 0x09, 0xde, 0xf6, 0xe4, 0xbd, 0x72, 0xb6, 0x75, 0x16, 0xa6, 0xf8, 0x5b, 0x3d, 0x79, 0x6f,
	0x6c, 0x66, 0x9d, 0x81, 0x59, 0xd8, 0x0f, 0xc4, 0x38, 0x9d, 0x54, 0xd2, 0x58, 0xa5, 0xf7, 0x40,
	0x93, 0x28, 0x8d, 0xfa, 0xa2, 0xa3, 0xc4, 0x3b, 0xe5, 0x74, 0x21, 0x20, 0x0e, 0x79, 0x81, 0xb0,
	0x47, 0xcb, 0x52, 0x36, 0x70, 0xd9, 0xf7, 0x20, 0xad, 0x92, 0xbf, 0x1f, 0x4e, 0xde, 0x3a, 0x4e,
	0xde, 0x3b, 0x4e, 0x0e, 0x1d, 0x27, 0x9f, 0x1d, 0x27, 0xdf, 0x1d, 0x27, 0xaf, 0xbf, 0xfc, 0xe2,
	0x69, 0xb0, 0xbb, 0xcf, 0xc7, 0xf8, 0xe4, 0x0f, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xec,
	0xa9, 0x8e, 0xbd, 0x01, 0x00, 0x00,
}
