// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: silenced.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Silenced is the representation of a silence entry.
type Silenced struct {
	// ID is the combination of subscription and check name (subscription:checkname)
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Expire is the number of seconds the entry will live
	Expire int64 `protobuf:"varint,2,opt,name=expire,proto3" json:"expire"`
	// ExpireOnResolve defaults to false, clears the entry on resolution when set
	// to true
	ExpireOnResolve bool `protobuf:"varint,3,opt,name=expire_on_resolve,json=expireOnResolve,proto3" json:"expire_on_resolve"`
	// Creator is the author of the silenced entry
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// Check is the name of the check event to be silenced.
	Check string `protobuf:"bytes,5,opt,name=check,proto3" json:"check,omitempty"`
	// Reason is used to provide context to the entry
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	// Subscription is the name of the subscription to which the entry applies.
	Subscription string `protobuf:"bytes,7,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// Begin is a timestamp at which the silenced entry takes effect.
	Begin int64 `protobuf:"varint,10,opt,name=begin,proto3" json:"begin"`
	// Namespace to which the silenced entry belongs to
	Namespace            string   `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Silenced) Reset()         { *m = Silenced{} }
func (m *Silenced) String() string { return proto.CompactTextString(m) }
func (*Silenced) ProtoMessage()    {}
func (*Silenced) Descriptor() ([]byte, []int) {
	return fileDescriptor_silenced_b6f535eb215d2318, []int{0}
}
func (m *Silenced) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Silenced) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Silenced.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Silenced) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Silenced.Merge(dst, src)
}
func (m *Silenced) XXX_Size() int {
	return m.Size()
}
func (m *Silenced) XXX_DiscardUnknown() {
	xxx_messageInfo_Silenced.DiscardUnknown(m)
}

var xxx_messageInfo_Silenced proto.InternalMessageInfo

func (m *Silenced) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Silenced) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Silenced) GetExpireOnResolve() bool {
	if m != nil {
		return m.ExpireOnResolve
	}
	return false
}

func (m *Silenced) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Silenced) GetCheck() string {
	if m != nil {
		return m.Check
	}
	return ""
}

func (m *Silenced) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Silenced) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *Silenced) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *Silenced) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*Silenced)(nil), "sensu.types.Silenced")
}
func (this *Silenced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Silenced)
	if !ok {
		that2, ok := that.(Silenced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.ExpireOnResolve != that1.ExpireOnResolve {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Check != that1.Check {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Subscription != that1.Subscription {
		return false
	}
	if this.Begin != that1.Begin {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *Silenced) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Silenced) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Expire != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(m.Expire))
	}
	if m.ExpireOnResolve {
		dAtA[i] = 0x18
		i++
		if m.ExpireOnResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Creator) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Creator)))
		i += copy(dAtA[i:], m.Creator)
	}
	if len(m.Check) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Check)))
		i += copy(dAtA[i:], m.Check)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Subscription) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Subscription)))
		i += copy(dAtA[i:], m.Subscription)
	}
	if m.Begin != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(m.Begin))
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSilenced(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSilenced(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSilenced(r randySilenced, easy bool) *Silenced {
	this := &Silenced{}
	this.ID = string(randStringSilenced(r))
	this.Expire = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Expire *= -1
	}
	this.ExpireOnResolve = bool(bool(r.Intn(2) == 0))
	this.Creator = string(randStringSilenced(r))
	this.Check = string(randStringSilenced(r))
	this.Reason = string(randStringSilenced(r))
	this.Subscription = string(randStringSilenced(r))
	this.Begin = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Begin *= -1
	}
	this.Namespace = string(randStringSilenced(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSilenced(r, 12)
	}
	return this
}

type randySilenced interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSilenced(r randySilenced) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSilenced(r randySilenced) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneSilenced(r)
	}
	return string(tmps)
}
func randUnrecognizedSilenced(r randySilenced, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSilenced(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSilenced(dAtA []byte, r randySilenced, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSilenced(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSilenced(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Silenced) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovSilenced(uint64(m.Expire))
	}
	if m.ExpireOnResolve {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	l = len(m.Check)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	l = len(m.Subscription)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	if m.Begin != 0 {
		n += 1 + sovSilenced(uint64(m.Begin))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSilenced(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSilenced(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSilenced(x uint64) (n int) {
	return sovSilenced(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Silenced) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSilenced
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Silenced: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Silenced: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireOnResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireOnResolve = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Check = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSilenced
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSilenced(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSilenced
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSilenced(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSilenced
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSilenced
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSilenced
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSilenced
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSilenced(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSilenced = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSilenced   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("silenced.proto", fileDescriptor_silenced_b6f535eb215d2318) }

var fileDescriptor_silenced_b6f535eb215d2318 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4e, 0xeb, 0x30,
	0x10, 0x86, 0x9f, 0xd3, 0x26, 0x6d, 0xdd, 0xa7, 0x3e, 0x3d, 0x0b, 0x21, 0x83, 0x2a, 0xa7, 0x02,
	0x09, 0x65, 0x43, 0xbb, 0xe0, 0x06, 0x11, 0x2c, 0x58, 0x21, 0x85, 0x1d, 0x9b, 0x2a, 0x49, 0x87,
	0xd4, 0xa2, 0xb5, 0x23, 0x3b, 0x41, 0x70, 0x13, 0x8e, 0xc0, 0x11, 0x38, 0x42, 0x57, 0x88, 0x13,
	0x44, 0x10, 0x76, 0x3d, 0x01, 0x4b, 0x54, 0x3b, 0x88, 0x22, 0x56, 0x33, 0xff, 0x37, 0xff, 0x6f,
	0x8d, 0x6d, 0x3c, 0xd0, 0x7c, 0x01, 0x22, 0x85, 0xd9, 0x38, 0x57, 0xb2, 0x90, 0xa4, 0xaf, 0x41,
	0xe8, 0x72, 0x5c, 0xdc, 0xe7, 0xa0, 0xf7, 0x8f, 0x33, 0x5e, 0xcc, 0xcb, 0x64, 0x9c, 0xca, 0xe5,
	0x24, 0x93, 0x99, 0x9c, 0x18, 0x4f, 0x52, 0x5e, 0x1b, 0x65, 0x84, 0xe9, 0x6c, 0xf6, 0xe0, 0xd9,
	0xc1, 0xdd, 0xcb, 0xe6, 0x38, 0xb2, 0x8b, 0x1d, 0x3e, 0xa3, 0x68, 0x84, 0x82, 0x5e, 0xe8, 0xd5,
	0x95, 0xef, 0x9c, 0x9f, 0x46, 0x0e, 0x9f, 0x91, 0x23, 0xec, 0xc1, 0x5d, 0xce, 0x15, 0x50, 0x67,
	0x84, 0x82, 0x56, 0x38, 0x58, 0x55, 0x3e, 0x5a, 0x57, 0x7e, 0x43, 0xa3, 0xa6, 0x92, 0x33, 0xfc,
	0xdf, 0x76, 0x53, 0x29, 0xa6, 0x0a, 0xb4, 0x5c, 0xdc, 0x02, 0x6d, 0x8d, 0x50, 0xd0, 0x0d, 0xf7,
	0x9a, 0xc8, 0x6f, 0x43, 0xf4, 0xcf, 0xa2, 0x0b, 0x11, 0x59, 0x40, 0x18, 0xee, 0xa4, 0x0a, 0xe2,
	0x42, 0x2a, 0xda, 0x36, 0xbb, 0xb4, 0x37, 0xe1, 0xe8, 0x0b, 0x92, 0x1d, 0xec, 0xa6, 0x73, 0x48,
	0x6f, 0xa8, 0xbb, 0x99, 0x46, 0x56, 0x90, 0x21, 0xf6, 0x14, 0xc4, 0x5a, 0x0a, 0xea, 0x6d, 0x85,
	0x1a, 0x46, 0x02, 0xfc, 0x57, 0x97, 0x89, 0x4e, 0x15, 0xcf, 0x0b, 0x2e, 0x05, 0xed, 0x6c, 0x79,
	0x7e, 0x4c, 0x88, 0x8f, 0xdd, 0x04, 0x32, 0x2e, 0x28, 0x36, 0x77, 0xed, 0xad, 0x2b, 0xdf, 0x82,
	0xc8, 0x16, 0x32, 0xc4, 0x3d, 0x11, 0x2f, 0x41, 0xe7, 0x71, 0x0a, 0xb4, 0x6f, 0x56, 0xf8, 0x06,
	0xe1, 0xe1, 0xc7, 0x1b, 0x43, 0x8f, 0x35, 0x43, 0x4f, 0x35, 0x43, 0xab, 0x9a, 0xa1, 0x97, 0x9a,
	0xa1, 0xd7, 0x9a, 0xa1, 0x87, 0x77, 0xf6, 0xe7, 0xca, 0x35, 0x9f, 0x94, 0x78, 0xe6, 0xf1, 0x4f,
	0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x65, 0xd8, 0x68, 0x74, 0xca, 0x01, 0x00, 0x00,
}
