// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Entity is the Entity supplying the event. The default Entity for any
// Event is the running Agent process--if the Event is sent by an Agent.
type Entity struct {
	ID               string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Class            string         `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	System           System         `protobuf:"bytes,3,opt,name=system" json:"system"`
	Subscriptions    []string       `protobuf:"bytes,4,rep,name=subscriptions" json:"subscriptions"`
	LastSeen         int64          `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Deregister       bool           `protobuf:"varint,6,opt,name=deregister,proto3" json:"deregister,omitempty"`
	Deregistration   Deregistration `protobuf:"bytes,7,opt,name=deregistration" json:"deregistration"`
	KeepaliveTimeout uint32         `protobuf:"varint,8,opt,name=keepalive_timeout,json=keepaliveTimeout,proto3" json:"keepalive_timeout,omitempty"`
	Environment      string         `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	Organization     string         `protobuf:"bytes,10,opt,name=organization,proto3" json:"organization,omitempty"`
	User             string         `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	// ExtendedAttributes store serialized arbitrary JSON-encoded data
	ExtendedAttributes []byte `protobuf:"bytes,12,opt,name=extended_attributes,json=extendedAttributes,proto3" json:"-"`
	// Redact contains the fields to redact on the agent
	Redact []string `protobuf:"bytes,13,rep,name=redact" json:"redact,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{0} }

func (m *Entity) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Entity) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *Entity) GetSystem() System {
	if m != nil {
		return m.System
	}
	return System{}
}

func (m *Entity) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Entity) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *Entity) GetDeregister() bool {
	if m != nil {
		return m.Deregister
	}
	return false
}

func (m *Entity) GetDeregistration() Deregistration {
	if m != nil {
		return m.Deregistration
	}
	return Deregistration{}
}

func (m *Entity) GetKeepaliveTimeout() uint32 {
	if m != nil {
		return m.KeepaliveTimeout
	}
	return 0
}

func (m *Entity) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Entity) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Entity) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Entity) GetExtendedAttributes() []byte {
	if m != nil {
		return m.ExtendedAttributes
	}
	return nil
}

func (m *Entity) GetRedact() []string {
	if m != nil {
		return m.Redact
	}
	return nil
}

// System contains information about the system that the Agent process
// is running on, used for additional Entity context.
type System struct {
	Hostname        string  `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	OS              string  `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Platform        string  `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformFamily  string  `protobuf:"bytes,4,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	PlatformVersion string  `protobuf:"bytes,5,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	Network         Network `protobuf:"bytes,6,opt,name=network" json:"network"`
	Arch            string  `protobuf:"bytes,7,opt,name=arch,proto3" json:"arch,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{1} }

func (m *System) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *System) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *System) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *System) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *System) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *System) GetNetwork() Network {
	if m != nil {
		return m.Network
	}
	return Network{}
}

func (m *System) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

// Network contains information about the system network interfaces
// that the Agent process is running on, used for additional Entity
// context.
type Network struct {
	Interfaces []NetworkInterface `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{2} }

func (m *Network) GetInterfaces() []NetworkInterface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// NetworkInterface contains information about a system network
// interface.
type NetworkInterface struct {
	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MAC       string   `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses" json:"addresses"`
}

func (m *NetworkInterface) Reset()                    { *m = NetworkInterface{} }
func (m *NetworkInterface) String() string            { return proto.CompactTextString(m) }
func (*NetworkInterface) ProtoMessage()               {}
func (*NetworkInterface) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{3} }

func (m *NetworkInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkInterface) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *NetworkInterface) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Deregistration contains configuration for Sensu entity de-registration.
type Deregistration struct {
	Handler string `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
}

func (m *Deregistration) Reset()                    { *m = Deregistration{} }
func (m *Deregistration) String() string            { return proto.CompactTextString(m) }
func (*Deregistration) ProtoMessage()               {}
func (*Deregistration) Descriptor() ([]byte, []int) { return fileDescriptorEntity, []int{4} }

func (m *Deregistration) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func init() {
	proto.RegisterType((*Entity)(nil), "sensu.types.Entity")
	proto.RegisterType((*System)(nil), "sensu.types.System")
	proto.RegisterType((*Network)(nil), "sensu.types.Network")
	proto.RegisterType((*NetworkInterface)(nil), "sensu.types.NetworkInterface")
	proto.RegisterType((*Deregistration)(nil), "sensu.types.Deregistration")
}
func (this *Entity) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Entity)
	if !ok {
		that2, ok := that.(Entity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	if !this.System.Equal(&that1.System) {
		return false
	}
	if len(this.Subscriptions) != len(that1.Subscriptions) {
		return false
	}
	for i := range this.Subscriptions {
		if this.Subscriptions[i] != that1.Subscriptions[i] {
			return false
		}
	}
	if this.LastSeen != that1.LastSeen {
		return false
	}
	if this.Deregister != that1.Deregister {
		return false
	}
	if !this.Deregistration.Equal(&that1.Deregistration) {
		return false
	}
	if this.KeepaliveTimeout != that1.KeepaliveTimeout {
		return false
	}
	if this.Environment != that1.Environment {
		return false
	}
	if this.Organization != that1.Organization {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if !bytes.Equal(this.ExtendedAttributes, that1.ExtendedAttributes) {
		return false
	}
	if len(this.Redact) != len(that1.Redact) {
		return false
	}
	for i := range this.Redact {
		if this.Redact[i] != that1.Redact[i] {
			return false
		}
	}
	return true
}
func (this *System) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*System)
	if !ok {
		that2, ok := that.(System)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.OS != that1.OS {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.PlatformFamily != that1.PlatformFamily {
		return false
	}
	if this.PlatformVersion != that1.PlatformVersion {
		return false
	}
	if !this.Network.Equal(&that1.Network) {
		return false
	}
	if this.Arch != that1.Arch {
		return false
	}
	return true
}
func (this *Network) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Network)
	if !ok {
		that2, ok := that.(Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(&that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *NetworkInterface) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NetworkInterface)
	if !ok {
		that2, ok := that.(NetworkInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MAC != that1.MAC {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	return true
}
func (this *Deregistration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Deregistration)
	if !ok {
		that2, ok := that.(Deregistration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handler != that1.Handler {
		return false
	}
	return true
}
func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Class) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Class)))
		i += copy(dAtA[i:], m.Class)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.System.Size()))
	n1, err := m.System.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LastSeen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.LastSeen))
	}
	if m.Deregister {
		dAtA[i] = 0x30
		i++
		if m.Deregister {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Deregistration.Size()))
	n2, err := m.Deregistration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.KeepaliveTimeout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEntity(dAtA, i, uint64(m.KeepaliveTimeout))
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Organization) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.ExtendedAttributes) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.ExtendedAttributes)))
		i += copy(dAtA[i:], m.ExtendedAttributes)
	}
	if len(m.Redact) > 0 {
		for _, s := range m.Redact {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *System) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *System) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.OS) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.OS)))
		i += copy(dAtA[i:], m.OS)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.PlatformFamily) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PlatformFamily)))
		i += copy(dAtA[i:], m.PlatformFamily)
	}
	if len(m.PlatformVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.PlatformVersion)))
		i += copy(dAtA[i:], m.PlatformVersion)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintEntity(dAtA, i, uint64(m.Network.Size()))
	n3, err := m.Network.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Arch) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Arch)))
		i += copy(dAtA[i:], m.Arch)
	}
	return i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, msg := range m.Interfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEntity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.MAC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.MAC)))
		i += copy(dAtA[i:], m.MAC)
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Deregistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deregistration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handler) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Handler)))
		i += copy(dAtA[i:], m.Handler)
	}
	return i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEntity(r randyEntity, easy bool) *Entity {
	this := &Entity{}
	this.ID = string(randStringEntity(r))
	this.Class = string(randStringEntity(r))
	v1 := NewPopulatedSystem(r, easy)
	this.System = *v1
	v2 := r.Intn(10)
	this.Subscriptions = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Subscriptions[i] = string(randStringEntity(r))
	}
	this.LastSeen = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastSeen *= -1
	}
	this.Deregister = bool(bool(r.Intn(2) == 0))
	v3 := NewPopulatedDeregistration(r, easy)
	this.Deregistration = *v3
	this.KeepaliveTimeout = uint32(r.Uint32())
	this.Environment = string(randStringEntity(r))
	this.Organization = string(randStringEntity(r))
	this.User = string(randStringEntity(r))
	v4 := r.Intn(100)
	this.ExtendedAttributes = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.ExtendedAttributes[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(10)
	this.Redact = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Redact[i] = string(randStringEntity(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSystem(r randyEntity, easy bool) *System {
	this := &System{}
	this.Hostname = string(randStringEntity(r))
	this.OS = string(randStringEntity(r))
	this.Platform = string(randStringEntity(r))
	this.PlatformFamily = string(randStringEntity(r))
	this.PlatformVersion = string(randStringEntity(r))
	v6 := NewPopulatedNetwork(r, easy)
	this.Network = *v6
	this.Arch = string(randStringEntity(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetwork(r randyEntity, easy bool) *Network {
	this := &Network{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Interfaces = make([]NetworkInterface, v7)
		for i := 0; i < v7; i++ {
			v8 := NewPopulatedNetworkInterface(r, easy)
			this.Interfaces[i] = *v8
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkInterface(r randyEntity, easy bool) *NetworkInterface {
	this := &NetworkInterface{}
	this.Name = string(randStringEntity(r))
	this.MAC = string(randStringEntity(r))
	v9 := r.Intn(10)
	this.Addresses = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.Addresses[i] = string(randStringEntity(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeregistration(r randyEntity, easy bool) *Deregistration {
	this := &Deregistration{}
	this.Handler = string(randStringEntity(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEntity interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEntity(r randyEntity) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEntity(r randyEntity) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneEntity(r)
	}
	return string(tmps)
}
func randUnrecognizedEntity(r randyEntity, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEntity(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEntity(dAtA []byte, r randyEntity, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEntity(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Entity) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = m.System.Size()
	n += 1 + l + sovEntity(uint64(l))
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.LastSeen != 0 {
		n += 1 + sovEntity(uint64(m.LastSeen))
	}
	if m.Deregister {
		n += 2
	}
	l = m.Deregistration.Size()
	n += 1 + l + sovEntity(uint64(l))
	if m.KeepaliveTimeout != 0 {
		n += 1 + sovEntity(uint64(m.KeepaliveTimeout))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.ExtendedAttributes)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Redact) > 0 {
		for _, s := range m.Redact {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *System) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.OS)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.PlatformFamily)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.PlatformVersion)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = m.Network.Size()
	n += 1 + l + sovEntity(uint64(l))
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Network) Size() (n int) {
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *NetworkInterface) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.MAC)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *Deregistration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deregister", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deregister = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deregistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deregistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepaliveTimeout", wireType)
			}
			m.KeepaliveTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepaliveTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedAttributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedAttributes = append(m.ExtendedAttributes[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtendedAttributes == nil {
				m.ExtendedAttributes = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redact = append(m.Redact, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *System) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: System: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: System: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFamily", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformFamily = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, NetworkInterface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MAC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MAC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deregistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deregistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deregistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("entity.proto", fileDescriptorEntity) }

var fileDescriptorEntity = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x4d, 0x6e, 0x13, 0x4b,
	0x10, 0x4e, 0xfb, 0xdf, 0x65, 0x3b, 0x2f, 0xe9, 0x44, 0x51, 0xbf, 0x44, 0x6f, 0x3c, 0xf2, 0x5b,
	0x30, 0x10, 0xc5, 0x11, 0x01, 0xc1, 0x3a, 0x26, 0x20, 0x65, 0x01, 0x88, 0x0e, 0x62, 0x81, 0x90,
	0xac, 0xb6, 0xa7, 0x6c, 0x8f, 0x62, 0xf7, 0x58, 0xdd, 0xed, 0x80, 0xd9, 0x71, 0x0b, 0x8e, 0xc0,
	0x11, 0x38, 0x42, 0x96, 0x9c, 0xc0, 0x02, 0xb3, 0xf3, 0x01, 0x10, 0x4b, 0x34, 0x3d, 0x63, 0xc7,
	0x13, 0xb1, 0xfb, 0xbe, 0xaf, 0xbe, 0xaa, 0x2e, 0x57, 0x95, 0x07, 0xaa, 0x28, 0x4d, 0x60, 0xa6,
	0xcd, 0xb1, 0x0a, 0x4d, 0x48, 0x2b, 0x1a, 0xa5, 0x9e, 0x34, 0xcd, 0x74, 0x8c, 0x7a, 0xff, 0xa8,
	0x1f, 0x98, 0xc1, 0xa4, 0xd3, 0xec, 0x86, 0xa3, 0xe3, 0x7e, 0xd8, 0x0f, 0x8f, 0xad, 0xa7, 0x33,
	0xe9, 0x59, 0x66, 0x89, 0x45, 0x71, 0x6e, 0xe3, 0x53, 0x0e, 0x0a, 0x4f, 0x6d, 0x31, 0xba, 0x07,
	0x99, 0xc0, 0x67, 0xc4, 0x25, 0x5e, 0xb9, 0x55, 0x98, 0xcf, 0xea, 0x99, 0xf3, 0x33, 0x9e, 0x09,
	0x7c, 0xba, 0x0b, 0xf9, 0xee, 0x50, 0x68, 0xcd, 0x32, 0x51, 0x88, 0xc7, 0x84, 0xde, 0x87, 0x82,
	0x9e, 0x6a, 0x83, 0x23, 0x96, 0x75, 0x89, 0x57, 0x39, 0xd9, 0x69, 0xae, 0x75, 0xd1, 0xbc, 0xb0,
	0xa1, 0x56, 0xee, 0x7a, 0x56, 0xdf, 0xe0, 0x89, 0x91, 0x3e, 0x86, 0x9a, 0x9e, 0x74, 0x74, 0x57,
	0x05, 0x63, 0x13, 0x84, 0x52, 0xb3, 0x9c, 0x9b, 0xf5, 0xca, 0xad, 0xed, 0xc5, 0xac, 0x9e, 0x0e,
	0xf0, 0x34, 0xa5, 0x07, 0x50, 0x1e, 0x0a, 0x6d, 0xda, 0x1a, 0x51, 0xb2, 0xbc, 0x4b, 0xbc, 0x2c,
	0x2f, 0x45, 0xc2, 0x05, 0xa2, 0xa4, 0x0e, 0x80, 0x8f, 0x0a, 0xfb, 0x81, 0x36, 0xa8, 0x58, 0xc1,
	0x25, 0x5e, 0x89, 0xaf, 0x29, 0xf4, 0x1c, 0x36, 0x97, 0x4c, 0x89, 0xa8, 0x1e, 0x2b, 0xda, 0x86,
	0x0f, 0x52, 0x0d, 0x9f, 0xa5, 0x2c, 0x49, 0xe3, 0xb7, 0x12, 0xe9, 0x21, 0x6c, 0x5f, 0x22, 0x8e,
	0xc5, 0x30, 0xb8, 0xc2, 0xb6, 0x09, 0x46, 0x18, 0x4e, 0x0c, 0x2b, 0xb9, 0xc4, 0xab, 0xf1, 0xad,
	0x55, 0xe0, 0x75, 0xac, 0x53, 0x17, 0x2a, 0x28, 0xaf, 0x02, 0x15, 0xca, 0x11, 0x4a, 0xc3, 0xca,
	0x76, 0x78, 0xeb, 0x12, 0x6d, 0x40, 0x35, 0x54, 0x7d, 0x21, 0x83, 0x8f, 0x71, 0x5f, 0x60, 0x2d,
	0x29, 0x8d, 0x52, 0xc8, 0x4d, 0x34, 0x2a, 0x56, 0xb1, 0x31, 0x8b, 0xe9, 0x23, 0xd8, 0xc1, 0x0f,
	0x06, 0xa5, 0x8f, 0x7e, 0x5b, 0x18, 0xa3, 0x82, 0xce, 0xc4, 0xa0, 0x66, 0x55, 0x97, 0x78, 0xd5,
	0x56, 0x7e, 0x31, 0xab, 0x93, 0x23, 0x4e, 0x97, 0x8e, 0xd3, 0x95, 0x81, 0xee, 0x41, 0x41, 0xa1,
	0x2f, 0xba, 0x86, 0xd5, 0xa2, 0xc1, 0xf3, 0x84, 0x35, 0x7e, 0x11, 0x28, 0xc4, 0x0b, 0xa3, 0xfb,
	0x50, 0x1a, 0x84, 0xda, 0x48, 0x31, 0xc2, 0xf8, 0x12, 0xf8, 0x8a, 0x47, 0xf7, 0x11, 0x26, 0x47,
	0x10, 0xdf, 0xc7, 0xcb, 0x0b, 0x9e, 0x09, 0x75, 0x94, 0x33, 0x1e, 0x0a, 0xd3, 0x0b, 0x55, 0x7c,
	0x0b, 0x65, 0xbe, 0xe2, 0xf4, 0x0e, 0xfc, 0xb3, 0xc4, 0xed, 0x9e, 0x18, 0x05, 0xc3, 0x29, 0xcb,
	0x59, 0xcb, 0xe6, 0x52, 0x7e, 0x66, 0x55, 0x7a, 0x17, 0xb6, 0x56, 0xc6, 0x2b, 0x54, 0x3a, 0x9a,
	0x47, 0xde, 0x3a, 0x57, 0x05, 0xde, 0xc4, 0x32, 0x7d, 0x08, 0x45, 0x89, 0xe6, 0x7d, 0xa8, 0x2e,
	0xed, 0xb6, 0x2b, 0x27, 0xbb, 0xa9, 0x4d, 0xbe, 0x88, 0x63, 0xc9, 0x0a, 0x97, 0xd6, 0x68, 0x90,
	0x42, 0x75, 0x07, 0x76, 0xf9, 0x65, 0x6e, 0x71, 0xe3, 0x1d, 0x14, 0x13, 0x37, 0x7d, 0x05, 0x10,
	0x48, 0x83, 0xaa, 0x27, 0xba, 0xa8, 0x19, 0x71, 0xb3, 0x5e, 0xe5, 0xe4, 0xbf, 0xbf, 0xd5, 0x3d,
	0x5f, 0xba, 0x5a, 0x34, 0x7a, 0x60, 0x31, 0xab, 0xaf, 0x25, 0xf2, 0x35, 0xdc, 0x90, 0xb0, 0x75,
	0x3b, 0x27, 0xea, 0x62, 0x6d, 0xb6, 0x16, 0xd3, 0x7f, 0x21, 0x3b, 0x12, 0xdd, 0x64, 0xb0, 0xc5,
	0xf9, 0xac, 0x9e, 0x7d, 0x7e, 0xfa, 0x84, 0x47, 0x1a, 0x3d, 0x84, 0xb2, 0xf0, 0x7d, 0x85, 0x5a,
	0xa3, 0x66, 0x59, 0xfb, 0x6f, 0xa9, 0x2d, 0x66, 0xf5, 0x1b, 0x91, 0xdf, 0xc0, 0xc6, 0x3d, 0xd8,
	0x4c, 0x5f, 0x31, 0x65, 0x50, 0x1c, 0x08, 0xe9, 0x0f, 0x51, 0x25, 0x0f, 0x2e, 0x69, 0xeb, 0xff,
	0xdf, 0x3f, 0x1c, 0xf2, 0x65, 0xee, 0x90, 0xaf, 0x73, 0x87, 0x5c, 0xcf, 0x1d, 0xf2, 0x6d, 0xee,
	0x90, 0xef, 0x73, 0x87, 0x7c, 0xfe, 0xe9, 0x6c, 0xbc, 0xcd, 0xdb, 0x5f, 0xdc, 0x29, 0xd8, 0x4f,
	0xc4, 0x83, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x10, 0xf5, 0x07, 0xd9, 0x6e, 0x04, 0x00, 0x00,
}
