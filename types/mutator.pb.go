// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mutator.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A Mutator is a mutator specification.
type Mutator struct {
	// Name is the unique identifier for a mutator.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Command is the command to be executed.
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Timeout is the command execution timeout in seconds.
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout"`
	// Env is a list of environment variables to use with command execution
	EnvVars []string `protobuf:"bytes,4,rep,name=env_vars,json=envVars" json:"env_vars"`
	// Environment indicates to which env a mutator belongs to
	Environment string `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
	// Organization specifies the organization to which the mutator belongs.
	Organization string `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (m *Mutator) Reset()                    { *m = Mutator{} }
func (m *Mutator) String() string            { return proto.CompactTextString(m) }
func (*Mutator) ProtoMessage()               {}
func (*Mutator) Descriptor() ([]byte, []int) { return fileDescriptorMutator, []int{0} }

func (m *Mutator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mutator) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Mutator) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Mutator) GetEnvVars() []string {
	if m != nil {
		return m.EnvVars
	}
	return nil
}

func (m *Mutator) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Mutator) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func init() {
	proto.RegisterType((*Mutator)(nil), "sensu.types.Mutator")
}
func (this *Mutator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mutator)
	if !ok {
		that2, ok := that.(Mutator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if len(this.EnvVars) != len(that1.EnvVars) {
		return false
	}
	for i := range this.EnvVars {
		if this.EnvVars[i] != that1.EnvVars[i] {
			return false
		}
	}
	if this.Environment != that1.Environment {
		return false
	}
	if this.Organization != that1.Organization {
		return false
	}
	return true
}
func (m *Mutator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mutator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMutator(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMutator(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMutator(dAtA, i, uint64(m.Timeout))
	}
	if len(m.EnvVars) > 0 {
		for _, s := range m.EnvVars {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMutator(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Organization) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMutator(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	return i, nil
}

func encodeVarintMutator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMutator(r randyMutator, easy bool) *Mutator {
	this := &Mutator{}
	this.Name = string(randStringMutator(r))
	this.Command = string(randStringMutator(r))
	this.Timeout = uint32(r.Uint32())
	v1 := r.Intn(10)
	this.EnvVars = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.EnvVars[i] = string(randStringMutator(r))
	}
	this.Environment = string(randStringMutator(r))
	this.Organization = string(randStringMutator(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMutator interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMutator(r randyMutator) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMutator(r randyMutator) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneMutator(r)
	}
	return string(tmps)
}
func randUnrecognizedMutator(r randyMutator, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMutator(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMutator(dAtA []byte, r randyMutator, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMutator(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMutator(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Mutator) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMutator(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovMutator(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovMutator(uint64(m.Timeout))
	}
	if len(m.EnvVars) > 0 {
		for _, s := range m.EnvVars {
			l = len(s)
			n += 1 + l + sovMutator(uint64(l))
		}
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovMutator(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovMutator(uint64(l))
	}
	return n
}

func sovMutator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMutator(x uint64) (n int) {
	return sovMutator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mutator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMutator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mutator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mutator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvVars = append(m.EnvVars, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMutator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMutator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMutator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMutator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMutator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMutator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMutator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMutator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMutator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMutator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMutator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mutator.proto", fileDescriptorMutator) }

var fileDescriptorMutator = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3d, 0x4e, 0xc3, 0x40,
	0x10, 0x85, 0x19, 0xf2, 0x63, 0xb2, 0x49, 0x9a, 0xad, 0x56, 0x14, 0x1b, 0x2b, 0x08, 0xe1, 0x06,
	0xa7, 0xe0, 0x06, 0xee, 0x69, 0x5c, 0x50, 0xd0, 0xa0, 0x75, 0x58, 0x8c, 0x8b, 0x9d, 0x89, 0xd6,
	0x6b, 0x4b, 0x70, 0x12, 0x8e, 0xc0, 0x11, 0x38, 0x02, 0x0d, 0x12, 0x27, 0x88, 0xc0, 0x74, 0x39,
	0x01, 0x25, 0xd2, 0x44, 0x46, 0xd0, 0xbd, 0xef, 0xd3, 0xdb, 0x1d, 0xcd, 0x88, 0xb9, 0x6b, 0x82,
	0x09, 0xe4, 0xd3, 0x8d, 0xa7, 0x40, 0x72, 0x5a, 0x5b, 0xac, 0x9b, 0x34, 0x3c, 0x6c, 0x6c, 0x7d,
	0x7c, 0x5e, 0x56, 0xe1, 0xbe, 0x29, 0xd2, 0x35, 0xb9, 0x55, 0x49, 0x25, 0xad, 0xb8, 0x53, 0x34,
	0x77, 0x4c, 0x0c, 0x9c, 0xf6, 0x6f, 0x97, 0x6f, 0x20, 0xa2, 0xcb, 0xfd, 0x6f, 0x52, 0x8a, 0x21,
	0x1a, 0x67, 0x15, 0xc4, 0x90, 0x4c, 0x72, 0xce, 0x52, 0x89, 0x68, 0x4d, 0xce, 0x19, 0xbc, 0x55,
	0x87, 0xac, 0x7b, 0x94, 0xa7, 0x22, 0x0a, 0x95, 0xb3, 0xd4, 0x04, 0x35, 0x88, 0x21, 0x99, 0x67,
	0xd3, 0xdd, 0x76, 0xd1, 0xab, 0xbc, 0x0f, 0xf2, 0x4c, 0x1c, 0x59, 0x6c, 0x6f, 0x5a, 0xe3, 0x6b,
	0x35, 0x8c, 0x07, 0xc9, 0x24, 0x9b, 0xed, 0xb6, 0x8b, 0x5f, 0x97, 0x47, 0x16, 0xdb, 0x2b, 0xe3,
	0x6b, 0x19, 0x8b, 0xa9, 0xc5, 0xb6, 0xf2, 0x84, 0xce, 0x62, 0x50, 0x23, 0x9e, 0xf6, 0x57, 0xc9,
	0xa5, 0x98, 0x91, 0x2f, 0x0d, 0x56, 0x8f, 0x26, 0x54, 0x84, 0x6a, 0xcc, 0x95, 0x7f, 0x2e, 0x3b,
	0xf9, 0xfe, 0xd4, 0xf0, 0xdc, 0x69, 0x78, 0xe9, 0x34, 0xbc, 0x76, 0x1a, 0xde, 0x3b, 0x0d, 0x1f,
	0x9d, 0x86, 0xa7, 0x2f, 0x7d, 0x70, 0x3d, 0xe2, 0x1b, 0x15, 0x63, 0xde, 0xfd, 0xe2, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xc4, 0x24, 0x93, 0x46, 0x48, 0x01, 0x00, 0x00,
}
