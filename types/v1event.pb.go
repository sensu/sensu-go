// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1event.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A EventV1 is an event specification compatible with Sensu 1.x
type EventV1 struct {
	// Id is the unique ID for the event.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp is the time in seconds since the Epoch.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Action is the Sensu event action (create, resolve, or flapping).
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// Occurrences is the occurrence count for the event.
	Occurences int64 `protobuf:"varint,4,opt,name=occurences,proto3" json:"occurences,omitempty"`
	// Occurrences Watermark is the high water mark tracking number of occurrences.
	OccurencesWatermark int64 `protobuf:"varint,5,opt,name=occurences_watermark,json=occurencesWatermark,proto3" json:"occurences_watermark,omitempty"`
	// Check is the check result check ExtendedAttributes
	Check CheckV1 `protobuf:"bytes,6,opt,name=check" json:"check"`
	// Client is the client attributes from the client.
	Client *Client `protobuf:"bytes,7,opt,name=client" json:"client,omitempty"`
	// Silenced is a list of silenced entry ids (subscription and check name)
	Silenced []string `protobuf:"bytes,8,rep,name=silenced" json:"silenced,omitempty"`
}

func (m *EventV1) Reset()                    { *m = EventV1{} }
func (m *EventV1) String() string            { return proto.CompactTextString(m) }
func (*EventV1) ProtoMessage()               {}
func (*EventV1) Descriptor() ([]byte, []int) { return fileDescriptorV1Event, []int{0} }

func (m *EventV1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventV1) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EventV1) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EventV1) GetOccurences() int64 {
	if m != nil {
		return m.Occurences
	}
	return 0
}

func (m *EventV1) GetOccurencesWatermark() int64 {
	if m != nil {
		return m.OccurencesWatermark
	}
	return 0
}

func (m *EventV1) GetCheck() CheckV1 {
	if m != nil {
		return m.Check
	}
	return CheckV1{}
}

func (m *EventV1) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *EventV1) GetSilenced() []string {
	if m != nil {
		return m.Silenced
	}
	return nil
}

// A Client is a client specification compatible with Sensu 1.x (2.x entity)
type Client struct {
	// Name is the name of the Sensu client the event is associated with.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address is the address of the Sensu client the event is associated with.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Subscriptions is the list of subscriptions that a client belongs.
	Subscriptions []string `protobuf:"bytes,3,rep,name=subscriptions" json:"subscriptions,omitempty"`
	// Timestamp is the last keepalive timestamp in epoch time.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptorV1Event, []int{1} }

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Client) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Client) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*EventV1)(nil), "sensu.types.EventV1")
	proto.RegisterType((*Client)(nil), "sensu.types.Client")
}
func (this *EventV1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventV1)
	if !ok {
		that2, ok := that.(EventV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Occurences != that1.Occurences {
		return false
	}
	if this.OccurencesWatermark != that1.OccurencesWatermark {
		return false
	}
	if !this.Check.Equal(&that1.Check) {
		return false
	}
	if !this.Client.Equal(that1.Client) {
		return false
	}
	if len(this.Silenced) != len(that1.Silenced) {
		return false
	}
	for i := range this.Silenced {
		if this.Silenced[i] != that1.Silenced[i] {
			return false
		}
	}
	return true
}
func (this *Client) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Client)
	if !ok {
		that2, ok := that.(Client)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.Subscriptions) != len(that1.Subscriptions) {
		return false
	}
	for i := range this.Subscriptions {
		if this.Subscriptions[i] != that1.Subscriptions[i] {
			return false
		}
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (m *EventV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventV1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Occurences != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(m.Occurences))
	}
	if m.OccurencesWatermark != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(m.OccurencesWatermark))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintV1Event(dAtA, i, uint64(m.Check.Size()))
	n1, err := m.Check.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Client != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(m.Client.Size()))
		n2, err := m.Client.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Silenced) > 0 {
		for _, s := range m.Silenced {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintV1Event(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func encodeVarintV1Event(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEventV1(r randyV1Event, easy bool) *EventV1 {
	this := &EventV1{}
	this.Id = string(randStringV1Event(r))
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Action = string(randStringV1Event(r))
	this.Occurences = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Occurences *= -1
	}
	this.OccurencesWatermark = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.OccurencesWatermark *= -1
	}
	v1 := NewPopulatedCheckV1(r, easy)
	this.Check = *v1
	if r.Intn(10) != 0 {
		this.Client = NewPopulatedClient(r, easy)
	}
	v2 := r.Intn(10)
	this.Silenced = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.Silenced[i] = string(randStringV1Event(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClient(r randyV1Event, easy bool) *Client {
	this := &Client{}
	this.Name = string(randStringV1Event(r))
	this.Address = string(randStringV1Event(r))
	v3 := r.Intn(10)
	this.Subscriptions = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Subscriptions[i] = string(randStringV1Event(r))
	}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyV1Event interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneV1Event(r randyV1Event) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringV1Event(r randyV1Event) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneV1Event(r)
	}
	return string(tmps)
}
func randUnrecognizedV1Event(r randyV1Event, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldV1Event(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldV1Event(dAtA []byte, r randyV1Event, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateV1Event(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateV1Event(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateV1Event(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateV1Event(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateV1Event(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateV1Event(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateV1Event(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *EventV1) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovV1Event(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovV1Event(uint64(m.Timestamp))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovV1Event(uint64(l))
	}
	if m.Occurences != 0 {
		n += 1 + sovV1Event(uint64(m.Occurences))
	}
	if m.OccurencesWatermark != 0 {
		n += 1 + sovV1Event(uint64(m.OccurencesWatermark))
	}
	l = m.Check.Size()
	n += 1 + l + sovV1Event(uint64(l))
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovV1Event(uint64(l))
	}
	if len(m.Silenced) > 0 {
		for _, s := range m.Silenced {
			l = len(s)
			n += 1 + l + sovV1Event(uint64(l))
		}
	}
	return n
}

func (m *Client) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovV1Event(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovV1Event(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			l = len(s)
			n += 1 + l + sovV1Event(uint64(l))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovV1Event(uint64(m.Timestamp))
	}
	return n
}

func sovV1Event(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozV1Event(x uint64) (n int) {
	return sovV1Event(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1Event
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occurences", wireType)
			}
			m.Occurences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Occurences |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccurencesWatermark", wireType)
			}
			m.OccurencesWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OccurencesWatermark |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Check.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Silenced = append(m.Silenced, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1Event(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1Event
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1Event
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1Event
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipV1Event(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1Event
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipV1Event(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowV1Event
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1Event
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthV1Event
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowV1Event
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipV1Event(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthV1Event = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowV1Event   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1event.proto", fileDescriptorV1Event) }

var fileDescriptorV1Event = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4e, 0xe3, 0x30,
	0x18, 0xc5, 0xeb, 0x24, 0x4d, 0x1b, 0x57, 0x9d, 0x85, 0x5b, 0x8d, 0xac, 0x6a, 0xe4, 0x89, 0xca,
	0x26, 0x42, 0x22, 0x25, 0x70, 0x83, 0x22, 0x2e, 0x90, 0x45, 0x91, 0xd8, 0xa0, 0xc4, 0x31, 0xad,
	0xd5, 0xe6, 0x8f, 0x62, 0xa7, 0x88, 0x1d, 0xc7, 0xe0, 0x08, 0x70, 0x03, 0x8e, 0xd0, 0x25, 0x27,
	0x40, 0x10, 0x2e, 0xc1, 0x12, 0xc5, 0x49, 0x69, 0xcb, 0xce, 0xef, 0x7b, 0xef, 0xe7, 0xe4, 0x7b,
	0x86, 0xfd, 0xb5, 0xc7, 0xd6, 0x2c, 0x91, 0x6e, 0x96, 0xa7, 0x32, 0x45, 0x3d, 0xc1, 0x12, 0x51,
	0xb8, 0xf2, 0x3e, 0x63, 0x62, 0x74, 0x32, 0xe7, 0x72, 0x51, 0x84, 0x2e, 0x4d, 0xe3, 0xc9, 0x3c,
	0x9d, 0xa7, 0x13, 0x95, 0x09, 0x8b, 0x5b, 0xa5, 0x94, 0x50, 0xa7, 0x9a, 0x1d, 0xf5, 0xd7, 0x1e,
	0x5d, 0x30, 0xba, 0xac, 0xe5, 0xf8, 0x59, 0x83, 0x9d, 0xcb, 0xea, 0xea, 0x99, 0x87, 0xfe, 0x40,
	0x8d, 0x47, 0x18, 0xd8, 0xc0, 0xb1, 0x7c, 0x8d, 0x47, 0xe8, 0x1f, 0xb4, 0x24, 0x8f, 0x99, 0x90,
	0x41, 0x9c, 0x61, 0xcd, 0x06, 0x8e, 0xee, 0xef, 0x06, 0xe8, 0x2f, 0x34, 0x03, 0x2a, 0x79, 0x9a,
	0x60, 0x5d, 0x11, 0x8d, 0x42, 0x04, 0xc2, 0x94, 0xd2, 0x22, 0x67, 0x09, 0x65, 0x02, 0x1b, 0x0a,
	0xdb, 0x9b, 0x20, 0x0f, 0x0e, 0x77, 0xea, 0xe6, 0x2e, 0x90, 0x2c, 0x8f, 0x83, 0x7c, 0x89, 0xdb,
	0x2a, 0x39, 0xd8, 0x79, 0x57, 0x5b, 0x0b, 0x9d, 0xc2, 0xb6, 0xfa, 0x67, 0x6c, 0xda, 0xc0, 0xe9,
	0x9d, 0x0d, 0xdd, 0xbd, 0xfd, 0xdd, 0x8b, 0xca, 0x99, 0x79, 0x53, 0x63, 0xf3, 0xf6, 0xbf, 0xe5,
	0xd7, 0x41, 0xe4, 0x41, 0x93, 0xae, 0x38, 0x4b, 0x24, 0xee, 0x28, 0x64, 0x70, 0x88, 0x28, 0x4b,
	0x11, 0xc0, 0x6f, 0x82, 0xc8, 0x86, 0x5d, 0xc1, 0x57, 0xd5, 0x97, 0x23, 0xdc, 0xb5, 0x75, 0xc7,
	0x6a, 0xfc, 0x9f, 0xe9, 0xf8, 0x01, 0x40, 0xb3, 0x46, 0x11, 0x82, 0x46, 0x12, 0xc4, 0xac, 0x29,
	0x4b, 0x9d, 0x11, 0x86, 0x9d, 0x20, 0x8a, 0x72, 0x26, 0x84, 0x2a, 0xcb, 0xf2, 0xb7, 0x12, 0x1d,
	0xc3, 0xbe, 0x28, 0x42, 0x41, 0x73, 0x9e, 0x55, 0x15, 0x09, 0xac, 0xef, 0xdd, 0x7f, 0x68, 0x1d,
	0x96, 0x6e, 0xfc, 0x2a, 0x7d, 0x7a, 0xf4, 0xf5, 0x41, 0xc0, 0x53, 0x49, 0xc0, 0x4b, 0x49, 0xc0,
	0xa6, 0x24, 0xe0, 0xb5, 0x24, 0xe0, 0xbd, 0x24, 0xe0, 0xf1, 0x93, 0xb4, 0xae, 0xdb, 0x6a, 0xbd,
	0xd0, 0x54, 0x4f, 0x7b, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xcf, 0x79, 0x32, 0x36, 0x02,
	0x00, 0x00,
}
