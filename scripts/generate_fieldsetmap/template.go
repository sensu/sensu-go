package main

import (
	"io"
	"text/template"
)

type tmplData struct {
	PackageName string
	ApiVersion  string
	Fieldsets   []fieldsetDesc
}

var tmpl = `
// Code generated by generate_fieldsetmap. DO NOT EDIT.

package {{ .PackageName }}

import (
	types "github.com/sensu/sensu-go/types"
	corev2 "github.com/sensu/sensu-go/api/core/v2"
)

// LookupFieldsetFn is used to dynamically look up fieldset func for given typename
func LookupFieldsetFn(typename string) (corev2.FieldsetFn, bool) {
	fset, ok := fieldsetFnMap[typename]
	return fset, ok
}

type fieldsetFnDesc struct {
    prefix string
    fields func(_ corev2.Resource) map[string]string
}

func (f *fieldsetFnDesc) Prefix() string {
    return f.prefix
}

func (f *fieldsetFnDesc) Fields(v corev2.Resource) map[string]string {
    return f.fields(v)
}

// fieldsetFnMap is used to dynamically look up fieldset func for given type
var fieldsetFnMap = map[string]corev2.FieldsetFn{ {{ range $index, $field := .Fieldsets }}
	"{{ $field.Kind }}": &fieldsetFnDesc{
		prefix: "{{ $field.Prefix }}",
		fields:  {{ $field.Name }},
	},
	{{ end }}
}

func init() {
	types.RegisterFieldsetFn("{{ .ApiVersion }}", LookupFieldsetFn)
}
`

func executeTemplate(wr io.Writer, data tmplData) error {
	t, err := template.New("fieldset").Parse(tmpl)
	if err != nil {
		return err
	}
	return t.Execute(wr, data)
}
