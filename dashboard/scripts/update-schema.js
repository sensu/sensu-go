/**
 * Generates an updated copy of the combined server and client GraphQL SDL
 * document used by Apollo and ESLint configuration.
 */

import { resolve, relative } from "path";
import { sync as globSync } from "glob";
import { writeFileSync, readFileSync } from "fs";
import { printSchema, buildASTSchema, extendSchema, parse } from "graphql";
import chalk from "chalk";

const serverSchemaPath = resolve("../backend/apid/graphql/schema/*.graphql");
const clientSchemaPath = resolve("src/schema/client.graphql");
const combinedFilePath = resolve("src/schema/combined.graphql");

// Support legacy SDL spec; graphl-go support pending.
// https://github.com/graphql/graphql-js/blob/v0.13.0/src/language/parser.js#L89-L97
const parserOpts = { allowLegacySDLImplementsInterfaces: true };

const combinedFileIntro = `
# Code generated by 'yarn update-schema'. DO NOT EDIT.

#
# The following represents the Sensu server and client extensions combined in a
# single document.
#

`;

// Read server schema files
const serverSchemaFilePaths = globSync(serverSchemaPath);
let rawServerSchema = serverSchemaFilePaths.reduce(
  (acc, f) => acc + readFileSync(f, {}),
  "",
);

//
// NOTE:
//
// DateTime is defined by the graphql-go package and since we are not
// pulling the schema down from a running instance of the backend we
// must define it manually.
//
// Ideally the server's schema defines the scalar itself, however, the code
// generator does not support ignoring a type at this moment.
//
rawServerSchema += `
"""
The DateTime scalar type represents a DateTime.
The DateTime is serialized as an RFC 3339 quoted string.
"""
scalar DateTime
`;

// Parsing the schema drops any unknown directives, making it an easy way to
// strip any server specific directives. Only `@deprecated` directives will
// remain.
const serverSchema = buildASTSchema(parse(rawServerSchema, parserOpts));

// Read client schema
const rawClientSchema = readFileSync(clientSchemaPath, {});
const parsedClientSchema = parse(rawClientSchema.toString());

// Stitch server & client extensions
const combinedSchema = extendSchema(serverSchema, parsedClientSchema);
const rawCombinedSchema = printSchema(combinedSchema);

// Write combined schema
const combinedSchemaDocument = combinedFileIntro + rawCombinedSchema;
writeFileSync(combinedFilePath, combinedSchemaDocument, { mode: 644 });

// Party time!
console.info(
  "✍️   Wrote combined schema to",
  `${chalk.bold(relative(process.cwd(), combinedFilePath))}.`,
);
