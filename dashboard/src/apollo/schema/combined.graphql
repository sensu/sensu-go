
# Code generated by 'yarn update-schema'. DO NOT EDIT.

#
# The following represents the Sensu server and client extensions combined in a
# single document.
#

"""
If present signifies that the field is only present on the client. Directive is
used by apollo-state-link to catch fields it is responsible for resolving.

More: https://www.apollographql.com/docs/link/links/state.html#directive
"""
directive @client on FIELD

"""
TODO
https://www.apollographql.com/docs/react/features/pagination.html#connection-directive
"""
directive @connection(key: String!, filter: [String!]) on FIELD

"""
Asset defines an archive, an agent will install as a dependency for a check.
"""
type Asset implements Node & Namespaced & HasMetadata {
  """The globally unique identifier of the record"""
  id: ID!

  """Namespace in which this record resides"""
  namespace: String!

  """Name is the unique identifier for an asset"""
  name: String

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """URL is the location of the asset"""
  url: String

  """Sha512 is the SHA-512 checksum of the asset"""
  sha512: String

  """
  Filters are a collection of sensu queries, used by the system to determine
  if the asset should be installed. If more than one filter is present the
  queries are joined by the "AND" operator.
  """
  filters: [String]
}

type Auth {
  """
  Indicates that the current access token has been rejected by the API and
  cannot be automatically refreshed. The user must re-authenticate to continue.
  """
  invalid: Boolean!

  """Token used to access the system."""
  accessToken: String

  """
  Long lived token that can be used to obtain a new access token after it has expired.
  """
  refreshToken: String

  """Time at which the access token will expire."""
  expiresAt: DateTime
}

"""
A Check is a check specification and optionally the results of the check's
execution.
"""
type Check implements Silenceable & HasMetadata {
  """id of the check's configuration"""
  nodeId: ID!

  """name is the unique identifier for a check"""
  name: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """command is the command to be executed."""
  command: String!

  """CheckHooks is the list of check hooks for the check"""
  checkHooks: [HookList!]!

  """
  envVars is the list of environment variables to set for the check's
  execution environment.
  """
  envVars: [String!]!

  """ExtendedAttributes store serialized arbitrary JSON-encoded data"""
  extendedAttributes: JSON!

  """
  handlers are the event handler for the check (incidents and/or metrics).
  """
  handlers: [Handler]!

  """
  HighFlapThreshold is the flap detection high threshold (% state change) for
  the check. Sensu uses the same flap detection algorithm as Nagios.
  """
  highFlapThreshold: Int

  """
  Interval is the interval, in seconds, at which the check should be run.
  """
  interval: Int!

  """Cron is the cron string at which the check should be run."""
  cron: String

  """
  LowFlapThreshold is the flap detection low threshold (% state change) for
  the check. Sensu uses the same flap detection algorithm as Nagios.
  """
  lowFlapThreshold: Int

  """
  OutputOutputMetricFormat is the metric protocol that the check's output will be
  expected to follow in order to be extracted.
  """
  outputMetricFormat: String

  """
  OutputOutputMetricHandlers is the list of event handlers that will respond to metrics
  that have been extracted from the check.
  """
  outputMetricHandlers: [Handler]!

  """
  proxyEntityName indicates the name of the entity representing an external resource
  """
  proxyEntityName: String

  """proxyRequests represents a request to execute a proxy check."""
  proxyRequests: ProxyRequests

  """Publish indicates if check requests are published for the check"""
  publish: Boolean!

  """RuntimeAssets are a list of assets required to execute check."""
  runtimeAssets: [Asset]!

  """RoundRobin enables round-robin scheduling if set true."""
  roundRobin: Boolean!

  """Subscriptions is the list of subscribers for the check."""
  subscriptions: [String]!

  """
  STDIN indicates if the check command accepts JSON via stdin from the agent
  """
  stdin: Boolean!

  """
  Subdue represents one or more time windows when the check should be subdued.
  """
  subdue: TimeWindowWhen

  """Duration of execution"""
  duration: Float

  """Executed describes the time in which the check request was executed"""
  executed: DateTime!

  """History is the check state history."""
  history(first: Int = 21): [CheckHistory]!

  """Issued describes the time in which the check request was issued"""
  issued: DateTime!

  """Output from the execution of Command"""
  output: String!

  """State provides handlers with more information about the state change"""
  state: String!

  """Status is the exit status code produced by the check"""
  status: Uint!

  """
  TotalStateChange indicates the total state change percentage for the
  check's history
  """
  totalStateChange: Int

  """
  Hooks describes the results of multiple hooks; if event is associated to hook
  execution.
  """
  hooks: [Hook]

  """
  Silenced is a list of silenced entry ids (subscription and check name)
  """
  silenced: [String]!

  """
  isSilenced return true if the entity has any silences associated with it.
  """
  isSilenced: Boolean!

  """
  All silences matching the entity's subscriptions and where the silence
  matches all checks.
  """
  silences: [Silenced!]!

  """LastOK displays last time this check's status was set to zero."""
  lastOK: DateTime

  """
  Occurrences indicates the number of times an event has occurred for a
  client/check pair with the same check status.
  """
  occurrences: Int!

  """
  OccurrencesWatermark indicates the high water mark tracking number of
  occurrences at the current severity.
  """
  occurrencesWatermark: Int!

  """Timeout is the timeout, in seconds, at which the check has to run."""
  timeout: Int!

  """
  TTL represents the length of time in seconds for which a check result is valid.
  """
  ttl: Int!
}

"""CheckConfig is the specification of a check."""
type CheckConfig implements Node & Namespaced & Silenceable & HasMetadata {
  """The globally unique identifier of the check."""
  id: ID!

  """namespace in which this check resides"""
  namespace: String!

  """name is the unique identifier for a check"""
  name: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """command is the command to be executed."""
  command: String!

  """CheckHooks is the configured list of check hooks for the check"""
  checkHooks: [HookList!]!

  """Cron is the cron string at which the check should be run."""
  cron: String

  """
  EnvVars is the list of environment variables to set for the check's
  execution environment.
  """
  envVars: [String!]!

  """ExtendedAttributes store serialized arbitrary JSON-encoded data"""
  extendedAttributes: JSON!

  """
  handlers are the event handler for the check (incidents and/or metrics).
  """
  handlers: [Handler]!

  """
  HighFlapThreshold is the flap detection high threshold (% state change) for
  the check. Sensu uses the same flap detection algorithm as Nagios.
  """
  highFlapThreshold: Int

  """
  Interval is the interval, in seconds, at which the check should be run.
  """
  interval: Int!

  """
  LowFlapThreshold is the flap detection low threshold (% state change) for
  the check. Sensu uses the same flap detection algorithm as Nagios.
  """
  lowFlapThreshold: Int

  """
  OutputOutputMetricFormat is the metric protocol that the check's output will be
  expected to follow in order to be extracted.
  """
  outputMetricFormat: String

  """
  OutputOutputMetricHandlers is the list of event handlers that will respond to metrics
  that have been extracted from the check.
  """
  outputMetricHandlers: [Handler]!

  """
  proxyEntityName indicates the name of the entity representing an external resource
  """
  proxyEntityName: String

  """proxyRequests represents a request to execute a proxy check."""
  proxyRequests: ProxyRequests

  """Publish indicates if check requests are published for the check"""
  publish: Boolean!

  """RuntimeAssets are a list of assets required to execute check."""
  runtimeAssets: [Asset]!

  """RoundRobin enables round-robin scheduling if set true."""
  roundRobin: Boolean!

  """
  isSilenced return true if the entity has any silences associated with it.
  """
  isSilenced: Boolean!

  """
  All silences matching the entity's subscriptions and where the silence
  matches all checks.
  """
  silences: [Silenced!]!

  """
  STDIN indicates if the check command accepts JSON via stdin from the agent
  """
  stdin: Boolean!

  """
  Subdue represents one or more time windows when the check should be subdued.
  """
  subdue: TimeWindowWhen

  """Subscriptions is the list of subscribers for the check."""
  subscriptions: [String]!

  """Timeout is the timeout, in seconds, at which the check has to run."""
  timeout: Int!

  """
  TTL represents the length of time in seconds for which a check result is valid.
  """
  ttl: Int!

  """
  toJSON returns a REST API compatible representation of the resource. Handy for
  sharing snippets that can then be imported with `sensuctl import`.
  """
  toJSON: JSON!

  """Describes whether the check has been deleted from the system"""
  deleted: Boolean!
}

"""A connection to a sequence of records."""
type CheckConfigConnection {
  nodes: [CheckConfig!]!
  pageInfo: OffsetPageInfo!
}

"""An edge in a connection."""
type CheckConfigEdge {
  node: CheckConfig
  cursor: String!
}

input CheckConfigInputs {
  """command to run."""
  command: String

  """
  interval is the time interval, in seconds, in which the check should be run.
  """
  interval: Int

  """
  lowFlapThreshold is the flap detection low threshold (% state change) for
  the check. Sensu uses the same flap detection algorithm as Nagios.
  """
  lowFlapThreshold: Int

  """
  highFlapThreshold is the flap detection high threshold (% state change) for
  the check. Sensu uses the same flap detection algorithm as Nagios.
  """
  highFlapThreshold: Int

  """subscriptions refers to the list of subscribers for the check."""
  subscriptions: [String!]

  """
  handlers are the event handler for the check (incidents and/or metrics).
  """
  handlers: [String!]

  """publish indicates if check requests are published for the check"""
  publish: Boolean

  """
  Provide a list of valid assets that are required to execute the check.
  """
  assets: [String!]
}

"""CheckHistory is a record of a check execution and its status"""
type CheckHistory {
  """Status is the exit status code produced by the check."""
  status: Uint!

  """Executed describes the time in which the check request was executed"""
  executed: DateTime!
}

"""Describes ways in which a list of checks can be ordered."""
enum CheckListOrder {
  NAME
  NAME_DESC
}

"""ClusterRole applies to all namespaces within a cluster."""
type ClusterRole {
  rules: [Rule!]

  """Name of the ClusterRole"""
  name: String!
}

"""
ClusterRoleBinding grants the permissions defined in a ClusterRole referenced
to a user or a set of users
"""
type ClusterRoleBinding {
  """Subjects holds references to the objects the ClusterRole applies to"""
  subjects: [Subject!]

  """RoleRef references a ClusterRole in the current namespace"""
  roleRef: RoleRef

  """Name of the ClusterRoleBinding"""
  name: String!
}

input CreateCheckInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """namespace the resulting resource will belong to."""
  namespace: String = "default"

  """name of the resulting check."""
  name: String!

  """properties of the check"""
  props: CheckConfigInputs!
}

type CreateCheckPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created check."""
  check: CheckConfig!
}

input CreateSilenceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """namespace the resulting resource will belong to."""
  namespace: String = "default"

  """check associated with the silenced entry; optional."""
  check: String

  """subscription associated with the silenced entry; optional."""
  subscription: String

  """properties of the silence"""
  props: SilenceInputs!
}

type CreateSilencePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created silence."""
  silence: Silenced!
}

"""
The DateTime scalar type represents a DateTime.
The DateTime is serialized as an RFC 3339 quoted string.
"""
scalar DateTime

"""Generic input used when deleting records."""
input DeleteRecordInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Global ID of the check to update."""
  id: ID!
}

"""Generic container for deleted record payload."""
type DeleteRecordPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """ID of the deleted resource"""
  deletedId: ID!
}

"""
Deregistration contains configuration for Sensu entity de-registration.
"""
type Deregistration {
  handler: String!
}

"""
Entity is the Entity supplying the event. The default Entity for any
Event is the running Agent process--if the Event is sent by an Agent.
"""
type Entity implements Node & Namespaced & Silenceable & HasMetadata {
  """The globally unique identifier of the record"""
  id: ID!

  """Namespace in which this record resides"""
  namespace: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """unique identifier for the entity"""
  name: String!
  entityClass: String!
  system: System!
  subscriptions: [String!]
  lastSeen: DateTime
  deregister: Boolean!
  deregistration: Deregistration!
  user: String!

  """Redact contains the fields to redact on the agent."""
  redact: [String!]!

  """
  Status represents the MAX status of all events associated with the entity. If
  no events are present value is 0.
  """
  status: Uint!

  """
  Related returns a sorted list of like entities from the same environment.
  """
  related(limit: Int = 10): [Entity]!

  """All events associated with the entity."""
  events(orderBy: EventsListOrder = SEVERITY): [Event!]!

  """
  isSilenced return true if the entity has any silences associated with it.
  """
  isSilenced: Boolean!

  """
  All silences matching the entity's subscriptions and where the silence
  matches all checks.
  """
  silences: [Silenced!]!

  """Extended attributes includes arbitrary user-defined data"""
  extendedAttributes: JSON!

  """Describes whether the entity has been deleted from the system"""
  deleted: Boolean!
}

"""A connection to a sequence of records."""
type EntityConnection {
  nodes: [Entity!]!
  pageInfo: OffsetPageInfo!
}

"""Describes ways in which a list of entities can be ordered."""
enum EntityListOrder {
  ID
  ID_DESC
  LASTSEEN
}

"""A terse description of an error."""
enum ErrCode {
  """
  Indicates that some unrecoverable error occurred during execution of the
  operation.
  """
  ERR_INTERNAL

  """
  Indicates that the record associated with the given field could not be found.
  """
  ERR_NOT_FOUND

  """
  Indicates that a record already exists and the operation could not be
  completed.
  """
  ERR_ALREADY_EXISTS

  """
  Operation was canceled because the authorization token did not have sufficient
  permissions.
  """
  ERR_PERMISSION_DENIED
}

"""
Error describes a failed pre-condition or unexpected problem that occurred while
processing the operation.
"""
interface Error {
  """The field associated with the error."""
  input: String

  """A code concisely describing the error."""
  code: ErrCode!
}

"""
An Event is the encapsulating type sent across the Sensu websocket transport.
"""
type Event implements Node & Namespaced & Silenceable & HasMetadata {
  """The globally unique identifier of the record."""
  id: ID!

  """namespace in which this record resides"""
  namespace: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """Timestamp is the time in seconds since the Epoch."""
  timestamp: DateTime!

  """Entity describes the entity in which the event occurred."""
  entity: Entity

  """
  Check describes the result of a check; if event is associated to check
  execution.
  """
  check: Check

  """
  Hooks describes the results of multiple hooks; if event is associated to hook
  execution.
  """
  hooks: [Hook!]

  """isIncident determines if an event indicates an incident."""
  isIncident: Boolean!

  """
  isNewIncident returns true if the event is an incident but it's previous
  iteration was OK.
  """
  isNewIncident: Boolean!

  """
  isResolution returns true if an event has just transitions from an incident.
  """
  isResolution: Boolean!

  """
  wasSilenced reflects whether the event was silenced when passing through the pipeline.
  """
  wasSilenced: Boolean!

  """isSilenced determines if an event has any silenced entries."""
  isSilenced: Boolean!

  """all current silences matching the check and entity's subscriptions."""
  silences: [Silenced!]!

  """Describes whether the event has been deleted from the system"""
  deleted: Boolean!
}

"""A connection to a sequence of records."""
type EventConnection {
  nodes: [Event!]!
  pageInfo: OffsetPageInfo!
}

"""Describes ways in which a list of events can be ordered."""
enum EventsListOrder {
  LASTOK
  NEWEST
  OLDEST
  SEVERITY
}

input ExecuteCheckInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Global ID of the check to update."""
  id: ID!

  """Subscriptions is an optional list of subscriptions to target."""
  subscriptions: [String!] = []

  """Reason is used to provide context to the adho request."""
  reason: String = ""
}

type ExecuteCheckPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  Includes any failed preconditions or unrecoverable errors that occurred while
  executing the mutation.
  """
  errors: [Error!]!
}

"""A Handler is a handler specification."""
type Handler implements Node & Namespaced & HasMetadata {
  """The globally unique identifier of the record."""
  id: ID!

  """namespace in which this record resides"""
  namespace: String!

  """Name is the unique identifier for a handler."""
  name: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """Type is the handler type, i.e. pipe."""
  type: String!

  """Command is the command to be executed for a pipe handler."""
  command: String

  """Timeout is the handler timeout in seconds."""
  timeout: Int

  """Socket contains configuration for a TCP or UDP handler."""
  socket: HandlerSocket

  """Mutator is the handler event data mutator."""
  mutator: Mutator

  """Handlers is a list of handler names for a handler set."""
  handlers: [Handler!]

  """
  Filters is a list of filters name to evaluate before executing this handler
  """
  filters: [String!]!

  """
  EnvVars is a list of environment variables to use with command execution
  """
  envVars: [String!]!
}

"""HandlerSocket contains configuration for a TCP or UDP handler."""
type HandlerSocket {
  """Host is the socket peer address."""
  host: String!

  """Port is the socket peer port."""
  port: Int
}

"""HasMetadata describes objects that have metadata."""
interface HasMetadata {
  metadata: ObjectMeta!
}

"""
A Hook is a hook specification and optionally the results of the hook's
execution.
"""
type Hook {
  """Config is the specification of a hook"""
  config: HookConfig

  """Duration of execution"""
  duration: Int

  """Executed describes the time in which the hook request was executed"""
  executed: Int

  """Issued describes the time in which the hook request was issued"""
  issued: Int

  """Output from the execution of Command"""
  output: String

  """Status is the exit status code produced by the hook"""
  status: Int
}

"""HookConfig is the specification of a hook"""
type HookConfig implements Node & Namespaced & HasMetadata {
  """The globally unique identifier of the record"""
  id: ID!

  """Namespace in which this record resides"""
  namespace: String!

  """Name is the unique identifier for a hook"""
  name: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """Command is the command to be executed"""
  command: String

  """Timeout is the timeout, in seconds, at which the hook has to run"""
  timeout: Int

  """Stdin indicates if hook requests have stdin enabled"""
  stdin: Boolean!
}

type HookList {
  """Hooks is the list of hooks for the check hook"""
  hooks: [String!]!

  """Type indicates the type or response code for the check hook"""
  type: String!
}

"""
Describes a graphical element that can be used to distinguish a resource.
"""
enum Icon {
  BRIEFCASE
  DONUT
  EMOTICON
  ESPRESSO
  EXPLORE
  FIRE
  HALFHEART
  HEART
  MUG
  POLYGON
  VISIBILITY
}

"""
The JSON type describes any arbitrary JSON compatible data.

- Roughly equilevant to `union JSON = Int | Float | String | Boolean` however
  can also be a map or list of arbitrary length.
- Despite looking like an an object it's fields **cannot** be selected.
"""
scalar JSON

"""
The KVPairString type respresents a name-value relationship where the value is
always a string.
"""
type KVPairString {
  key: String!
  val: String!
}

type LocalNetwork {
  """The current online state of the client."""
  offline: Boolean!

  """If the client is offline and trying to retry the connection."""
  retry: Boolean!
}

"""The root query for implementing GraphQL mutations."""
type Mutation {
  """Creates a new check."""
  createCheck(input: CreateCheckInput!): CreateCheckPayload

  """Updates given check."""
  updateCheck(input: UpdateCheckInput!): UpdateCheckPayload

  """Updates given check."""
  executeCheck(input: ExecuteCheckInput!): ExecuteCheckPayload

  """Removes given check."""
  deleteCheck(input: DeleteRecordInput!): DeleteRecordPayload

  """Removes a given entity."""
  deleteEntity(input: DeleteRecordInput!): DeleteRecordPayload

  """Resolves an event."""
  resolveEvent(input: ResolveEventInput!): ResolveEventPayload

  """Deletes an event."""
  deleteEvent(input: DeleteRecordInput!): DeleteRecordPayload

  """Creates a silence."""
  createSilence(input: CreateSilenceInput!): CreateSilencePayload

  """Removes given silence."""
  deleteSilence(input: DeleteRecordInput!): DeleteRecordPayload

  """Create new authorization tokens."""
  createTokens(username: String!, password: String!): Boolean

  """Create new authorization tokens using refresh token."""
  refreshTokens(notBefore: DateTime): RefreshTokensPayload!

  """Invalidates authorization tokens."""
  invalidateTokens: Boolean

  """Flags authorization tokens as invalid."""
  flagTokens: Boolean

  """Stores given pair as user's last visited namespace."""
  setLastNamespace(name: String!): Boolean

  """Flag to allow us to retry a connection"""
  retryLocalNetwork: Boolean

  """Flags the client as being offline or online"""
  setLocalNetworkOffline(offline: Boolean!): Boolean
}

"""A Mutator is a mutator specification."""
type Mutator implements Node & Namespaced & HasMetadata {
  """The globally unique identifier of the record"""
  id: ID!

  """Namespace in which this record resides"""
  namespace: String!

  """Name is the unique identifier for a mutator."""
  name: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """Command is the command to be executed."""
  command: String!

  """Timeout is the command execution timeout in seconds."""
  timeout: Int

  """Env is a list of environment variables to use with command execution"""
  envVars: [String!]
}

"""
Describes a color from a muted palette that can be used to distinguish a
resource.
"""
enum MutedColour {
  BLUE
  GRAY
  GREEN
  ORANGE
  PINK
  PURPLE
  YELLOW
}

"""Represents a virtual cluster"""
type Namespace implements Node {
  """The globally unique identifier of the check."""
  id: ID!

  """Name is the unique identifier for a namespace."""
  name: String!

  """All check configurations associated with the namespace."""
  checks(
    offset: Int = 0

    """Limit adds optional limit to the number of entries returned."""
    limit: Int = 10

    """OrderBy adds optional order to the records retrieved."""
    orderBy: CheckListOrder = NAME_DESC

    """
    Filter reduces the set using the given Sensu Query Expression predicate.
    """
    filter: String = ""
  ): CheckConfigConnection!

  """All entities associated with the namespace."""
  entities(
    offset: Int = 0

    """Limit adds optional limit to the number of entries returned."""
    limit: Int = 10

    """OrderBy adds optional order to the records retrieved."""
    orderBy: EntityListOrder = ID_DESC

    """
    Filter reduces the set using the given Sensu Query Expression predicate.
    """
    filter: String = ""
  ): EntityConnection!

  """All events associated with the namespace."""
  events(
    offset: Int = 0

    """Limit adds optional limit to the number of entries returned."""
    limit: Int = 10

    """OrderBy adds optional order to the records retrieved."""
    orderBy: EventsListOrder = SEVERITY

    """
    Filter reduces the set using the given Sensu Query Expression predicate.
    """
    filter: String = ""
  ): EventConnection!

  """All silences associated with the namespace."""
  silences(
    offset: Int = 0

    """Limit adds optional limit to the number of entries returned."""
    limit: Int = 10

    """OrderBy adds optional order to the records retrieved."""
    orderBy: SilencesListOrder = ID_DESC

    """
    Filter reduces the set using the given Sensu Query Expression predicate.
    """
    filter: String = ""
  ): SilencedConnection!

  """All subscriptions in use in the namespace."""
  subscriptions(
    """Omit entity subscriptions from set."""
    omitEntity: Boolean = false

    """OrderBy adds optional order to the records retrieved."""
    orderBy: SubscriptionSetOrder = OCCURRENCES
  ): SubscriptionSet!

  """
  checkHistory includes all persisted check execution results associated with
  the namespace. Unlike the Check type's history this field includes the most
  recent result.
  """
  checkHistory(
    """
    Filter reduces the set using the given Sensu Query Expression predicate.
    """
    filter: String = ""

    """Limit adds optional limit to the number of entries returned."""
    limit: Int = 10000
  ): [CheckHistory]!

  """
  IconId. Experimental. Use graphical interfaces as symbolic reference to organization
  """
  iconId: Icon!

  """
  ColourId. Experimental. Use graphical interfaces as symbolic reference to namespace
  """
  colourId: MutedColour!
}

"""Namespaced represents an object that belongs to a unique namespace."""
interface Namespaced {
  """The namespace the object belongs to."""
  namespace: String!
}

"""
Network contains information about the system network interfaces
that the Agent process is running on, used for additional Entity
context.
"""
type Network {
  interfaces: [NetworkInterface!]!
}

"""
NetworkInterface contains information about a system network
interface.
"""
type NetworkInterface {
  """Name given to the network interface; en0, wi0, tunnel0, etc."""
  name: String!

  """MAC address associated with the network interface"""
  mac: String!

  """IP address(es) associated with the network interface"""
  addresses: [String!]!
}

"""Node describes an object with an ID."""
interface Node {
  """The ID of an object"""
  id: ID!
}

"""ObjectMeta is metadata all persisted objects have."""
type ObjectMeta {
  name: String!
  namespace: String!
  labels: [KVPairString!]
  annotations: [KVPairString!]
}

"""Information about the current page."""
type OffsetPageInfo {
  """When paginating forward, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backward, are there more items?"""
  hasPreviousPage: Boolean!

  """
  Next offset to use when paginating forward; null if there are no more items.
  """
  nextOffset: Int

  """Previous offset to use when paginating backward; null if at terminal."""
  previousOffset: Int

  """Total count of records in relationship."""
  totalCount: Int!
}

"""A ProxyRequests represents a request to execute a proxy check."""
type ProxyRequests {
  """
  entityAttributes store serialized arbitrary JSON-encoded data to match
  entities in the registry.
  """
  entityAttributes: [JSON!]!

  """
  splay indicates if proxy check requests should be splayed, published evenly
  over a window of time.
  """
  splay: Boolean!

  """
  splayCoverage is the percentage used for proxy check request splay
  calculation.
  """
  splayCoverage: Int!
}

"""The query root of Sensu's GraphQL interface."""
type Query {
  """Current viewer."""
  viewer: Viewer

  """
  Namespace fetches the namespace object associated with the given name.
  """
  namespace(name: String!): Namespace

  """Event fetches the event associated with the given set of arguments."""
  event(namespace: String!, entity: String!, check: String): Event

  """Entity fetches the entity associated with the given set of arguments."""
  entity(namespace: String!, name: String!): Entity

  """
  check fetches the check config associated with the given set of arguments.
  """
  check(namespace: String!, name: String!): CheckConfig

  """Node fetches an object given its ID."""
  node(
    """The ID of an object."""
    id: ID!
  ): Node

  """Describes state of authorization tokens"""
  auth: Auth

  """The last namespace that the client accessed."""
  lastNamespace: String!

  """The networking state of the client"""
  localNetwork: LocalNetwork
}

type RefreshTokensPayload {
  auth: Auth!
}

input ResolveEventInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Global ID of the event to resolve."""
  id: ID!

  """The source of the resolve request"""
  source: String = "GraphQL"
}

type ResolveEventPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The event that was resolved."""
  event: Event!
}

"""Role applies only to a single namespace."""
type Role {
  rules: [Rule!]

  """Namespace of the Role"""
  namespace: String!

  """Name of the Role"""
  name: String!
}

"""
RoleBinding grants the permissions defined in a Role referenced to a user or
a set of users
"""
type RoleBinding {
  """Subjects holds references to the objects the Role applies to"""
  subjects: [Subject!]

  """RoleRef references a Role in the current namespace"""
  roleRef: RoleRef

  """Namespace of the RoleBinding"""
  namespace: String!

  """Name of the RoleBinding"""
  name: String!
}

"""RoleRef maps groups to Roles or ClusterRoles."""
type RoleRef {
  """Type of role being referenced."""
  type: String!

  """Name of the resource being referenced"""
  name: String!
}

"""Rule holds information that describes an action that can be taken"""
type Rule {
  """
  Verbs is a list of verbs that apply to all of the listed resources for this
  rule. These include "get", "list", "watch", "create", "update", "delete".
  TODO: add support for "patch" (this is expensive and should be delayed
  until a further release). TODO: add support for "watch" (via websockets)
  """
  verbs: [String!]!

  """
  Resources is a list of resources that this rule applies to. "*" represents
  all resources.
  """
  resources: [String!]!

  """
  ResourceNames is an optional list of resource names that the rule applies
  to.
  """
  resourceNames: [String!]!
}

"""Silenceable describes resources that can be silenced"""
interface Silenceable {
  isSilenced: Boolean!
  silences: [Silenced!]!
}

"""Silenced is the representation of a silence entry."""
type Silenced implements Node & Namespaced & HasMetadata {
  """The globally unique identifier for the record."""
  id: ID!

  """The namespace the object belongs to."""
  namespace: String!

  """
  Name is the combination of subscription and check name (subscription:checkname)
  """
  name: String!

  """
  metadata contains name, namespace, labels and annotations of the record
  """
  metadata: ObjectMeta!

  """Expire is the number of seconds the entry will live"""
  expire: Int!

  """Exact time at which the silenced entry will expire"""
  expires: DateTime

  """
  ExpireOnResolve defaults to false, clears the entry on resolution when set
  to true
  """
  expireOnResolve: Boolean!

  """Creator is the author of the silenced entry"""
  creator: User!

  """Check is the name of the check event to be silenced."""
  check: CheckConfig

  """Reason is used to provide context to the entry"""
  reason: String

  """
  Subscription is the name of the subscription to which the entry applies.
  """
  subscription: String

  """Begin is a timestamp at which the silenced entry takes effect."""
  begin: DateTime

  """Describes whether the entry has been deleted from the system"""
  deleted: Boolean!
}

"""A connection to a sequence of records."""
type SilencedConnection {
  nodes: [Silenced!]!
  pageInfo: OffsetPageInfo!
}

input SilenceInputs {
  """Reason is used to provide context to the entry"""
  reason: String

  """Begin is a timestamp at which the silenced entry takes effect."""
  begin: DateTime

  """
  ExpireOnResolve defaults to false, clears the entry on resolution when set
  to true
  """
  expireOnResolve: Boolean = true

  """Expire is the number of seconds the entry will live"""
  expire: Int = -1
}

"""Describes ways in which a list of silences can be ordered."""
enum SilencesListOrder {
  ID
  ID_DESC
  BEGIN
  BEGIN_DESC
}

type StandardError implements Error {
  """The field associated with the error."""
  input: String

  """A code concisely describing the error."""
  code: ErrCode!

  """Message describing the error."""
  message: String!
}

type Subject {
  """Kind of object referenced (user or group)"""
  kind: String!

  """Name of the referenced object"""
  name: String!
}

"""
SubscriptionOccurences describes the number of occurrences of a subscription.
"""
type SubscriptionOccurences {
  subscription: String!
  occurrences: Int!
}

"""SubscriptionSet describes a set of subscriptions."""
type SubscriptionSet {
  """Returns all subscriptions in the set. Optionally constrained"""
  entries(limit: Int = 50, offset: Int = 0): [SubscriptionOccurences!]!

  """Returns all subscriptions in the set. Optinally constrained."""
  values(limit: Int = 50, offset: Int = 0): [String!]!

  """Returns the number of values in the set."""
  size: Int
}

"""Describes ways in which a set of subscriptions can be ordered."""
enum SubscriptionSetOrder {
  ALPHA_ASC
  ALPHA_DESC
  OCCURRENCES
}

"""
System contains information about the system that the Agent process
is running on, used for additional Entity context.
"""
type System {
  hostname: String!
  network: Network!

  """Operating system; eg. freebsd, linux, ..."""
  os: String!

  """Operating system platform; eg. ubuntu, linuxmint, ..."""
  platform: String!

  """Operating system family; eg. debian, rhel, ..."""
  platformFamily: String!

  """Version of complete operating system; eg. 10.12.2, ..."""
  platformVersion: String!

  """Architecture; eg. 386, amd64, arm, ..."""
  arch: String!
}

"""TimeWindowDays defines the days of a time window"""
type TimeWindowDays {
  all: [TimeWindowTimeRange!]
  sunday: [TimeWindowTimeRange!]
  monday: [TimeWindowTimeRange!]
  tuesday: [TimeWindowTimeRange!]
  wednesday: [TimeWindowTimeRange!]
  thursday: [TimeWindowTimeRange!]
  friday: [TimeWindowTimeRange!]
  saturday: [TimeWindowTimeRange!]
}

"""TimeWindowTimeRange defines the time ranges of a time"""
type TimeWindowTimeRange {
  """
  Begin is the time which the time window should begin, in the format
  '3:00PM', which satisfies the time.Kitchen format
  """
  begin: String!

  """
  End is the time which the filter should end, in the format '3:00PM', which
  satisfies the time.Kitchen format
  """
  end: String!
}

"""TimeWindowWhen defines the "when" attributes for time windows"""
type TimeWindowWhen {
  """Days is a hash of days"""
  days: TimeWindowDays
}

"""
The Uint scalar type represents a unsigned 32 bit integer. Response formats that
support an unsigned 32‐bit integer or a number type should use that type to
represent this scalar.

**NOTE:** As numbers are represented as double-precision floating point numbers
in Javascript the largest possible value is 2^53. As such 32 bit is used as the
lowest common denominator.
"""
scalar Uint

input UpdateCheckInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Global ID of the check to update."""
  id: ID!

  """properties of the check"""
  props: CheckConfigInputs!
}

type UpdateCheckPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated check."""
  check: CheckConfig!
}

"""User describes an operator in the system"""
type User {
  username: String!
  groups: [String!]!
  disabled: Boolean!
  hasPassword: Boolean!
}

"""Describes a viewer of the system; generally an authenticated user."""
type Viewer {
  """All namespaces the viewer has access to view."""
  namespaces: [Namespace!]!

  """User account associated with the viewer."""
  user: User
}
